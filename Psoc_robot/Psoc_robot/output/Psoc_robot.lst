FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 05 4A LJMP  _Timer1_ISR        (0153)     ljmp	_Timer1_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 04 E6 LJMP  _Timer2_ISR        (0161)     ljmp	_Timer2_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
0034: 7D 04 82 LJMP  _Timer3_ISR        (0169)     ljmp	_Timer3_ISR
0037: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
0038: 7D 04 0D LJMP  _UART_TX_ISR       (0173)     ljmp	_UART_TX_ISR
003B: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
003C: 7D 04 0E LJMP  _UART_RX_ISR       (0177)     ljmp	_UART_RX_ISR
003F: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
0044: 7D 06 0B LJMP  _PWM1_ISR          (0185)     ljmp	_PWM1_ISR
0047: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
004C: 7D 05 AE LJMP  _PWM2_ISR          (0193)     ljmp	_PWM2_ISR
004F: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [FlagsAileron+195],0x0(0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [FlagsAileron+196],0x0(0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 03 AB LCALL 0x03AB             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 02    MOV   A,0x2              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 A4    MOV   X,0xA4             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 20    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 20    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 20    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 1F    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 20    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 20 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 1F    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 1F    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 20    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 20 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 1F    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
0129: 70 EF    AND   F,0xEF             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
                                        (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012B: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
012E: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0130: 62 E0 00 MOV   REG[0xE0],0x0      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0133: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0136: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
0138: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013B: 7C 0C C7 LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
013E: 8F FF    JMP   0x013E             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0140: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0142: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
02A6: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_psoc_robot_Bank1
                                        (0019) export LoadConfigTBL_psoc_robot_Bank0
                                        (0020) export LoadConfigTBL_psoc_robot_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_psoc_robot_Bank0:
                                        (0023) ;  Instance name PWM1, User Module PWM16
                                        (0024) ;       Instance name PWM1, Block Name PWM16_LSB(DBB20)
                                        (0025) 	db		43h, 00h		;PWM1_CONTROL_LSB_REG(DBB20CR0)
                                        (0026) 	db		41h, e7h		;PWM1_PERIOD_LSB_REG(DBB20DR1)
                                        (0027) 	db		42h, 00h		;PWM1_COMPARE_LSB_REG(DBB20DR2)
                                        (0028) ;       Instance name PWM1, Block Name PWM16_MSB(DBB21)
                                        (0029) 	db		47h, 00h		;PWM1_CONTROL_MSB_REG(DBB21CR0)
                                        (0030) 	db		45h, 03h		;PWM1_PERIOD_MSB_REG(DBB21DR1)
                                        (0031) 	db		46h, 00h		;PWM1_COMPARE_MSB_REG(DBB21DR2)
                                        (0032) ;  Instance name PWM2, User Module PWM16
                                        (0033) ;       Instance name PWM2, Block Name PWM16_LSB(DCB22)
                                        (0034) 	db		4bh, 00h		;PWM2_CONTROL_LSB_REG(DCB22CR0)
                                        (0035) 	db		49h, e7h		;PWM2_PERIOD_LSB_REG(DCB22DR1)
                                        (0036) 	db		4ah, 00h		;PWM2_COMPARE_LSB_REG(DCB22DR2)
                                        (0037) ;       Instance name PWM2, Block Name PWM16_MSB(DCB23)
                                        (0038) 	db		4fh, 00h		;PWM2_CONTROL_MSB_REG(DCB23CR0)
                                        (0039) 	db		4dh, 03h		;PWM2_PERIOD_MSB_REG(DCB23DR1)
                                        (0040) 	db		4eh, 00h		;PWM2_COMPARE_MSB_REG(DCB23DR2)
                                        (0041) ;  Instance name Timer1, User Module Timer16
                                        (0042) ;       Instance name Timer1, Block Name TIMER16_LSB(DBB00)
                                        (0043) 	db		23h, 00h		;Timer1_CONTROL_LSB_REG(DBB00CR0)
                                        (0044) 	db		21h, ffh		;Timer1_PERIOD_LSB_REG(DBB00DR1)
                                        (0045) 	db		22h, 00h		;Timer1_COMPARE_LSB_REG(DBB00DR2)
                                        (0046) ;       Instance name Timer1, Block Name TIMER16_MSB(DBB01)
                                        (0047) 	db		27h, 06h		;Timer1_CONTROL_MSB_REG(DBB01CR0)
                                        (0048) 	db		25h, ffh		;Timer1_PERIOD_MSB_REG(DBB01DR1)
                                        (0049) 	db		26h, 00h		;Timer1_COMPARE_MSB_REG(DBB01DR2)
                                        (0050) ;  Instance name Timer2, User Module Timer16
                                        (0051) ;       Instance name Timer2, Block Name TIMER16_LSB(DCB02)
                                        (0052) 	db		2bh, 00h		;Timer2_CONTROL_LSB_REG(DCB02CR0)
                                        (0053) 	db		29h, ffh		;Timer2_PERIOD_LSB_REG(DCB02DR1)
                                        (0054) 	db		2ah, 00h		;Timer2_COMPARE_LSB_REG(DCB02DR2)
                                        (0055) ;       Instance name Timer2, Block Name TIMER16_MSB(DCB03)
                                        (0056) 	db		2fh, 06h		;Timer2_CONTROL_MSB_REG(DCB03CR0)
                                        (0057) 	db		2dh, ffh		;Timer2_PERIOD_MSB_REG(DCB03DR1)
                                        (0058) 	db		2eh, 00h		;Timer2_COMPARE_MSB_REG(DCB03DR2)
                                        (0059) ;  Instance name Timer3, User Module Timer16
                                        (0060) ;       Instance name Timer3, Block Name TIMER16_LSB(DBB10)
                                        (0061) 	db		33h, 00h		;Timer3_CONTROL_LSB_REG(DBB10CR0)
                                        (0062) 	db		31h, ffh		;Timer3_PERIOD_LSB_REG(DBB10DR1)
                                        (0063) 	db		32h, 00h		;Timer3_COMPARE_LSB_REG(DBB10DR2)
                                        (0064) ;       Instance name Timer3, Block Name TIMER16_MSB(DBB11)
                                        (0065) 	db		37h, 06h		;Timer3_CONTROL_MSB_REG(DBB11CR0)
                                        (0066) 	db		35h, ffh		;Timer3_PERIOD_MSB_REG(DBB11DR1)
                                        (0067) 	db		36h, 00h		;Timer3_COMPARE_MSB_REG(DBB11DR2)
                                        (0068) ;  Instance name UART, User Module UART
                                        (0069) ;       Instance name UART, Block Name RX(DCB13)
                                        (0070) 	db		3fh, 00h		;UART_RX_CONTROL_REG(DCB13CR0)
                                        (0071) 	db		3dh, 00h		;UART_(DCB13DR1)
                                        (0072) 	db		3eh, 00h		;UART_RX_BUFFER_REG (DCB13DR2)
                                        (0073) ;       Instance name UART, Block Name TX(DCB12)
                                        (0074) 	db		3bh, 00h		;UART_TX_CONTROL_REG(DCB12CR0)
                                        (0075) 	db		39h, 00h		;UART_TX_BUFFER_REG (DCB12DR1)
                                        (0076) 	db		3ah, 00h		;UART_(DCB12DR2)
                                        (0077) ;  Global Register values Bank 0
                                        (0078) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0079) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0080) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0081) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0082) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0083) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0084) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0085) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0086) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0087) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0088) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0089) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0090) 	db		b5h, 00h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0091) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0092) 	db		b8h, 05h		; Row_1_InputMux register (RDI1RI)
                                        (0093) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0094) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0095) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0096) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0097) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0098) 	db		beh, 01h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0099) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0100) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0101) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0102) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0103) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0104) 	db		c5h, 22h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0105) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0106) 	db		c8h, 56h		; Row_3_InputMux register (RDI3RI)
                                        (0107) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0108) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0109) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0110) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0111) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0112) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0113) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0114) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0115) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0116) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0117) 	db		ffh
                                        (0118) LoadConfigTBL_psoc_robot_Bank1:
                                        (0119) ;  Instance name PWM1, User Module PWM16
                                        (0120) ;       Instance name PWM1, Block Name PWM16_LSB(DBB20)
                                        (0121) 	db		40h, 11h		;PWM1_FUNC_LSB_REG(DBB20FN)
                                        (0122) 	db		41h, 15h		;PWM1_INPUT_LSB_REG(DBA20IN)
                                        (0123) 	db		42h, 40h		;PWM1_OUTPUT_LSB_REG(DBA20OU)
                                        (0124) ;       Instance name PWM1, Block Name PWM16_MSB(DBB21)
                                        (0125) 	db		44h, 31h		;PWM1_FUNC_MSB_REG(DBB21FN)
                                        (0126) 	db		45h, 35h		;PWM1_INPUT_MSB_REG(DBB21IN)
                                        (0127) 	db		46h, 44h		;PWM1_OUTPUT_MSB_REG(DBB21OU)
                                        (0128) ;  Instance name PWM2, User Module PWM16
                                        (0129) ;       Instance name PWM2, Block Name PWM16_LSB(DCB22)
                                        (0130) 	db		48h, 11h		;PWM2_FUNC_LSB_REG(DCB22FN)
                                        (0131) 	db		49h, 15h		;PWM2_INPUT_LSB_REG(DCB22IN)
                                        (0132) 	db		4ah, 40h		;PWM2_OUTPUT_LSB_REG(DCB22OU)
                                        (0133) ;       Instance name PWM2, Block Name PWM16_MSB(DCB23)
                                        (0134) 	db		4ch, 31h		;PWM2_FUNC_MSB_REG(DCB23FN)
                                        (0135) 	db		4dh, 35h		;PWM2_INPUT_MSB_REG(DCB23IN)
                                        (0136) 	db		4eh, 45h		;PWM2_OUTPUT_MSB_REG(DCB23OU)
                                        (0137) ;  Instance name Timer1, User Module Timer16
                                        (0138) ;       Instance name Timer1, Block Name TIMER16_LSB(DBB00)
                                        (0139) 	db		20h, 00h		;Timer1_FUNC_LSB_REG(DBB00FN)
                                        (0140) 	db		21h, c6h		;Timer1_INPUT_LSB_REG(DBB00IN)
                                        (0141) 	db		22h, 40h		;Timer1_OUTPUT_LSB_REG(DBB00OU)
                                        (0142) ;       Instance name Timer1, Block Name TIMER16_MSB(DBB01)
                                        (0143) 	db		24h, 20h		;Timer1_FUNC_MSB_REG(DBB01FN)
                                        (0144) 	db		25h, 36h		;Timer1_INPUT_MSB_REG(DBB01IN)
                                        (0145) 	db		26h, 40h		;Timer1_OUTPUT_MSB_REG(DBB01OU)
                                        (0146) ;  Instance name Timer2, User Module Timer16
                                        (0147) ;       Instance name Timer2, Block Name TIMER16_LSB(DCB02)
                                        (0148) 	db		28h, 00h		;Timer2_FUNC_LSB_REG(DCB02FN)
                                        (0149) 	db		29h, d6h		;Timer2_INPUT_LSB_REG(DCB02IN)
                                        (0150) 	db		2ah, 40h		;Timer2_OUTPUT_LSB_REG(DCB02OU)
                                        (0151) ;       Instance name Timer2, Block Name TIMER16_MSB(DCB03)
                                        (0152) 	db		2ch, 20h		;Timer2_FUNC_MSB_REG(DCB03FN)
                                        (0153) 	db		2dh, 36h		;Timer2_INPUT_MSB_REG(DCB03IN)
                                        (0154) 	db		2eh, 40h		;Timer2_OUTPUT_MSB_REG(DCB03OU)
                                        (0155) ;  Instance name Timer3, User Module Timer16
                                        (0156) ;       Instance name Timer3, Block Name TIMER16_LSB(DBB10)
                                        (0157) 	db		30h, 00h		;Timer3_FUNC_LSB_REG(DBB10FN)
                                        (0158) 	db		31h, e6h		;Timer3_INPUT_LSB_REG(DBB10IN)
                                        (0159) 	db		32h, 40h		;Timer3_OUTPUT_LSB_REG(DBB10OU)
                                        (0160) ;       Instance name Timer3, Block Name TIMER16_MSB(DBB11)
                                        (0161) 	db		34h, 20h		;Timer3_FUNC_MSB_REG(DBB11FN)
                                        (0162) 	db		35h, 36h		;Timer3_INPUT_MSB_REG(DBB11IN)
                                        (0163) 	db		36h, 40h		;Timer3_OUTPUT_MSB_REG(DBB11OU)
                                        (0164) ;  Instance name UART, User Module UART
                                        (0165) ;       Instance name UART, Block Name RX(DCB13)
                                        (0166) 	db		3ch, 05h		;UART_RX_FUNC_REG   (DCB13FN)
                                        (0167) 	db		3dh, 00h		;UART_RX_INPUT_REG  (DCB13IN)
                                        (0168) 	db		3eh, 06h		;UART_RX_OUTPUT_REG (DCB13OU)
                                        (0169) ;       Instance name UART, Block Name TX(DCB12)
                                        (0170) 	db		38h, 0dh		;UART_TX_FUNC_REG   (DCB12FN)
                                        (0171) 	db		39h, 00h		;UART_TX_INPUT_REG  (DCB12IN)
                                        (0172) 	db		3ah, 07h		;UART_TX_OUTPUT_REG (DCB12OU)
                                        (0173) ;  Global Register values Bank 1
                                        (0174) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0175) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0176) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0177) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0178) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0179) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0180) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0181) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0182) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0183) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0184) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0185) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0186) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0187) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0188) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0189) 	db		deh, 03h		; OscillatorControl_4 register (OSC_CR4)
                                        (0190) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0191) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0192) 	db		ffh
                                        (0193) AREA psoc_config(rom, rel)
                                        (0194) LoadConfigTBL_psoc_robot_Ordered:
                                        (0195) ;  Ordered Global Register values
                                        (0196) 	M8C_SetBank0
02A8: 62 00 00 MOV   REG[0x0],0x0       (0197) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
02AB: 71 10    OR    F,0x10             
                                        (0198) 	M8C_SetBank1
02AD: 62 00 F8 MOV   REG[0x0],0xF8      (0199) 	mov	reg[00h], f8h		; Port_0_DriveMode_0 register (PRT0DM0)
02B0: 62 01 07 MOV   REG[0x1],0x7       (0200) 	mov	reg[01h], 07h		; Port_0_DriveMode_1 register (PRT0DM1)
02B3: 70 EF    AND   F,0xEF             
                                        (0201) 	M8C_SetBank0
02B5: 62 03 00 MOV   REG[0x3],0x0       (0202) 	mov	reg[03h], 00h		; Port_0_DriveMode_2 register (PRT0DM2)
02B8: 62 02 37 MOV   REG[0x2],0x37      (0203) 	mov	reg[02h], 37h		; Port_0_GlobalSelect register (PRT0GS)
02BB: 71 10    OR    F,0x10             
                                        (0204) 	M8C_SetBank1
02BD: 62 02 00 MOV   REG[0x2],0x0       (0205) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
02C0: 62 03 00 MOV   REG[0x3],0x0       (0206) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
02C3: 70 EF    AND   F,0xEF             
                                        (0207) 	M8C_SetBank0
02C5: 62 01 00 MOV   REG[0x1],0x0       (0208) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
02C8: 62 04 00 MOV   REG[0x4],0x0       (0209) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
02CB: 71 10    OR    F,0x10             
                                        (0210) 	M8C_SetBank1
02CD: 62 04 FF MOV   REG[0x4],0xFF      (0211) 	mov	reg[04h], ffh		; Port_1_DriveMode_0 register (PRT1DM0)
02D0: 62 05 00 MOV   REG[0x5],0x0       (0212) 	mov	reg[05h], 00h		; Port_1_DriveMode_1 register (PRT1DM1)
02D3: 70 EF    AND   F,0xEF             
                                        (0213) 	M8C_SetBank0
02D5: 62 07 00 MOV   REG[0x7],0x0       (0214) 	mov	reg[07h], 00h		; Port_1_DriveMode_2 register (PRT1DM2)
02D8: 62 06 00 MOV   REG[0x6],0x0       (0215) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
02DB: 71 10    OR    F,0x10             
                                        (0216) 	M8C_SetBank1
02DD: 62 06 00 MOV   REG[0x6],0x0       (0217) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
02E0: 62 07 00 MOV   REG[0x7],0x0       (0218) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
02E3: 70 EF    AND   F,0xEF             
                                        (0219) 	M8C_SetBank0
02E5: 62 05 00 MOV   REG[0x5],0x0       (0220) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
02E8: 62 08 00 MOV   REG[0x8],0x0       (0221) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
02EB: 71 10    OR    F,0x10             
                                        (0222) 	M8C_SetBank1
02ED: 62 08 E7 MOV   REG[0x8],0xE7      (0223) 	mov	reg[08h], e7h		; Port_2_DriveMode_0 register (PRT2DM0)
02F0: 62 09 18 MOV   REG[0x9],0x18      (0224) 	mov	reg[09h], 18h		; Port_2_DriveMode_1 register (PRT2DM1)
02F3: 70 EF    AND   F,0xEF             
                                        (0225) 	M8C_SetBank0
02F5: 62 0B 18 MOV   REG[0xB],0x18      (0226) 	mov	reg[0bh], 18h		; Port_2_DriveMode_2 register (PRT2DM2)
02F8: 62 0A 00 MOV   REG[0xA],0x0       (0227) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
02FB: 71 10    OR    F,0x10             
                                        (0228) 	M8C_SetBank1
02FD: 62 0A 00 MOV   REG[0xA],0x0       (0229) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0300: 62 0B 00 MOV   REG[0xB],0x0       (0230) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0303: 70 EF    AND   F,0xEF             
                                        (0231) 	M8C_SetBank0
0305: 62 09 00 MOV   REG[0x9],0x0       (0232) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0308: 62 0C 00 MOV   REG[0xC],0x0       (0233) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
030B: 71 10    OR    F,0x10             
                                        (0234) 	M8C_SetBank1
030D: 62 0C 00 MOV   REG[0xC],0x0       (0235) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0310: 62 0D 00 MOV   REG[0xD],0x0       (0236) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0313: 70 EF    AND   F,0xEF             
                                        (0237) 	M8C_SetBank0
0315: 62 0F 00 MOV   REG[0xF],0x0       (0238) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0318: 62 0E 00 MOV   REG[0xE],0x0       (0239) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
031B: 71 10    OR    F,0x10             
                                        (0240) 	M8C_SetBank1
031D: 62 0E 00 MOV   REG[0xE],0x0       (0241) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0320: 62 0F 00 MOV   REG[0xF],0x0       (0242) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0323: 70 EF    AND   F,0xEF             
                                        (0243) 	M8C_SetBank0
0325: 62 0D 00 MOV   REG[0xD],0x0       (0244) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0328: 62 10 00 MOV   REG[0x10],0x0      (0245) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
032B: 71 10    OR    F,0x10             
                                        (0246) 	M8C_SetBank1
032D: 62 10 00 MOV   REG[0x10],0x0      (0247) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0330: 62 11 00 MOV   REG[0x11],0x0      (0248) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0333: 70 EF    AND   F,0xEF             
                                        (0249) 	M8C_SetBank0
0335: 62 13 00 MOV   REG[0x13],0x0      (0250) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0338: 62 12 00 MOV   REG[0x12],0x0      (0251) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
033B: 71 10    OR    F,0x10             
                                        (0252) 	M8C_SetBank1
033D: 62 12 00 MOV   REG[0x12],0x0      (0253) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0340: 62 13 00 MOV   REG[0x13],0x0      (0254) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0343: 70 EF    AND   F,0xEF             
                                        (0255) 	M8C_SetBank0
0345: 62 11 00 MOV   REG[0x11],0x0      (0256) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0348: 62 14 00 MOV   REG[0x14],0x0      (0257) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
034B: 71 10    OR    F,0x10             
                                        (0258) 	M8C_SetBank1
034D: 62 14 00 MOV   REG[0x14],0x0      (0259) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0350: 62 15 00 MOV   REG[0x15],0x0      (0260) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
0353: 70 EF    AND   F,0xEF             
                                        (0261) 	M8C_SetBank0
0355: 62 17 00 MOV   REG[0x17],0x0      (0262) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0358: 62 16 00 MOV   REG[0x16],0x0      (0263) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
035B: 71 10    OR    F,0x10             
                                        (0264) 	M8C_SetBank1
035D: 62 16 00 MOV   REG[0x16],0x0      (0265) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0360: 62 17 00 MOV   REG[0x17],0x0      (0266) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0363: 70 EF    AND   F,0xEF             
                                        (0267) 	M8C_SetBank0
0365: 62 15 00 MOV   REG[0x15],0x0      (0268) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0368: 62 18 00 MOV   REG[0x18],0x0      (0269) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
036B: 71 10    OR    F,0x10             
                                        (0270) 	M8C_SetBank1
036D: 62 18 00 MOV   REG[0x18],0x0      (0271) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
0370: 62 19 00 MOV   REG[0x19],0x0      (0272) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
0373: 70 EF    AND   F,0xEF             
                                        (0273) 	M8C_SetBank0
0375: 62 1B 00 MOV   REG[0x1B],0x0      (0274) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
0378: 62 1A 00 MOV   REG[0x1A],0x0      (0275) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
037B: 71 10    OR    F,0x10             
                                        (0276) 	M8C_SetBank1
037D: 62 1A 00 MOV   REG[0x1A],0x0      (0277) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
0380: 62 1B 00 MOV   REG[0x1B],0x0      (0278) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
0383: 70 EF    AND   F,0xEF             
                                        (0279) 	M8C_SetBank0
0385: 62 19 00 MOV   REG[0x19],0x0      (0280) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0388: 62 1C 00 MOV   REG[0x1C],0x0      (0281) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
038B: 71 10    OR    F,0x10             
                                        (0282) 	M8C_SetBank1
038D: 62 1C 00 MOV   REG[0x1C],0x0      (0283) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0390: 62 1D 00 MOV   REG[0x1D],0x0      (0284) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
0393: 70 EF    AND   F,0xEF             
                                        (0285) 	M8C_SetBank0
0395: 62 1F 00 MOV   REG[0x1F],0x0      (0286) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0398: 62 1E 00 MOV   REG[0x1E],0x0      (0287) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
039B: 71 10    OR    F,0x10             
                                        (0288) 	M8C_SetBank1
039D: 62 1E 00 MOV   REG[0x1E],0x0      (0289) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
03A0: 62 1F 00 MOV   REG[0x1F],0x0      (0290) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
03A3: 70 EF    AND   F,0xEF             
                                        (0291) 	M8C_SetBank0
03A5: 62 1D 00 MOV   REG[0x1D],0x0      (0292) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
03A8: 70 EF    AND   F,0xEF             
                                        (0293) 	M8C_SetBank0
03AA: 7F       RET                      (0294) 	ret
                                        (0295) 
                                        (0296) 
                                        (0297) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_psoc_robot
                                        (0026) export _LoadConfig_psoc_robot
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) ;---------------------------------------------------------------------------
                                        (0037) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0038) ;                  parameters handled by boot code, like CPU speed). This
                                        (0039) ;                  function can be called from user code, but typically it
                                        (0040) ;                  is only called from boot.
                                        (0041) ;
                                        (0042) ;       INPUTS: None.
                                        (0043) ;      RETURNS: Nothing.
                                        (0044) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0045) ;               In the large memory model currently only the page
                                        (0046) ;               pointer registers listed below are modified.  This does
                                        (0047) ;               not guarantee that in future implementations of this
                                        (0048) ;               function other page pointer registers will not be
                                        (0049) ;               modified.
                                        (0050) ;          
                                        (0051) ;               Page Pointer Registers Modified: 
                                        (0052) ;               CUR_PP
                                        (0053) ;
                                        (0054) _LoadConfigInit:
                                        (0055)  LoadConfigInit:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0057)     
03AB: 7C 03 B2 LCALL 0x03B2             (0058) 	lcall	LoadConfig_psoc_robot
03AE: 7C 02 A6 LCALL 0x02A6             (0059) 	lcall	LoadConfigTBL_psoc_robot_Ordered
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
03B1: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration psoc_robot
                                        (0067) ;
                                        (0068) ;    Load configuration registers for psoc_robot.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_psoc_robot:
                                        (0085)  LoadConfig_psoc_robot:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0087) 
03B2: 10       PUSH  X                  (0088) 	push	x
03B3: 70 EF    AND   F,0xEF             
                                        (0089)     M8C_SetBank0                    ; Force bank 0
03B5: 50 00    MOV   A,0x0              (0090)     mov     a, 0                    ; Specify bank 0
03B7: 67       ASR   A                  (0091)     asr     a                       ; Store in carry flag
                                        (0092)                                     ; Load bank 0 table:
03B8: 50 01    MOV   A,0x1              (0093)     mov     A, >LoadConfigTBL_psoc_robot_Bank0
03BA: 57 A0    MOV   X,0xA0             (0094)     mov     X, <LoadConfigTBL_psoc_robot_Bank0
03BC: 7C 03 CD LCALL 0x03CD             (0095)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0096) 
03BF: 50 01    MOV   A,0x1              (0097)     mov     a, 1                    ; Specify bank 1
03C1: 67       ASR   A                  (0098)     asr     a                       ; Store in carry flag
                                        (0099)                                     ; Load bank 1 table:
03C2: 50 02    MOV   A,0x2              (0100)     mov     A, >LoadConfigTBL_psoc_robot_Bank1
03C4: 57 37    MOV   X,0x37             (0101)     mov     X, <LoadConfigTBL_psoc_robot_Bank1
03C6: 7C 03 CD LCALL 0x03CD             (0102)     lcall   LoadConfig              ; Load the bank 1 values
03C9: 70 EF    AND   F,0xEF             
                                        (0103) 
                                        (0104)     M8C_SetBank0                    ; Force return to bank 0
03CB: 20       POP   X                  (0105) 	pop		x
                                        (0106) 
                                        (0107)     RAM_EPILOGUE RAM_USE_CLASS_4
03CC: 7F       RET                      (0108)     ret
                                        (0109) 
                                        (0110) 
                                        (0111) 
                                        (0112) 
                                        (0113) ;---------------------------------------------------------------------------
                                        (0114) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0115) ;              pairs. Terminate on address=0xFF.
                                        (0116) ;
                                        (0117) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0118) ;           Flag Register Carry bit encodes the Register Bank
                                        (0119) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0120) ;
                                        (0121) ;  RETURNS: nothing.
                                        (0122) ;
                                        (0123) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0124) ;                X-3 Temporary store for register address
                                        (0125) ;                X-2 LSB of config table address
                                        (0126) ;                X-1 MSB of config table address
                                        (0127) ;
                                        (0128) LoadConfig:
                                        (0129)     RAM_PROLOGUE RAM_USE_CLASS_2
03CD: 38 02    ADD   SP,0x2             (0130)     add     SP, 2                   ; Set up local vars
03CF: 10       PUSH  X                  (0131)     push    X                       ; Save config table address on stack
03D0: 08       PUSH  A                  (0132)     push    A
03D1: 4F       MOV   X,SP               (0133)     mov     X, SP
03D2: 56 FC 00 MOV   [X-4],0x0          (0134)     mov     [X-4], 0                ; Set default Destination to Bank 0
03D5: D0 04    JNC   0x03DA             (0135)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
03D7: 56 FC 01 MOV   [X-4],0x1          (0136)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0137) .BankSelectSaved:
03DA: 18       POP   A                  (0138)     pop     A
03DB: 20       POP   X                  (0139)     pop     X
03DC: 70 EF    AND   F,0xEF             
03DE: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0140) 
                                        (0141) LoadConfigLp:
                                        (0142)     M8C_SetBank0                    ; Switch to bank 0
                                        (0143)     M8C_ClearWDT                    ; Clear the watchdog for long inits
03E1: 10       PUSH  X                  (0144)     push    X                       ; Preserve the config table address
03E2: 08       PUSH  A                  (0145)     push    A
03E3: 28       ROMX                     (0146)     romx                            ; Load register address from table
03E4: 39 FF    CMP   A,0xFF             (0147)     cmp     A, END_CONFIG_TABLE     ; End of table?
03E6: A0 1F    JZ    0x0406             (0148)     jz      EndLoadConfig           ;   Yes, go wrap it up
03E8: 4F       MOV   X,SP               (0149)     mov     X, SP                   ;
03E9: 48 FC 01 TST   [X-4],0x1          (0150)     tst     [X-4], 1                ; Loading IO Bank 1?
03EC: A0 03    JZ    0x03F0             (0151)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
03EE: 71 10    OR    F,0x10             
                                        (0152)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0153) .IOBankNowSet:
03F0: 54 FD    MOV   [X-3],A            (0154)     mov     [X-3], A                ; Stash the register address
03F2: 18       POP   A                  (0155)     pop     A                       ; Retrieve the table address
03F3: 20       POP   X                  (0156)     pop     X
03F4: 75       INC   X                  (0157)     inc     X                       ; Advance to the data byte
03F5: 09 00    ADC   A,0x0              (0158)     adc     A, 0
03F7: 10       PUSH  X                  (0159)     push    X                       ; Save the config table address again
03F8: 08       PUSH  A                  (0160)     push    A
03F9: 28       ROMX                     (0161)     romx                            ; load config data from the table
03FA: 4F       MOV   X,SP               (0162)     mov     X, SP                   ; retrieve the register address
03FB: 59 FD    MOV   X,[X-3]            (0163)     mov     X, [X-3]
03FD: 61 00    MOV   REG[X+0x0],A       (0164)     mov     reg[X], A               ; Configure the register
03FF: 18       POP   A                  (0165)     pop     A                       ; retrieve the table address
0400: 20       POP   X                  (0166)     pop     X
0401: 75       INC   X                  (0167)     inc     X                       ; advance to next table entry
0402: 09 00    ADC   A,0x0              (0168)     adc     A, 0
0404: 8F D7    JMP   0x03DC             (0169)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0170) EndLoadConfig:
0406: 38 FC    ADD   SP,0xFC            (0171)     add     SP, -4
0408: 70 3F    AND   F,0x3F             
040A: 71 C0    OR    F,0xC0             
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
040C: 7F       RET                      (0173)     ret
                                        (0174) 
                                        (0175) AREA InterruptRAM(ram, rel)
                                        (0176) 
                                        (0177) NO_SHADOW:
                                        (0178) _NO_SHADOW:
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
040D: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_RXBUF_ENABLE)
040E: 08       PUSH  A                  (0180)    push A
040F: 10       PUSH  X                  (0181)    push X
0410: 5D D3    MOV   A,REG[0xD3]        
0412: 08       PUSH  A                  
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
0413: 58 01    MOV   X,[0x1]            (0187)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
0415: 5D 3F    MOV   A,REG[0x3F]        (0188)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
0417: 08       PUSH  A                  (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
0418: 21 08    AND   A,0x8              (0191)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
041A: B0 04    JNZ   0x041F             (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
041C: 18       POP   A                  (0193)    pop  A                                                  ; Restore stack
041D: 80 5E    JMP   0x047C             (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
041F: 18       POP   A                  (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
0420: 21 E0    AND   A,0xE0             (0200)    and  A,UART_RX_ERROR
0422: A0 12    JZ    0x0435             (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
0424: 2C 00    OR    [0x0],A            (0203)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
0426: 49 3E 00 TST   REG[0x3E],0x0      (0204)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
0429: 21 20    AND   A,0x20             (0205)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
042B: A0 50    JZ    0x047C             (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
042D: 41 3F FE AND   REG[0x3F],0xFE     (0210)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
0430: 43 3F 01 OR    REG[0x3F],0x1      (0211)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
0433: 80 48    JMP   0x047C             (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
0435: 5D 3E    MOV   A,REG[0x3E]        (0216)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
0437: 47 00 01 TST   [0x0],0x1          (0219)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
043A: B0 41    JNZ   0x047C             (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
043C: 39 0D    CMP   A,0xD              (0222)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
043E: B0 14    JNZ   0x0453             (0223)    jnz  .UARTRX_CHK_BACKSPACE
0440: 2E 00 01 OR    [0x0],0x1          (0224)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
0443: 62 D3 00 MOV   REG[0xD3],0x0      
0446: 70 3F    AND   F,0x3F             
0448: 71 80    OR    F,0x80             
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
044A: 56 02 00 MOV   [X+2],0x0          (0230)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
044D: 70 3F    AND   F,0x3F             
044F: 71 00    OR    F,0x0              
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0451: 80 2A    JMP   0x047C             (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
0453: 39 20    CMP   A,0x20             (0246)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
0455: C0 26    JC    0x047C             (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
0457: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
045A: 3C 01 0F CMP   [0x1],0xF          (0253)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
045D: C0 11    JC    0x046F             (0254)    jc   .UARTRX_ISR_GETDATA
045F: 70 3F    AND   F,0x3F             
0461: 71 80    OR    F,0x80             
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0463: 56 02 00 MOV   [X+2],0x0          (0256)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
0466: 70 3F    AND   F,0x3F             
0468: 71 00    OR    F,0x0              
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
046A: 2E 00 10 OR    [0x0],0x10         (0258)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
046D: 80 0E    JMP   0x047C             (0259)    jmp  .RESTORE_IDX_PP
046F: 70 3F    AND   F,0x3F             
0471: 71 80    OR    F,0x80             
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0473: 54 02    MOV   [X+2],A            (0264)    mov  [X+UART_aRxBuffer],A                               ; store data in array
0475: 70 3F    AND   F,0x3F             
0477: 71 00    OR    F,0x0              
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0479: 75       INC   X                  (0266)    inc  X                                                  ; Inc the pointer
047A: 5A 01    MOV   [0x1],X            (0267)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
047C: 18       POP   A                  
047D: 60 D3    MOV   REG[0xD3],A        
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
047F: 20       POP   X                  (0275)    pop  X
0480: 18       POP   A                  (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_RX_ISR_END:
0481: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UARTINT.asm
                                        (0284) 
FILE: lib\timer3int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer3INT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Timer3.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Timer3_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Timer3_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Timer3_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
0482: 7D 13 02 LJMP  _Timer3CaptureISR  (0070)    ljmp _Timer3CaptureISR; added to serve the ultrasoon sensor echo pin, er moet ook een _ voor staan wilt dit naar behoren werken 
                                        (0071)   
                                        (0072)    ;---------------------------------------------------
                                        (0073)    ; Insert your custom assembly code above this banner
                                        (0074)    ;---------------------------------------------------
                                        (0075)    
                                        (0076)    ;---------------------------------------------------
                                        (0077)    ; Insert a lcall to a C function below this banner
                                        (0078)    ; and un-comment the lines between these banners
                                        (0079)    ;---------------------------------------------------
                                        (0080)    
                                        (0081)    ;PRESERVE_CPU_CONTEXT
                                        (0082)    ;lcall _My_C_Function
                                        (0083)    ;RESTORE_CPU_CONTEXT
                                        (0084)    
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ; Insert a lcall to a C function above this banner
                                        (0087)    ; and un-comment the lines between these banners
                                        (0088)    ;---------------------------------------------------
                                        (0089)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0090) 
0485: 7E       RETI                     (0091)    reti
                                        (0092) 
                                        (0093) 
                                        (0094) ; end of file Timer3INT.asm
FILE: lib\timer3.asm                    (0001) ;;*****************************************************************************
0486: 43 E1 20 OR    REG[0xE1],0x20     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer3.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer3.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer3_EnableInt
                                        (0030) export _Timer3_EnableInt
                                        (0031) export  Timer3_DisableInt
                                        (0032) export _Timer3_DisableInt
                                        (0033) export  Timer3_Start
                                        (0034) export _Timer3_Start
                                        (0035) export  Timer3_Stop
                                        (0036) export _Timer3_Stop
                                        (0037) export  Timer3_WritePeriod
                                        (0038) export _Timer3_WritePeriod
                                        (0039) export  Timer3_WriteCompareValue
                                        (0040) export _Timer3_WriteCompareValue
                                        (0041) export  Timer3_wReadCompareValue
                                        (0042) export _Timer3_wReadCompareValue
                                        (0043) export  Timer3_wReadTimer
                                        (0044) export _Timer3_wReadTimer
                                        (0045) export  Timer3_wReadTimerSaveCV
                                        (0046) export _Timer3_wReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  wTimer3_ReadCompareValue  ; deprecated
                                        (0051) export _wTimer3_ReadCompareValue  ; deprecated
                                        (0052) export  wTimer3_ReadTimer         ; deprecated
                                        (0053) export _wTimer3_ReadTimer         ; deprecated
                                        (0054) export  wTimer3_ReadTimerSaveCV   ; deprecated
                                        (0055) export _wTimer3_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  wTimer3_ReadCounter       ; obsolete
                                        (0058) export _wTimer3_ReadCounter       ; obsolete
                                        (0059) export  wTimer3_CaptureCounter    ; obsolete
                                        (0060) export _wTimer3_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA psoc_robot_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer3_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer3_EnableInt:
                                        (0098) _Timer3_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer3_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0489: 7F       RET                      (0102)    ret
048A: 41 E1 DF AND   REG[0xE1],0xDF     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer3_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer3_DisableInt:
                                        (0126) _Timer3_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer3_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
048D: 7F       RET                      (0130)    ret
048E: 43 33 01 OR    REG[0x33],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer3_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer3_Start:
                                        (0154) _Timer3_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer3_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
0491: 7F       RET                      (0158)    ret
0492: 41 33 FE AND   REG[0x33],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer3_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register of the LSB block.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer3_Stop:
                                        (0182) _Timer3_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer3_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
0495: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer3_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 16-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS:
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer3_WritePeriod:
                                        (0211) _Timer3_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
0496: 60 31    MOV   REG[0x31],A        (0213)    mov   reg[Timer3_PERIOD_LSB_REG], A
0498: 5B       MOV   A,X                (0214)    mov   A, X
0499: 60 35    MOV   REG[0x35],A        (0215)    mov   reg[Timer3_PERIOD_MSB_REG], A
                                        (0216)    RAM_EPILOGUE RAM_USE_CLASS_1
049B: 7F       RET                      (0217)    ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) 
                                        (0222) .SECTION
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;  FUNCTION NAME: Timer3_WriteCompareValue
                                        (0225) ;
                                        (0226) ;  DESCRIPTION:
                                        (0227) ;     Writes compare value into the Compare register (DR2).
                                        (0228) ;
                                        (0229) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0230) ;           Compare register. (Call Timer3_Stop to disable).
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;
                                        (0233) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0234) ;  RETURNS:      Nothing
                                        (0235) ;  SIDE EFFECTS: 
                                        (0236) ;    The A and X registers may be modified by this or future implementations
                                        (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0239) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0240) ;    functions.
                                        (0241) ;
                                        (0242)  Timer3_WriteCompareValue:
                                        (0243) _Timer3_WriteCompareValue:
                                        (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
049C: 60 32    MOV   REG[0x32],A        (0245)    mov   reg[Timer3_COMPARE_LSB_REG], A
049E: 5B       MOV   A,X                (0246)    mov   A, X
049F: 60 36    MOV   REG[0x36],A        (0247)    mov   reg[Timer3_COMPARE_MSB_REG], A
                                        (0248)    RAM_EPILOGUE RAM_USE_CLASS_1
04A1: 7F       RET                      (0249)    ret
                                        (0250) 
                                        (0251) .ENDSECTION
                                        (0252) 
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: Timer3_wReadCompareValue
                                        (0257) ;
                                        (0258) ;  DESCRIPTION:
                                        (0259) ;     Reads the Compare registers.
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;
                                        (0262) ;  ARGUMENTS:    None
                                        (0263) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0264) ;  SIDE EFFECTS: 
                                        (0265) ;    The A and X registers may be modified by this or future implementations
                                        (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0269) ;    functions.
                                        (0270) ;
                                        (0271)  Timer3_wReadCompareValue:
                                        (0272) _Timer3_wReadCompareValue:
                                        (0273)  wTimer3_ReadCompareValue:                       ; this name deprecated
                                        (0274) _wTimer3_ReadCompareValue:                       ; this name deprecated
                                        (0275)    RAM_PROLOGUE RAM_USE_CLASS_1
04A2: 5D 36    MOV   A,REG[0x36]        (0276)    mov   A, reg[Timer3_COMPARE_MSB_REG]
04A4: 5C       MOV   X,A                (0277)    mov   X, A
04A5: 5D 32    MOV   A,REG[0x32]        (0278)    mov   A, reg[Timer3_COMPARE_LSB_REG]
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_1
04A7: 7F       RET                      (0280)    ret
                                        (0281) 
                                        (0282) .ENDSECTION
                                        (0283) 
                                        (0284) 
                                        (0285) .SECTION
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: Timer3_wReadTimerSaveCV
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:
                                        (0290) ;     Returns the value in the Count register (DR0), preserving the
                                        (0291) ;     value in the compare register (DR2).
                                        (0292) ;-----------------------------------------------------------------------------
                                        (0293) ;
                                        (0294) ;  ARGUMENTS: None
                                        (0295) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0296) ;  SIDE EFFECTS:
                                        (0297) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0298) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0299) ;     3) The user module is stopped momentarily while the compare value is
                                        (0300) ;        restored.  This may cause the Count register to miss one or more
                                        (0301) ;        counts depending on the input clock speed.
                                        (0302) ;     4) The A and X registers may be modified by this or future implementations
                                        (0303) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0304) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0305) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0306) ;        functions.
                                        (0307) ;
                                        (0308) ;  THEORY of OPERATION:
                                        (0309) ;     1) Read and save the Compare register.
                                        (0310) ;     2) Read the Count register, causing its data to be latched into
                                        (0311) ;        the Compare register.
                                        (0312) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0313) ;        to the buffer.
                                        (0314) ;     4) Disable global interrupts
                                        (0315) ;     5) Halt the timer
                                        (0316) ;     6) Restore the Compare register values
                                        (0317) ;     7) Start the Timer again
                                        (0318) ;     8) Restore global interrupt state
                                        (0319) ;
                                        (0320)  Timer3_wReadTimerSaveCV:
                                        (0321) _Timer3_wReadTimerSaveCV:
                                        (0322)  wTimer3_ReadTimerSaveCV:                        ; this name deprecated
                                        (0323) _wTimer3_ReadTimerSaveCV:                        ; this name deprecated
                                        (0324)  wTimer3_ReadCounter:                            ; this name deprecated
                                        (0325) _wTimer3_ReadCounter:                            ; this name deprecated
                                        (0326) 
                                        (0327) CpuFlags:      equ   0
                                        (0328) wCount_MSB:    equ   1
                                        (0329) wCount_LSB:    equ   2
                                        (0330) 
                                        (0331)    RAM_PROLOGUE RAM_USE_CLASS_2
04A8: 4F       MOV   X,SP               (0332)    mov   X, SP                                   ; X <- stack frame pointer
04A9: 38 03    ADD   SP,0x3             (0333)    add   SP, 3                                   ; Reserve space for flags, count
04AB: 5D 33    MOV   A,REG[0x33]        (0334)    mov   A, reg[Timer3_CONTROL_LSB_REG]          ; save the Control register
04AD: 08       PUSH  A                  (0335)    push  A
04AE: 5D 32    MOV   A,REG[0x32]        (0336)    mov   A, reg[Timer3_COMPARE_LSB_REG]          ; save the Compare register
04B0: 08       PUSH  A                  (0337)    push  A
04B1: 5D 36    MOV   A,REG[0x36]        (0338)    mov   A, reg[Timer3_COMPARE_MSB_REG]
04B3: 08       PUSH  A                  (0339)    push  A
04B4: 5D 30    MOV   A,REG[0x30]        (0340)    mov   A, reg[Timer3_COUNTER_LSB_REG]          ; synchronous copy DR2 <- DR0
                                        (0341)                                                  ; This may cause an interrupt!
04B6: 5D 36    MOV   A,REG[0x36]        (0342)    mov   A, reg[Timer3_COMPARE_MSB_REG]          ; Now grab DR2 (DR0) and save
04B8: 54 01    MOV   [X+1],A            (0343)    mov   [X+wCount_MSB], A
04BA: 5D 32    MOV   A,REG[0x32]        (0344)    mov   A, reg[Timer3_COMPARE_LSB_REG]
04BC: 54 02    MOV   [X+2],A            (0345)    mov   [X+wCount_LSB], A
04BE: 50 00    MOV   A,0x0              (0346)    mov   A, 0                                    ; Guess the global interrupt state
04C0: 49 F7 01 TST   REG[0xF7],0x1      (0347)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
04C3: A0 03    JZ    0x04C7             (0348)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
04C5: 50 01    MOV   A,0x1              (0349)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0350) .SetupStatusFlag:                                ; and ...
04C7: 54 00    MOV   [X+0],A            (0351)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
04C9: 70 FE    AND   F,0xFE             
04CB: 41 33 FE AND   REG[0x33],0xFE     
                                        (0352)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0353)    Timer3_Stop_M                                 ; Disable (stop) the timer
04CE: 18       POP   A                  (0354)    pop   A                                       ; Restore the Compare register
04CF: 60 36    MOV   REG[0x36],A        (0355)    mov   reg[Timer3_COMPARE_MSB_REG], A
04D1: 18       POP   A                  (0356)    pop   A
04D2: 60 32    MOV   REG[0x32],A        (0357)    mov   reg[Timer3_COMPARE_LSB_REG], A
04D4: 18       POP   A                  (0358)    pop   A                                       ; restore start state of the timer
04D5: 60 33    MOV   REG[0x33],A        (0359)    mov   reg[Timer3_CONTROL_LSB_REG], A
04D7: 18       POP   A                  (0360)    pop   A                                       ; Return result stored in stack frame
04D8: 20       POP   X                  (0361)    pop   X
04D9: 70 3F    AND   F,0x3F             
04DB: 71 C0    OR    F,0xC0             
                                        (0362)    RAM_EPILOGUE RAM_USE_CLASS_2
04DD: 7E       RETI                     (0363)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0364) 
                                        (0365) .ENDSECTION
                                        (0366) 
                                        (0367) 
                                        (0368) .SECTION
                                        (0369) ;-----------------------------------------------------------------------------
                                        (0370) ;  FUNCTION NAME: Timer3_wReadTimer
                                        (0371) ;
                                        (0372) ;  DESCRIPTION:
                                        (0373) ;     Performs a software capture of the Count register.  A synchronous
                                        (0374) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0375) ;
                                        (0376) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0377) ;-----------------------------------------------------------------------------
                                        (0378) ;
                                        (0379) ;  ARGUMENTS:    None
                                        (0380) ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
                                        (0381) ;  SIDE EFFECTS:
                                        (0382) ;    May cause an interrupt.
                                        (0383) ;
                                        (0384) ;    The A and X registers may be modified by this or future implementations
                                        (0385) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0386) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390) ;  THEORY of OPERATION:
                                        (0391) ;     1) Read the Count register - this causes the count value to be
                                        (0392) ;        latched into the Compare registers.
                                        (0393) ;     2) Read and return the Count register values from the Compare
                                        (0394) ;        registers into the return buffer.
                                        (0395) ;
                                        (0396)  Timer3_wReadTimer:
                                        (0397) _Timer3_wReadTimer:
                                        (0398)  wTimer3_ReadTimer:                              ; this name deprecated
                                        (0399) _wTimer3_ReadTimer:                              ; this name deprecated
                                        (0400)  wTimer3_CaptureCounter:                         ; this name deprecated
                                        (0401) _wTimer3_CaptureCounter:                         ; this name deprecated
                                        (0402) 
                                        (0403)    RAM_PROLOGUE RAM_USE_CLASS_1
04DE: 5D 30    MOV   A,REG[0x30]        (0404)    mov   A, reg[Timer3_COUNTER_LSB_REG]          ; synchronous copy DR2 <- DR0
                                        (0405)                                                  ; This may cause an interrupt!
                                        (0406) 
04E0: 5D 36    MOV   A,REG[0x36]        (0407)    mov   A, reg[Timer3_COMPARE_MSB_REG]          ; Return DR2 (actually DR0)
04E2: 5C       MOV   X,A                (0408)    mov   X, A
04E3: 5D 32    MOV   A,REG[0x32]        (0409)    mov   A, reg[Timer3_COMPARE_LSB_REG]
                                        (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
04E5: 7F       RET                      (0411)    ret
                                        (0412) 
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) ; End of File Timer3.asm
FILE: lib\timer2int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer2INT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Timer2.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Timer2_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Timer2_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Timer2_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
04E6: 7D 12 13 LJMP  _Timer2CaptureISR  (0070)    ljmp _Timer2CaptureISR;added for motorcontroll2
                                        (0071) 
                                        (0072)    ;---------------------------------------------------
                                        (0073)    ; Insert your custom assembly code above this banner
                                        (0074)    ;---------------------------------------------------
                                        (0075)    
                                        (0076)    ;---------------------------------------------------
                                        (0077)    ; Insert a lcall to a C function below this banner
                                        (0078)    ; and un-comment the lines between these banners
                                        (0079)    ;---------------------------------------------------
                                        (0080)    
                                        (0081)    ;PRESERVE_CPU_CONTEXT
                                        (0082)    ;lcall _My_C_Function
                                        (0083)    ;RESTORE_CPU_CONTEXT
                                        (0084)    
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ; Insert a lcall to a C function above this banner
                                        (0087)    ; and un-comment the lines between these banners
                                        (0088)    ;---------------------------------------------------
                                        (0089)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0090) 
04E9: 7E       RETI                     (0091)    reti
                                        (0092) 
                                        (0093) 
                                        (0094) ; end of file Timer2INT.asm
FILE: lib\timer2.asm                    (0001) ;;*****************************************************************************
04EA: 43 E1 08 OR    REG[0xE1],0x8      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer2.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer2.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer2_EnableInt
                                        (0030) export _Timer2_EnableInt
                                        (0031) export  Timer2_DisableInt
                                        (0032) export _Timer2_DisableInt
                                        (0033) export  Timer2_Start
                                        (0034) export _Timer2_Start
                                        (0035) export  Timer2_Stop
                                        (0036) export _Timer2_Stop
                                        (0037) export  Timer2_WritePeriod
                                        (0038) export _Timer2_WritePeriod
                                        (0039) export  Timer2_WriteCompareValue
                                        (0040) export _Timer2_WriteCompareValue
                                        (0041) export  Timer2_wReadCompareValue
                                        (0042) export _Timer2_wReadCompareValue
                                        (0043) export  Timer2_wReadTimer
                                        (0044) export _Timer2_wReadTimer
                                        (0045) export  Timer2_wReadTimerSaveCV
                                        (0046) export _Timer2_wReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  wTimer2_ReadCompareValue  ; deprecated
                                        (0051) export _wTimer2_ReadCompareValue  ; deprecated
                                        (0052) export  wTimer2_ReadTimer         ; deprecated
                                        (0053) export _wTimer2_ReadTimer         ; deprecated
                                        (0054) export  wTimer2_ReadTimerSaveCV   ; deprecated
                                        (0055) export _wTimer2_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  wTimer2_ReadCounter       ; obsolete
                                        (0058) export _wTimer2_ReadCounter       ; obsolete
                                        (0059) export  wTimer2_CaptureCounter    ; obsolete
                                        (0060) export _wTimer2_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA psoc_robot_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer2_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer2_EnableInt:
                                        (0098) _Timer2_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer2_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
04ED: 7F       RET                      (0102)    ret
04EE: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer2_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer2_DisableInt:
                                        (0126) _Timer2_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer2_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
04F1: 7F       RET                      (0130)    ret
04F2: 43 2B 01 OR    REG[0x2B],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer2_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer2_Start:
                                        (0154) _Timer2_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer2_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
04F5: 7F       RET                      (0158)    ret
04F6: 41 2B FE AND   REG[0x2B],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer2_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register of the LSB block.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer2_Stop:
                                        (0182) _Timer2_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer2_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
04F9: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer2_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 16-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS:
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer2_WritePeriod:
                                        (0211) _Timer2_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
04FA: 60 29    MOV   REG[0x29],A        (0213)    mov   reg[Timer2_PERIOD_LSB_REG], A
04FC: 5B       MOV   A,X                (0214)    mov   A, X
04FD: 60 2D    MOV   REG[0x2D],A        (0215)    mov   reg[Timer2_PERIOD_MSB_REG], A
                                        (0216)    RAM_EPILOGUE RAM_USE_CLASS_1
04FF: 7F       RET                      (0217)    ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) 
                                        (0222) .SECTION
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;  FUNCTION NAME: Timer2_WriteCompareValue
                                        (0225) ;
                                        (0226) ;  DESCRIPTION:
                                        (0227) ;     Writes compare value into the Compare register (DR2).
                                        (0228) ;
                                        (0229) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0230) ;           Compare register. (Call Timer2_Stop to disable).
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;
                                        (0233) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0234) ;  RETURNS:      Nothing
                                        (0235) ;  SIDE EFFECTS: 
                                        (0236) ;    The A and X registers may be modified by this or future implementations
                                        (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0239) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0240) ;    functions.
                                        (0241) ;
                                        (0242)  Timer2_WriteCompareValue:
                                        (0243) _Timer2_WriteCompareValue:
                                        (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
0500: 60 2A    MOV   REG[0x2A],A        (0245)    mov   reg[Timer2_COMPARE_LSB_REG], A
0502: 5B       MOV   A,X                (0246)    mov   A, X
0503: 60 2E    MOV   REG[0x2E],A        (0247)    mov   reg[Timer2_COMPARE_MSB_REG], A
                                        (0248)    RAM_EPILOGUE RAM_USE_CLASS_1
0505: 7F       RET                      (0249)    ret
                                        (0250) 
                                        (0251) .ENDSECTION
                                        (0252) 
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: Timer2_wReadCompareValue
                                        (0257) ;
                                        (0258) ;  DESCRIPTION:
                                        (0259) ;     Reads the Compare registers.
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;
                                        (0262) ;  ARGUMENTS:    None
                                        (0263) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0264) ;  SIDE EFFECTS: 
                                        (0265) ;    The A and X registers may be modified by this or future implementations
                                        (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0269) ;    functions.
                                        (0270) ;
                                        (0271)  Timer2_wReadCompareValue:
                                        (0272) _Timer2_wReadCompareValue:
                                        (0273)  wTimer2_ReadCompareValue:                       ; this name deprecated
                                        (0274) _wTimer2_ReadCompareValue:                       ; this name deprecated
                                        (0275)    RAM_PROLOGUE RAM_USE_CLASS_1
0506: 5D 2E    MOV   A,REG[0x2E]        (0276)    mov   A, reg[Timer2_COMPARE_MSB_REG]
0508: 5C       MOV   X,A                (0277)    mov   X, A
0509: 5D 2A    MOV   A,REG[0x2A]        (0278)    mov   A, reg[Timer2_COMPARE_LSB_REG]
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_1
050B: 7F       RET                      (0280)    ret
                                        (0281) 
                                        (0282) .ENDSECTION
                                        (0283) 
                                        (0284) 
                                        (0285) .SECTION
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: Timer2_wReadTimerSaveCV
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:
                                        (0290) ;     Returns the value in the Count register (DR0), preserving the
                                        (0291) ;     value in the compare register (DR2).
                                        (0292) ;-----------------------------------------------------------------------------
                                        (0293) ;
                                        (0294) ;  ARGUMENTS: None
                                        (0295) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0296) ;  SIDE EFFECTS:
                                        (0297) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0298) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0299) ;     3) The user module is stopped momentarily while the compare value is
                                        (0300) ;        restored.  This may cause the Count register to miss one or more
                                        (0301) ;        counts depending on the input clock speed.
                                        (0302) ;     4) The A and X registers may be modified by this or future implementations
                                        (0303) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0304) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0305) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0306) ;        functions.
                                        (0307) ;
                                        (0308) ;  THEORY of OPERATION:
                                        (0309) ;     1) Read and save the Compare register.
                                        (0310) ;     2) Read the Count register, causing its data to be latched into
                                        (0311) ;        the Compare register.
                                        (0312) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0313) ;        to the buffer.
                                        (0314) ;     4) Disable global interrupts
                                        (0315) ;     5) Halt the timer
                                        (0316) ;     6) Restore the Compare register values
                                        (0317) ;     7) Start the Timer again
                                        (0318) ;     8) Restore global interrupt state
                                        (0319) ;
                                        (0320)  Timer2_wReadTimerSaveCV:
                                        (0321) _Timer2_wReadTimerSaveCV:
                                        (0322)  wTimer2_ReadTimerSaveCV:                        ; this name deprecated
                                        (0323) _wTimer2_ReadTimerSaveCV:                        ; this name deprecated
                                        (0324)  wTimer2_ReadCounter:                            ; this name deprecated
                                        (0325) _wTimer2_ReadCounter:                            ; this name deprecated
                                        (0326) 
                                        (0327) CpuFlags:      equ   0
                                        (0328) wCount_MSB:    equ   1
                                        (0329) wCount_LSB:    equ   2
                                        (0330) 
                                        (0331)    RAM_PROLOGUE RAM_USE_CLASS_2
050C: 4F       MOV   X,SP               (0332)    mov   X, SP                                   ; X <- stack frame pointer
050D: 38 03    ADD   SP,0x3             (0333)    add   SP, 3                                   ; Reserve space for flags, count
050F: 5D 2B    MOV   A,REG[0x2B]        (0334)    mov   A, reg[Timer2_CONTROL_LSB_REG]          ; save the Control register
0511: 08       PUSH  A                  (0335)    push  A
0512: 5D 2A    MOV   A,REG[0x2A]        (0336)    mov   A, reg[Timer2_COMPARE_LSB_REG]          ; save the Compare register
0514: 08       PUSH  A                  (0337)    push  A
0515: 5D 2E    MOV   A,REG[0x2E]        (0338)    mov   A, reg[Timer2_COMPARE_MSB_REG]
0517: 08       PUSH  A                  (0339)    push  A
0518: 5D 28    MOV   A,REG[0x28]        (0340)    mov   A, reg[Timer2_COUNTER_LSB_REG]          ; synchronous copy DR2 <- DR0
                                        (0341)                                                  ; This may cause an interrupt!
051A: 5D 2E    MOV   A,REG[0x2E]        (0342)    mov   A, reg[Timer2_COMPARE_MSB_REG]          ; Now grab DR2 (DR0) and save
051C: 54 01    MOV   [X+1],A            (0343)    mov   [X+wCount_MSB], A
051E: 5D 2A    MOV   A,REG[0x2A]        (0344)    mov   A, reg[Timer2_COMPARE_LSB_REG]
0520: 54 02    MOV   [X+2],A            (0345)    mov   [X+wCount_LSB], A
0522: 50 00    MOV   A,0x0              (0346)    mov   A, 0                                    ; Guess the global interrupt state
0524: 49 F7 01 TST   REG[0xF7],0x1      (0347)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
0527: A0 03    JZ    0x052B             (0348)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
0529: 50 01    MOV   A,0x1              (0349)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0350) .SetupStatusFlag:                                ; and ...
052B: 54 00    MOV   [X+0],A            (0351)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
052D: 70 FE    AND   F,0xFE             
052F: 41 2B FE AND   REG[0x2B],0xFE     
                                        (0352)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0353)    Timer2_Stop_M                                 ; Disable (stop) the timer
0532: 18       POP   A                  (0354)    pop   A                                       ; Restore the Compare register
0533: 60 2E    MOV   REG[0x2E],A        (0355)    mov   reg[Timer2_COMPARE_MSB_REG], A
0535: 18       POP   A                  (0356)    pop   A
0536: 60 2A    MOV   REG[0x2A],A        (0357)    mov   reg[Timer2_COMPARE_LSB_REG], A
0538: 18       POP   A                  (0358)    pop   A                                       ; restore start state of the timer
0539: 60 2B    MOV   REG[0x2B],A        (0359)    mov   reg[Timer2_CONTROL_LSB_REG], A
053B: 18       POP   A                  (0360)    pop   A                                       ; Return result stored in stack frame
053C: 20       POP   X                  (0361)    pop   X
053D: 70 3F    AND   F,0x3F             
053F: 71 C0    OR    F,0xC0             
                                        (0362)    RAM_EPILOGUE RAM_USE_CLASS_2
0541: 7E       RETI                     (0363)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0364) 
                                        (0365) .ENDSECTION
                                        (0366) 
                                        (0367) 
                                        (0368) .SECTION
                                        (0369) ;-----------------------------------------------------------------------------
                                        (0370) ;  FUNCTION NAME: Timer2_wReadTimer
                                        (0371) ;
                                        (0372) ;  DESCRIPTION:
                                        (0373) ;     Performs a software capture of the Count register.  A synchronous
                                        (0374) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0375) ;
                                        (0376) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0377) ;-----------------------------------------------------------------------------
                                        (0378) ;
                                        (0379) ;  ARGUMENTS:    None
                                        (0380) ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
                                        (0381) ;  SIDE EFFECTS:
                                        (0382) ;    May cause an interrupt.
                                        (0383) ;
                                        (0384) ;    The A and X registers may be modified by this or future implementations
                                        (0385) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0386) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390) ;  THEORY of OPERATION:
                                        (0391) ;     1) Read the Count register - this causes the count value to be
                                        (0392) ;        latched into the Compare registers.
                                        (0393) ;     2) Read and return the Count register values from the Compare
                                        (0394) ;        registers into the return buffer.
                                        (0395) ;
                                        (0396)  Timer2_wReadTimer:
                                        (0397) _Timer2_wReadTimer:
                                        (0398)  wTimer2_ReadTimer:                              ; this name deprecated
                                        (0399) _wTimer2_ReadTimer:                              ; this name deprecated
                                        (0400)  wTimer2_CaptureCounter:                         ; this name deprecated
                                        (0401) _wTimer2_CaptureCounter:                         ; this name deprecated
                                        (0402) 
                                        (0403)    RAM_PROLOGUE RAM_USE_CLASS_1
0542: 5D 28    MOV   A,REG[0x28]        (0404)    mov   A, reg[Timer2_COUNTER_LSB_REG]          ; synchronous copy DR2 <- DR0
                                        (0405)                                                  ; This may cause an interrupt!
                                        (0406) 
0544: 5D 2E    MOV   A,REG[0x2E]        (0407)    mov   A, reg[Timer2_COMPARE_MSB_REG]          ; Return DR2 (actually DR0)
0546: 5C       MOV   X,A                (0408)    mov   X, A
0547: 5D 2A    MOV   A,REG[0x2A]        (0409)    mov   A, reg[Timer2_COMPARE_LSB_REG]
                                        (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
0549: 7F       RET                      (0411)    ret
                                        (0412) 
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) ; End of File Timer2.asm
FILE: lib\timer1int.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer1INT.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Timer1.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Timer1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Timer1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Timer1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
054A: 7D 11 24 LJMP  _Timer1CaptureISR  (0070)    ljmp _Timer1CaptureISR
                                        (0071) 	
                                        (0072)    ;---------------------------------------------------
                                        (0073)    ; Insert your custom assembly code above this banner
                                        (0074)    ;---------------------------------------------------
                                        (0075)    
                                        (0076)    ;---------------------------------------------------
                                        (0077)    ; Insert a lcall to a C function below this banner
                                        (0078)    ; and un-comment the lines between these banners
                                        (0079)    ;---------------------------------------------------
                                        (0080)    
                                        (0081)    ;PRESERVE_CPU_CONTEXT
                                        (0082)    ;lcall _My_C_Function
                                        (0083)    ;RESTORE_CPU_CONTEXT
                                        (0084)    
                                        (0085)    ;---------------------------------------------------
                                        (0086)    ; Insert a lcall to a C function above this banner
                                        (0087)    ; and un-comment the lines between these banners
                                        (0088)    ;---------------------------------------------------
                                        (0089)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0090) 
054D: 7E       RETI                     (0091)    reti
                                        (0092) 
                                        (0093) 
                                        (0094) ; end of file Timer1INT.asm
FILE: lib\timer1.asm                    (0001) ;;*****************************************************************************
054E: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer1.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer1.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer1_EnableInt
                                        (0030) export _Timer1_EnableInt
                                        (0031) export  Timer1_DisableInt
                                        (0032) export _Timer1_DisableInt
                                        (0033) export  Timer1_Start
                                        (0034) export _Timer1_Start
                                        (0035) export  Timer1_Stop
                                        (0036) export _Timer1_Stop
                                        (0037) export  Timer1_WritePeriod
                                        (0038) export _Timer1_WritePeriod
                                        (0039) export  Timer1_WriteCompareValue
                                        (0040) export _Timer1_WriteCompareValue
                                        (0041) export  Timer1_wReadCompareValue
                                        (0042) export _Timer1_wReadCompareValue
                                        (0043) export  Timer1_wReadTimer
                                        (0044) export _Timer1_wReadTimer
                                        (0045) export  Timer1_wReadTimerSaveCV
                                        (0046) export _Timer1_wReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  wTimer1_ReadCompareValue  ; deprecated
                                        (0051) export _wTimer1_ReadCompareValue  ; deprecated
                                        (0052) export  wTimer1_ReadTimer         ; deprecated
                                        (0053) export _wTimer1_ReadTimer         ; deprecated
                                        (0054) export  wTimer1_ReadTimerSaveCV   ; deprecated
                                        (0055) export _wTimer1_ReadTimerSaveCV   ; deprecated
                                        (0056) 
                                        (0057) export  wTimer1_ReadCounter       ; obsolete
                                        (0058) export _wTimer1_ReadCounter       ; obsolete
                                        (0059) export  wTimer1_CaptureCounter    ; obsolete
                                        (0060) export _wTimer1_CaptureCounter    ; obsolete
                                        (0061) 
                                        (0062) 
                                        (0063) AREA psoc_robot_RAM (RAM,REL)
                                        (0064) 
                                        (0065) ;-----------------------------------------------
                                        (0066) ;  Constant Definitions
                                        (0067) ;-----------------------------------------------
                                        (0068) 
                                        (0069) 
                                        (0070) ;-----------------------------------------------
                                        (0071) ; Variable Allocation
                                        (0072) ;-----------------------------------------------
                                        (0073) 
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) 
                                        (0077) .SECTION
                                        (0078) ;-----------------------------------------------------------------------------
                                        (0079) ;  FUNCTION NAME: Timer1_EnableInt
                                        (0080) ;
                                        (0081) ;  DESCRIPTION:
                                        (0082) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0083) ;     associated with this User Module. This function has no effect until and
                                        (0084) ;     unless the global interrupts are enabled (for example by using the
                                        (0085) ;     macro M8C_EnableGInt).
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;
                                        (0088) ;  ARGUMENTS:    None.
                                        (0089) ;  RETURNS:      Nothing.
                                        (0090) ;  SIDE EFFECTS: 
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097)  Timer1_EnableInt:
                                        (0098) _Timer1_EnableInt:
                                        (0099)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0100)    Timer1_EnableInt_M
                                        (0101)    RAM_EPILOGUE RAM_USE_CLASS_1
0551: 7F       RET                      (0102)    ret
0552: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0103) 
                                        (0104) .ENDSECTION
                                        (0105) 
                                        (0106) 
                                        (0107) .SECTION
                                        (0108) ;-----------------------------------------------------------------------------
                                        (0109) ;  FUNCTION NAME: Timer1_DisableInt
                                        (0110) ;
                                        (0111) ;  DESCRIPTION:
                                        (0112) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0113) ;     mask bit associated with this User Module.
                                        (0114) ;-----------------------------------------------------------------------------
                                        (0115) ;
                                        (0116) ;  ARGUMENTS:    None
                                        (0117) ;  RETURNS:      Nothing
                                        (0118) ;  SIDE EFFECTS: 
                                        (0119) ;    The A and X registers may be modified by this or future implementations
                                        (0120) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0121) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0122) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0123) ;    functions.
                                        (0124) ;
                                        (0125)  Timer1_DisableInt:
                                        (0126) _Timer1_DisableInt:
                                        (0127)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0128)    Timer1_DisableInt_M
                                        (0129)    RAM_EPILOGUE RAM_USE_CLASS_1
0555: 7F       RET                      (0130)    ret
0556: 43 23 01 OR    REG[0x23],0x1      
                                        (0131) 
                                        (0132) .ENDSECTION
                                        (0133) 
                                        (0134) 
                                        (0135) .SECTION
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;  FUNCTION NAME: Timer1_Start
                                        (0138) ;
                                        (0139) ;  DESCRIPTION:
                                        (0140) ;     Sets the start bit in the Control register of this user module.  The
                                        (0141) ;     timer will begin counting on the next input clock.
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;
                                        (0144) ;  ARGUMENTS:    None
                                        (0145) ;  RETURNS:      Nothing
                                        (0146) ;  SIDE EFFECTS: 
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  Timer1_Start:
                                        (0154) _Timer1_Start:
                                        (0155)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0156)    Timer1_Start_M
                                        (0157)    RAM_EPILOGUE RAM_USE_CLASS_1
0559: 7F       RET                      (0158)    ret
055A: 41 23 FE AND   REG[0x23],0xFE     
                                        (0159) 
                                        (0160) .ENDSECTION
                                        (0161) 
                                        (0162) 
                                        (0163) .SECTION
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;  FUNCTION NAME: Timer1_Stop
                                        (0166) ;
                                        (0167) ;  DESCRIPTION:
                                        (0168) ;     Disables timer operation by clearing the start bit in the Control
                                        (0169) ;     register of the LSB block.
                                        (0170) ;-----------------------------------------------------------------------------
                                        (0171) ;
                                        (0172) ;  ARGUMENTS:    None
                                        (0173) ;  RETURNS:      Nothing
                                        (0174) ;  SIDE EFFECTS: 
                                        (0175) ;    The A and X registers may be modified by this or future implementations
                                        (0176) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0177) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0178) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0179) ;    functions.
                                        (0180) ;
                                        (0181)  Timer1_Stop:
                                        (0182) _Timer1_Stop:
                                        (0183)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0184)    Timer1_Stop_M
                                        (0185)    RAM_EPILOGUE RAM_USE_CLASS_1
055D: 7F       RET                      (0186)    ret
                                        (0187) 
                                        (0188) .ENDSECTION
                                        (0189) 
                                        (0190) 
                                        (0191) .SECTION
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;  FUNCTION NAME: Timer1_WritePeriod
                                        (0194) ;
                                        (0195) ;  DESCRIPTION:
                                        (0196) ;     Write the 16-bit period value into the Period register (DR1). If the
                                        (0197) ;     Timer user module is stopped, then this value will also be latched
                                        (0198) ;     into the Count register (DR0).
                                        (0199) ;-----------------------------------------------------------------------------
                                        (0200) ;
                                        (0201) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0202) ;  RETURNS:   Nothing
                                        (0203) ;  SIDE EFFECTS:
                                        (0204) ;    The A and X registers may be modified by this or future implementations
                                        (0205) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0206) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0207) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0208) ;    functions.
                                        (0209) ;
                                        (0210)  Timer1_WritePeriod:
                                        (0211) _Timer1_WritePeriod:
                                        (0212)    RAM_PROLOGUE RAM_USE_CLASS_1
055E: 60 21    MOV   REG[0x21],A        (0213)    mov   reg[Timer1_PERIOD_LSB_REG], A
0560: 5B       MOV   A,X                (0214)    mov   A, X
0561: 60 25    MOV   REG[0x25],A        (0215)    mov   reg[Timer1_PERIOD_MSB_REG], A
                                        (0216)    RAM_EPILOGUE RAM_USE_CLASS_1
0563: 7F       RET                      (0217)    ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) 
                                        (0222) .SECTION
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;  FUNCTION NAME: Timer1_WriteCompareValue
                                        (0225) ;
                                        (0226) ;  DESCRIPTION:
                                        (0227) ;     Writes compare value into the Compare register (DR2).
                                        (0228) ;
                                        (0229) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0230) ;           Compare register. (Call Timer1_Stop to disable).
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;
                                        (0233) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0234) ;  RETURNS:      Nothing
                                        (0235) ;  SIDE EFFECTS: 
                                        (0236) ;    The A and X registers may be modified by this or future implementations
                                        (0237) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0238) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0239) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0240) ;    functions.
                                        (0241) ;
                                        (0242)  Timer1_WriteCompareValue:
                                        (0243) _Timer1_WriteCompareValue:
                                        (0244)    RAM_PROLOGUE RAM_USE_CLASS_1
0564: 60 22    MOV   REG[0x22],A        (0245)    mov   reg[Timer1_COMPARE_LSB_REG], A
0566: 5B       MOV   A,X                (0246)    mov   A, X
0567: 60 26    MOV   REG[0x26],A        (0247)    mov   reg[Timer1_COMPARE_MSB_REG], A
                                        (0248)    RAM_EPILOGUE RAM_USE_CLASS_1
0569: 7F       RET                      (0249)    ret
                                        (0250) 
                                        (0251) .ENDSECTION
                                        (0252) 
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: Timer1_wReadCompareValue
                                        (0257) ;
                                        (0258) ;  DESCRIPTION:
                                        (0259) ;     Reads the Compare registers.
                                        (0260) ;-----------------------------------------------------------------------------
                                        (0261) ;
                                        (0262) ;  ARGUMENTS:    None
                                        (0263) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0264) ;  SIDE EFFECTS: 
                                        (0265) ;    The A and X registers may be modified by this or future implementations
                                        (0266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0269) ;    functions.
                                        (0270) ;
                                        (0271)  Timer1_wReadCompareValue:
                                        (0272) _Timer1_wReadCompareValue:
                                        (0273)  wTimer1_ReadCompareValue:                       ; this name deprecated
                                        (0274) _wTimer1_ReadCompareValue:                       ; this name deprecated
                                        (0275)    RAM_PROLOGUE RAM_USE_CLASS_1
056A: 5D 26    MOV   A,REG[0x26]        (0276)    mov   A, reg[Timer1_COMPARE_MSB_REG]
056C: 5C       MOV   X,A                (0277)    mov   X, A
056D: 5D 22    MOV   A,REG[0x22]        (0278)    mov   A, reg[Timer1_COMPARE_LSB_REG]
                                        (0279)    RAM_EPILOGUE RAM_USE_CLASS_1
056F: 7F       RET                      (0280)    ret
                                        (0281) 
                                        (0282) .ENDSECTION
                                        (0283) 
                                        (0284) 
                                        (0285) .SECTION
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;  FUNCTION NAME: Timer1_wReadTimerSaveCV
                                        (0288) ;
                                        (0289) ;  DESCRIPTION:
                                        (0290) ;     Returns the value in the Count register (DR0), preserving the
                                        (0291) ;     value in the compare register (DR2).
                                        (0292) ;-----------------------------------------------------------------------------
                                        (0293) ;
                                        (0294) ;  ARGUMENTS: None
                                        (0295) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0296) ;  SIDE EFFECTS:
                                        (0297) ;     1) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0298) ;     2) If enabled, Global interrupts are momentarily disabled.
                                        (0299) ;     3) The user module is stopped momentarily while the compare value is
                                        (0300) ;        restored.  This may cause the Count register to miss one or more
                                        (0301) ;        counts depending on the input clock speed.
                                        (0302) ;     4) The A and X registers may be modified by this or future implementations
                                        (0303) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0304) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0305) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0306) ;        functions.
                                        (0307) ;
                                        (0308) ;  THEORY of OPERATION:
                                        (0309) ;     1) Read and save the Compare register.
                                        (0310) ;     2) Read the Count register, causing its data to be latched into
                                        (0311) ;        the Compare register.
                                        (0312) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0313) ;        to the buffer.
                                        (0314) ;     4) Disable global interrupts
                                        (0315) ;     5) Halt the timer
                                        (0316) ;     6) Restore the Compare register values
                                        (0317) ;     7) Start the Timer again
                                        (0318) ;     8) Restore global interrupt state
                                        (0319) ;
                                        (0320)  Timer1_wReadTimerSaveCV:
                                        (0321) _Timer1_wReadTimerSaveCV:
                                        (0322)  wTimer1_ReadTimerSaveCV:                        ; this name deprecated
                                        (0323) _wTimer1_ReadTimerSaveCV:                        ; this name deprecated
                                        (0324)  wTimer1_ReadCounter:                            ; this name deprecated
                                        (0325) _wTimer1_ReadCounter:                            ; this name deprecated
                                        (0326) 
                                        (0327) CpuFlags:      equ   0
                                        (0328) wCount_MSB:    equ   1
                                        (0329) wCount_LSB:    equ   2
                                        (0330) 
                                        (0331)    RAM_PROLOGUE RAM_USE_CLASS_2
0570: 4F       MOV   X,SP               (0332)    mov   X, SP                                   ; X <- stack frame pointer
0571: 38 03    ADD   SP,0x3             (0333)    add   SP, 3                                   ; Reserve space for flags, count
0573: 5D 23    MOV   A,REG[0x23]        (0334)    mov   A, reg[Timer1_CONTROL_LSB_REG]          ; save the Control register
0575: 08       PUSH  A                  (0335)    push  A
0576: 5D 22    MOV   A,REG[0x22]        (0336)    mov   A, reg[Timer1_COMPARE_LSB_REG]          ; save the Compare register
0578: 08       PUSH  A                  (0337)    push  A
0579: 5D 26    MOV   A,REG[0x26]        (0338)    mov   A, reg[Timer1_COMPARE_MSB_REG]
057B: 08       PUSH  A                  (0339)    push  A
057C: 5D 20    MOV   A,REG[0x20]        (0340)    mov   A, reg[Timer1_COUNTER_LSB_REG]          ; synchronous copy DR2 <- DR0
                                        (0341)                                                  ; This may cause an interrupt!
057E: 5D 26    MOV   A,REG[0x26]        (0342)    mov   A, reg[Timer1_COMPARE_MSB_REG]          ; Now grab DR2 (DR0) and save
0580: 54 01    MOV   [X+1],A            (0343)    mov   [X+wCount_MSB], A
0582: 5D 22    MOV   A,REG[0x22]        (0344)    mov   A, reg[Timer1_COMPARE_LSB_REG]
0584: 54 02    MOV   [X+2],A            (0345)    mov   [X+wCount_LSB], A
0586: 50 00    MOV   A,0x0              (0346)    mov   A, 0                                    ; Guess the global interrupt state
0588: 49 F7 01 TST   REG[0xF7],0x1      (0347)    tst   reg[CPU_F], FLAG_GLOBAL_IE              ; Currently Disabled?
058B: A0 03    JZ    0x058F             (0348)    jz    .SetupStatusFlag                        ;   Yes, guess was correct
058D: 50 01    MOV   A,0x1              (0349)    mov   A, FLAG_GLOBAL_IE                       ;    No, modify our guess
                                        (0350) .SetupStatusFlag:                                ; and ...
058F: 54 00    MOV   [X+0],A            (0351)    mov   [X+CpuFlags], A                         ;   StackFrame[0] <- Flag Reg image
0591: 70 FE    AND   F,0xFE             
0593: 41 23 FE AND   REG[0x23],0xFE     
                                        (0352)    M8C_DisableGInt                               ; Disable interrupts globally
                                        (0353)    Timer1_Stop_M                                 ; Disable (stop) the timer
0596: 18       POP   A                  (0354)    pop   A                                       ; Restore the Compare register
0597: 60 26    MOV   REG[0x26],A        (0355)    mov   reg[Timer1_COMPARE_MSB_REG], A
0599: 18       POP   A                  (0356)    pop   A
059A: 60 22    MOV   REG[0x22],A        (0357)    mov   reg[Timer1_COMPARE_LSB_REG], A
059C: 18       POP   A                  (0358)    pop   A                                       ; restore start state of the timer
059D: 60 23    MOV   REG[0x23],A        (0359)    mov   reg[Timer1_CONTROL_LSB_REG], A
059F: 18       POP   A                  (0360)    pop   A                                       ; Return result stored in stack frame
05A0: 20       POP   X                  (0361)    pop   X
05A1: 70 3F    AND   F,0x3F             
05A3: 71 C0    OR    F,0xC0             
                                        (0362)    RAM_EPILOGUE RAM_USE_CLASS_2
05A5: 7E       RETI                     (0363)    reti                                          ; Flag Reg <- StackFrame[0]
                                        (0364) 
                                        (0365) .ENDSECTION
                                        (0366) 
                                        (0367) 
                                        (0368) .SECTION
                                        (0369) ;-----------------------------------------------------------------------------
                                        (0370) ;  FUNCTION NAME: Timer1_wReadTimer
                                        (0371) ;
                                        (0372) ;  DESCRIPTION:
                                        (0373) ;     Performs a software capture of the Count register.  A synchronous
                                        (0374) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0375) ;
                                        (0376) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0377) ;-----------------------------------------------------------------------------
                                        (0378) ;
                                        (0379) ;  ARGUMENTS:    None
                                        (0380) ;  RETURNS:      fastcall16 WORD wCount, (value of DR0 in the X & A registers)
                                        (0381) ;  SIDE EFFECTS:
                                        (0382) ;    May cause an interrupt.
                                        (0383) ;
                                        (0384) ;    The A and X registers may be modified by this or future implementations
                                        (0385) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0386) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0387) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0388) ;    functions.
                                        (0389) ;
                                        (0390) ;  THEORY of OPERATION:
                                        (0391) ;     1) Read the Count register - this causes the count value to be
                                        (0392) ;        latched into the Compare registers.
                                        (0393) ;     2) Read and return the Count register values from the Compare
                                        (0394) ;        registers into the return buffer.
                                        (0395) ;
                                        (0396)  Timer1_wReadTimer:
                                        (0397) _Timer1_wReadTimer:
                                        (0398)  wTimer1_ReadTimer:                              ; this name deprecated
                                        (0399) _wTimer1_ReadTimer:                              ; this name deprecated
                                        (0400)  wTimer1_CaptureCounter:                         ; this name deprecated
                                        (0401) _wTimer1_CaptureCounter:                         ; this name deprecated
                                        (0402) 
                                        (0403)    RAM_PROLOGUE RAM_USE_CLASS_1
05A6: 5D 20    MOV   A,REG[0x20]        (0404)    mov   A, reg[Timer1_COUNTER_LSB_REG]          ; synchronous copy DR2 <- DR0
                                        (0405)                                                  ; This may cause an interrupt!
                                        (0406) 
05A8: 5D 26    MOV   A,REG[0x26]        (0407)    mov   A, reg[Timer1_COMPARE_MSB_REG]          ; Return DR2 (actually DR0)
05AA: 5C       MOV   X,A                (0408)    mov   X, A
05AB: 5D 22    MOV   A,REG[0x22]        (0409)    mov   A, reg[Timer1_COMPARE_LSB_REG]
                                        (0410)    RAM_EPILOGUE RAM_USE_CLASS_1
05AD: 7F       RET                      (0411)    ret
                                        (0412) 
                                        (0413) .ENDSECTION
                                        (0414) 
                                        (0415) ; End of File Timer1.asm
FILE: lib\pwm2int.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM2INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:26:51
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM2.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM2_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM2_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM2_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
05AE: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM2INT.asm
FILE: lib\pwm2.asm                      (0001) ;;*****************************************************************************
05AF: 43 DF 08 OR    REG[0xDF],0x8      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM2.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:26:51
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM2.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM2_EnableInt
                                        (0030) export _PWM2_EnableInt
                                        (0031) export  PWM2_DisableInt
                                        (0032) export _PWM2_DisableInt
                                        (0033) export  PWM2_Start
                                        (0034) export _PWM2_Start
                                        (0035) export  PWM2_Stop
                                        (0036) export _PWM2_Stop
                                        (0037) export  PWM2_WritePeriod
                                        (0038) export _PWM2_WritePeriod
                                        (0039) export  PWM2_WritePulseWidth
                                        (0040) export _PWM2_WritePulseWidth
                                        (0041) export  PWM2_wReadPulseWidth
                                        (0042) export _PWM2_wReadPulseWidth
                                        (0043) export  PWM2_wReadCounter
                                        (0044) export _PWM2_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wPWM2_ReadPulseWidth    ; deprecated
                                        (0049) export _wPWM2_ReadPulseWidth    ; deprecated
                                        (0050) export  wPWM2_ReadCounter       ; deprecated
                                        (0051) export _wPWM2_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA psoc_robot_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM2_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM2_EnableInt:
                                        (0091) _PWM2_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM2_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
05B2: 7F       RET                      (0095)    ret
05B3: 41 DF F7 AND   REG[0xDF],0xF7     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM2_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM2_DisableInt:
                                        (0119) _PWM2_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM2_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
05B6: 7F       RET                      (0123)    ret
05B7: 43 4B 01 OR    REG[0x4B],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM2_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM2_Start:
                                        (0148) _PWM2_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM2_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
05BA: 7F       RET                      (0152)    ret
05BB: 41 4B FE AND   REG[0x4B],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM2_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register of the LSB block.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM2_Stop:
                                        (0176) _PWM2_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM2_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
05BE: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM2_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count registers (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM2_WritePeriod:
                                        (0206) _PWM2_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
05BF: 60 49    MOV   REG[0x49],A        (0208)    mov   reg[PWM2_PERIOD_LSB_REG], A
05C1: 5B       MOV   A,X                (0209)    mov   A, X
05C2: 60 4D    MOV   REG[0x4D],A        (0210)    mov   reg[PWM2_PERIOD_MSB_REG], A
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
05C4: 7F       RET                      (0212)    ret
                                        (0213) 
                                        (0214) 
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) .SECTION
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  FUNCTION NAME: PWM2_WritePulseWidth
                                        (0220) ;
                                        (0221) ;  DESCRIPTION:
                                        (0222) ;     Writes the pulse width value into the Compare register (DR2).
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0226) ;  RETURNS:      Nothing
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  PWM2_WritePulseWidth:
                                        (0235) _PWM2_WritePulseWidth:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
05C5: 60 4A    MOV   REG[0x4A],A        (0237)    mov   reg[PWM2_COMPARE_LSB_REG], A
05C7: 5B       MOV   A,X                (0238)    mov   A, X
05C8: 60 4E    MOV   REG[0x4E],A        (0239)    mov   reg[PWM2_COMPARE_MSB_REG], A
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
05CA: 7F       RET                      (0241)    ret
                                        (0242) 
                                        (0243) 
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: PWM2_wReadPulseWidth
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Reads the Compare register.
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS:    None
                                        (0255) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0256) ;  SIDE EFFECTS:
                                        (0257) ;    The A and X registers may be modified by this or future implementations
                                        (0258) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0259) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;
                                        (0263)  PWM2_wReadPulseWidth:
                                        (0264) _PWM2_wReadPulseWidth:
                                        (0265)  wPWM2_ReadPulseWidth:                           ; this name deprecated
                                        (0266) _wPWM2_ReadPulseWidth:                           ; this name deprecated
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
05CB: 5D 4E    MOV   A,REG[0x4E]        (0268)    mov   A, reg[PWM2_COMPARE_MSB_REG]
05CD: 5C       MOV   X,A                (0269)    mov   X, A
05CE: 5D 4A    MOV   A,REG[0x4A]        (0270)    mov   A, reg[PWM2_COMPARE_LSB_REG]
                                        (0271)    RAM_EPILOGUE RAM_USE_CLASS_1
05D0: 7F       RET                      (0272)    ret
                                        (0273) 
                                        (0274) 
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: PWM2_wReadCounter
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:
                                        (0282) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0283) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0284) ;     from the Count to the Compare register by holding the clock low in
                                        (0285) ;     the MSB PSoC block.
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0292) ;     2) The A and X registers may be modified by this or future implementations
                                        (0293) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0294) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0295) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0296) ;        functions.
                                        (0297) ;
                                        (0298)  PWM2_wReadCounter:
                                        (0299) _PWM2_wReadCounter:
                                        (0300)  wPWM2_ReadCounter:                              ; this name deprecated
                                        (0301) _wPWM2_ReadCounter:                              ; this name deprecated
                                        (0302) 
                                        (0303)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0304)    bOrigClockSetting:      EQU   2                  ; Frame offset to temp Input   store
                                        (0305)    wCounter:               EQU   3                  ; Frame offset to temp Count   store
                                        (0306)    STACK_FRAME_SIZE:       EQU   5                  ; max stack frame size is 5 bytes
                                        (0307) 
                                        (0308)    RAM_PROLOGUE RAM_USE_CLASS_2
05D1: 4F       MOV   X,SP               (0309)    mov   X, SP                                      ; X <-  stack frame pointer
05D2: 5D 4E    MOV   A,REG[0x4E]        (0310)    mov   A, reg[PWM2_COMPARE_MSB_REG]            ; Save the Compare register on the stack
05D4: 08       PUSH  A                  (0311)    push  A                                          ;
05D5: 5D 4A    MOV   A,REG[0x4A]        (0312)    mov   A, reg[PWM2_COMPARE_LSB_REG]            ;
05D7: 08       PUSH  A                  (0313)    push  A                                          ;  -stack frame now 2 bytes-
05D8: 41 4B FE AND   REG[0x4B],0xFE     
05DB: 71 10    OR    F,0x10             
                                        (0314)    PWM2_Stop_M                                   ; Disable the PWM function
                                        (0315)    M8C_SetBank1                                     ;
05DD: 5D 49    MOV   A,REG[0x49]        (0316)    mov   A, reg[PWM2_INPUT_LSB_REG]              ; save the LSB clock input setting
05DF: 08       PUSH  A                  (0317)    push  A                                          ;   on the stack (now 3 bytes) and ...
                                        (0318)                                                     ;   hold the clock low:
05E0: 62 49 00 MOV   REG[0x49],0x0      (0319)    mov   reg[PWM2_INPUT_LSB_REG], INPUT_REG_NULL
05E3: 70 EF    AND   F,0xEF             
                                        (0320)    M8C_SetBank0                                     ; Extract the Count via DR2 register
05E5: 5D 4C    MOV   A,REG[0x4C]        (0321)    mov   A, reg[PWM2_COUNTER_MSB_REG]            ; DR2 <- DR0 (in the MSB block)
05E7: 5D 4E    MOV   A,REG[0x4E]        (0322)    mov   A, reg[PWM2_COMPARE_MSB_REG]            ; Stash the Count MSB on the stack
05E9: 08       PUSH  A                  (0323)    push  A                                          ;  -stack frame is now 4 bytes
05EA: 5D 48    MOV   A,REG[0x48]        (0324)    mov   A, reg[PWM2_COUNTER_LSB_REG]            ; DR2 <- DR0 (in the LSB block)
05EC: 5D 4A    MOV   A,REG[0x4A]        (0325)    mov   A, reg[PWM2_COMPARE_LSB_REG]            ; Stash the Count LSB on the stack
05EE: 08       PUSH  A                  (0326)    push  A                                          ;   -stack frame is now 5 bytes-
05EF: 52 00    MOV   A,[X+0]            (0327)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
05F1: 60 4E    MOV   REG[0x4E],A        (0328)    mov   reg[PWM2_COMPARE_MSB_REG], A            ;
05F3: 52 01    MOV   A,[X+1]            (0329)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
05F5: 60 4A    MOV   REG[0x4A],A        (0330)    mov   reg[PWM2_COMPARE_LSB_REG], A            ;
05F7: 71 10    OR    F,0x10             
                                        (0331)    M8C_SetBank1                                     ; ---Restore the PWM operation
05F9: 52 02    MOV   A,[X+2]            (0332)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
05FB: 60 49    MOV   REG[0x49],A        (0333)    mov   reg[PWM2_INPUT_LSB_REG], A              ;    and restore it
05FD: 70 EF    AND   F,0xEF             
05FF: 43 4B 01 OR    REG[0x4B],0x1      
                                        (0334)    M8C_SetBank0                                     ;
                                        (0335)    PWM2_Start_M                                  ; Now re-enable the PWM function
0602: 18       POP   A                  (0336)    pop   A                                          ; Setup the return value
0603: 20       POP   X                  (0337)    pop   X                                          ;
0604: 38 FD    ADD   SP,0xFD            (0338)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
0606: 70 3F    AND   F,0x3F             
0608: 71 C0    OR    F,0xC0             
                                        (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
060A: 7F       RET                      (0340)    ret
                                        (0341) 
                                        (0342) .ENDSECTION
                                        (0343) 
                                        (0344) ; End of File PWM2.asm
FILE: lib\pwm1int.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM1INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:26:51
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM1.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
060B: 7D 11 24 LJMP  _Timer1CaptureISR  (0070)    ljmp _Timer1CaptureISR
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
060E: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM1INT.asm
FILE: lib\pwm1.asm                      (0001) ;;*****************************************************************************
060F: 43 DF 02 OR    REG[0xDF],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM1.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:26:51
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM1.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM1_EnableInt
                                        (0030) export _PWM1_EnableInt
                                        (0031) export  PWM1_DisableInt
                                        (0032) export _PWM1_DisableInt
                                        (0033) export  PWM1_Start
                                        (0034) export _PWM1_Start
                                        (0035) export  PWM1_Stop
                                        (0036) export _PWM1_Stop
                                        (0037) export  PWM1_WritePeriod
                                        (0038) export _PWM1_WritePeriod
                                        (0039) export  PWM1_WritePulseWidth
                                        (0040) export _PWM1_WritePulseWidth
                                        (0041) export  PWM1_wReadPulseWidth
                                        (0042) export _PWM1_wReadPulseWidth
                                        (0043) export  PWM1_wReadCounter
                                        (0044) export _PWM1_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wPWM1_ReadPulseWidth    ; deprecated
                                        (0049) export _wPWM1_ReadPulseWidth    ; deprecated
                                        (0050) export  wPWM1_ReadCounter       ; deprecated
                                        (0051) export _wPWM1_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA psoc_robot_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM1_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM1_EnableInt:
                                        (0091) _PWM1_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM1_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0612: 7F       RET                      (0095)    ret
0613: 41 DF FD AND   REG[0xDF],0xFD     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM1_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM1_DisableInt:
                                        (0119) _PWM1_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM1_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0616: 7F       RET                      (0123)    ret
0617: 43 43 01 OR    REG[0x43],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM1_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM1_Start:
                                        (0148) _PWM1_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM1_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
061A: 7F       RET                      (0152)    ret
061B: 41 43 FE AND   REG[0x43],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM1_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register of the LSB block.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM1_Stop:
                                        (0176) _PWM1_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM1_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
061E: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM1_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count registers (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM1_WritePeriod:
                                        (0206) _PWM1_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
061F: 60 41    MOV   REG[0x41],A        (0208)    mov   reg[PWM1_PERIOD_LSB_REG], A
0621: 5B       MOV   A,X                (0209)    mov   A, X
0622: 60 45    MOV   REG[0x45],A        (0210)    mov   reg[PWM1_PERIOD_MSB_REG], A
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
0624: 7F       RET                      (0212)    ret
                                        (0213) 
                                        (0214) 
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) .SECTION
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  FUNCTION NAME: PWM1_WritePulseWidth
                                        (0220) ;
                                        (0221) ;  DESCRIPTION:
                                        (0222) ;     Writes the pulse width value into the Compare register (DR2).
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0226) ;  RETURNS:      Nothing
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  PWM1_WritePulseWidth:
                                        (0235) _PWM1_WritePulseWidth:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
0625: 60 42    MOV   REG[0x42],A        (0237)    mov   reg[PWM1_COMPARE_LSB_REG], A
0627: 5B       MOV   A,X                (0238)    mov   A, X
0628: 60 46    MOV   REG[0x46],A        (0239)    mov   reg[PWM1_COMPARE_MSB_REG], A
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
062A: 7F       RET                      (0241)    ret
                                        (0242) 
                                        (0243) 
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: PWM1_wReadPulseWidth
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Reads the Compare register.
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS:    None
                                        (0255) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0256) ;  SIDE EFFECTS:
                                        (0257) ;    The A and X registers may be modified by this or future implementations
                                        (0258) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0259) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;
                                        (0263)  PWM1_wReadPulseWidth:
                                        (0264) _PWM1_wReadPulseWidth:
                                        (0265)  wPWM1_ReadPulseWidth:                           ; this name deprecated
                                        (0266) _wPWM1_ReadPulseWidth:                           ; this name deprecated
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
062B: 5D 46    MOV   A,REG[0x46]        (0268)    mov   A, reg[PWM1_COMPARE_MSB_REG]
062D: 5C       MOV   X,A                (0269)    mov   X, A
062E: 5D 42    MOV   A,REG[0x42]        (0270)    mov   A, reg[PWM1_COMPARE_LSB_REG]
                                        (0271)    RAM_EPILOGUE RAM_USE_CLASS_1
0630: 7F       RET                      (0272)    ret
                                        (0273) 
                                        (0274) 
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: PWM1_wReadCounter
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:
                                        (0282) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0283) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0284) ;     from the Count to the Compare register by holding the clock low in
                                        (0285) ;     the MSB PSoC block.
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0292) ;     2) The A and X registers may be modified by this or future implementations
                                        (0293) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0294) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0295) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0296) ;        functions.
                                        (0297) ;
                                        (0298)  PWM1_wReadCounter:
                                        (0299) _PWM1_wReadCounter:
                                        (0300)  wPWM1_ReadCounter:                              ; this name deprecated
                                        (0301) _wPWM1_ReadCounter:                              ; this name deprecated
                                        (0302) 
                                        (0303)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0304)    bOrigClockSetting:      EQU   2                  ; Frame offset to temp Input   store
                                        (0305)    wCounter:               EQU   3                  ; Frame offset to temp Count   store
                                        (0306)    STACK_FRAME_SIZE:       EQU   5                  ; max stack frame size is 5 bytes
                                        (0307) 
                                        (0308)    RAM_PROLOGUE RAM_USE_CLASS_2
0631: 4F       MOV   X,SP               (0309)    mov   X, SP                                      ; X <-  stack frame pointer
0632: 5D 46    MOV   A,REG[0x46]        (0310)    mov   A, reg[PWM1_COMPARE_MSB_REG]            ; Save the Compare register on the stack
0634: 08       PUSH  A                  (0311)    push  A                                          ;
0635: 5D 42    MOV   A,REG[0x42]        (0312)    mov   A, reg[PWM1_COMPARE_LSB_REG]            ;
0637: 08       PUSH  A                  (0313)    push  A                                          ;  -stack frame now 2 bytes-
0638: 41 43 FE AND   REG[0x43],0xFE     
063B: 71 10    OR    F,0x10             
                                        (0314)    PWM1_Stop_M                                   ; Disable the PWM function
                                        (0315)    M8C_SetBank1                                     ;
063D: 5D 41    MOV   A,REG[0x41]        (0316)    mov   A, reg[PWM1_INPUT_LSB_REG]              ; save the LSB clock input setting
063F: 08       PUSH  A                  (0317)    push  A                                          ;   on the stack (now 3 bytes) and ...
                                        (0318)                                                     ;   hold the clock low:
0640: 62 41 00 MOV   REG[0x41],0x0      (0319)    mov   reg[PWM1_INPUT_LSB_REG], INPUT_REG_NULL
0643: 70 EF    AND   F,0xEF             
                                        (0320)    M8C_SetBank0                                     ; Extract the Count via DR2 register
0645: 5D 44    MOV   A,REG[0x44]        (0321)    mov   A, reg[PWM1_COUNTER_MSB_REG]            ; DR2 <- DR0 (in the MSB block)
0647: 5D 46    MOV   A,REG[0x46]        (0322)    mov   A, reg[PWM1_COMPARE_MSB_REG]            ; Stash the Count MSB on the stack
0649: 08       PUSH  A                  (0323)    push  A                                          ;  -stack frame is now 4 bytes
064A: 5D 40    MOV   A,REG[0x40]        (0324)    mov   A, reg[PWM1_COUNTER_LSB_REG]            ; DR2 <- DR0 (in the LSB block)
064C: 5D 42    MOV   A,REG[0x42]        (0325)    mov   A, reg[PWM1_COMPARE_LSB_REG]            ; Stash the Count LSB on the stack
064E: 08       PUSH  A                  (0326)    push  A                                          ;   -stack frame is now 5 bytes-
064F: 52 00    MOV   A,[X+0]            (0327)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0651: 60 46    MOV   REG[0x46],A        (0328)    mov   reg[PWM1_COMPARE_MSB_REG], A            ;
0653: 52 01    MOV   A,[X+1]            (0329)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
0655: 60 42    MOV   REG[0x42],A        (0330)    mov   reg[PWM1_COMPARE_LSB_REG], A            ;
0657: 71 10    OR    F,0x10             
                                        (0331)    M8C_SetBank1                                     ; ---Restore the PWM operation
0659: 52 02    MOV   A,[X+2]            (0332)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
065B: 60 41    MOV   REG[0x41],A        (0333)    mov   reg[PWM1_INPUT_LSB_REG], A              ;    and restore it
065D: 70 EF    AND   F,0xEF             
065F: 43 43 01 OR    REG[0x43],0x1      
                                        (0334)    M8C_SetBank0                                     ;
                                        (0335)    PWM1_Start_M                                  ; Now re-enable the PWM function
0662: 18       POP   A                  (0336)    pop   A                                          ; Setup the return value
0663: 20       POP   X                  (0337)    pop   X                                          ;
0664: 38 FD    ADD   SP,0xFD            (0338)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
0666: 70 3F    AND   F,0x3F             
0668: 71 C0    OR    F,0xC0             
                                        (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
066A: 7F       RET                      (0340)    ret
                                        (0341) 
                                        (0342) .ENDSECTION
                                        (0343) 
                                        (0344) ; End of File PWM1.asm
FILE: C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
(0001) //****************************************************************************
(0002) //*****************************************************************************
(0003) //  FILENAME: main.c
(0004) //   Made for project 2 in the second semester of school
(0005) //
(0006) //  DESCRIPTION: Main file of the Psoc_robot project.
(0007) //
(0008) //-----------------------------------------------------------------------------
(0009) // 
(0010) //*****************************************************************************
(0011) //*****************************************************************************
(0012) ////***************************************************************************************
(0013) 
(0014) //------------------------------------------------------------------------------
(0015) // Name: Psoc_robot
(0016) //------------------------------------------------------------------------------
(0017) //------------------------------------------------------------------------------
(0018) // For Device: CY8C29466
(0019) //------------------------------------------------------------------------------
(0020) // Required Software:  PSoC Designer 5.3
(0021) 
(0022) // Project Settings: 
(0023) //      
(0024) //      Power Setting [Vcc/SysClk Freq]:  5.0V/24MHz
(0025) //      CPU Clock:                        Sysclk/1  
(0026) //      VC1                               Sysclk/12
(0027) //      VC2                               VC1/2 = Sysclk/24
(0028) //      
(0029) //		Timer1:				`			  For reading one joystick channel aileron puls with 
(0030) //      Clock 							   VC2
(0031) //      Period                             65535
(0032) //      CompareValue                       0
(0033) //      CompareType                        Less than or equal to
(0034) //      Conected to port                   Port_0_0
(0035) 
(0036) 
(0037) //  	Timer2:				`			  For reading one joystick channel 	elevation puls with 1
(0038) //      Clock 							   VC2
(0039) //      Period                             65535
(0040) //      CompareValue                       0
(0041) //      CompareType                        Less than or equal to
(0042) //      Conected to port                   Port_0_1
(0043) //  	
(0044) //      Timer3:				`			  For reading the  ultrasonic sensor
(0045) //      Clock 							   VC2
(0046) //      Period                             65535
(0047) //      CompareValue                       0
(0048) //      CompareType                        Less than or equal to
(0049) //      Conected to port                   Port_0_2
(0050) //		
(0051) //		
(0052) //    Pwm conected to port                 Port_0_4
(0053) //    PWM:								   For controlling one motor on one side
(0054) //      Clock                              VC2
(0055) //      Enable                             High
(0056) //      Period                             1000
(0057) //      PulseWidth                         0
(0058) //      CompareType                        Less than 
(0059) //      Interrupt Type                     Terminal count
(0060) //      LCD:
(0061) //      LCDPort                            Port_2
(0062) //      
(0063) //---------------------------------------------------------------------------------
(0064) 
(0065) #include <m8c.h>        // part specific constants and macros
(0066) #include <math.h>      
(0067) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0068) 
(0069) #define DEBUG_LCD 0
(0070) 
(0071) //volatile BOOL ultrasoonInitDone;//dit gedaan om compiler te verplichten waarde terug in te lezen (Caching tegen te gaan )
(0072) 
(0073) #define MAX_POWER 1000
(0074) #define MIN_POWER 0
(0075) 
(0076) //
(0077) #define DATA_AVAILABLE_AILERON 0x01//staat in de eerste bit van de flag 
(0078) #define FALLING_EDGE_AILERON 0x02 // staat in de 2de bit van de flag 
(0079) WORD CapturePosEdgeAileron;
(0080) WORD CaptureNegEdgeAileron;
(0081) WORD PulseWidthAileron;
(0082) BYTE FlagsAileron;
(0083) #define MARGIN_AILERON 2
(0084) #define MIN_AILERON 0x60
(0085) #define CENTER_AILERON 0x8C
(0086) #define MAX_AILERON 0xB9
(0087) 
(0088) // 
(0089) #define DATA_AVAILABLE_ELEVATOR 0x01 // new for motorcontroll2
(0090) #define FALLING_EDGE_ELEVATOR 0x02    // new for motorcontroll2
(0091) WORD CapturePosEdgeElevator;
(0092) WORD CaptureNegEdgeElevator;
(0093) WORD PulseWidthElevator;
(0094) BYTE FlagsElevator;
(0095) #define MARGIN_ELEVATOR 2
(0096) #define MIN_ELEVATOR 0x60
(0097) #define CENTER_ELEVATOR 0x8C
(0098) #define MAX_ELEVATOR 0xB9
(0099) 
(0100) // for timer 3 and ultrasoon sensor 1
(0101) #define DATA_AVAILABLE_ULTRASOON 0x01 
(0102) #define FALLING_EDGE_ULTRASOON 0x02    
(0103) #define MIN_SAFE_DISTANCE  0x50
(0104) 
(0105) 
(0106) WORD CapturePosEdgeUltrasoon;
(0107) WORD CaptureNegEdgeUltrasoon;
(0108) WORD PulseWidthUltrasoon;
(0109) BYTE FlagUltrasoon;
(0110) 
(0111) void ultrasoonSensor(void);//long ultrasoon sensor(void);
(0112) 
(0113) #pragma interrupt_handler Timer1CaptureISR
(0114) #pragma interrupt_handler Timer2CaptureISR
(0115) #pragma interrupt_handler Timer3CaptureISR
(0116) 
(0117) 
(0118) BOOL Within(WORD value, WORD border, WORD margin)
(0119) {
__UserModules_end|__text_start|_Within|_Within:
  upper                --> X+2
  lower                --> X+0
  margin               --> X-9
  border               --> X-7
  value                --> X-5
    066B: 10       PUSH  X
    066C: 4F       MOV   X,SP
    066D: 38 04    ADD   SP,0x4
(0120) 	WORD lower = border - margin;
    066F: 52 FA    MOV   A,[X-6]
    0671: 13 F8    SUB   A,[X-8]
    0673: 54 01    MOV   [X+1],A
    0675: 52 F9    MOV   A,[X-7]
    0677: 1B F7    SBB   A,[X-9]
    0679: 54 00    MOV   [X+0],A
(0121) 	WORD upper = border + margin;
    067B: 52 FA    MOV   A,[X-6]
    067D: 03 F8    ADD   A,[X-8]
    067F: 54 03    MOV   [X+3],A
    0681: 52 F9    MOV   A,[X-7]
    0683: 0B F7    ADC   A,[X-9]
    0685: 54 02    MOV   [X+2],A
(0122) 	
(0123) 	if (value >= lower
    0687: 52 FC    MOV   A,[X-4]
    0689: 13 01    SUB   A,[X+1]
    068B: 52 FB    MOV   A,[X-5]
    068D: 1B 00    SBB   A,[X+0]
    068F: C0 12    JC    0x06A2
    0691: 52 03    MOV   A,[X+3]
    0693: 13 FC    SUB   A,[X-4]
    0695: 52 02    MOV   A,[X+2]
    0697: 1B FB    SBB   A,[X-5]
    0699: C0 08    JC    0x06A2
(0124) 	&&  value <= upper)
(0125) 		return TRUE;
    069B: 62 D0 00 MOV   REG[0xD0],0x0
    069E: 50 01    MOV   A,0x1
    06A0: 80 06    JMP   0x06A7
(0126) 	else
(0127) 		return FALSE;
    06A2: 62 D0 00 MOV   REG[0xD0],0x0
    06A5: 50 00    MOV   A,0x0
    06A7: 38 FC    ADD   SP,0xFC
    06A9: 20       POP   X
    06AA: 7F       RET   
(0128) }
(0129) 
(0130) // normalization function for Aileron (Timer1)
(0131) float EvaluateAileron(DWORD value)
(0132) {	
_EvaluateAileron:
  value                --> X-7
    06AB: 10       PUSH  X
    06AC: 4F       MOV   X,SP
(0133) 	// Check if pulsewidth data is available
(0134) 	if(FlagsAileron & DATA_AVAILABLE_AILERON)
    06AD: 62 D0 00 MOV   REG[0xD0],0x0
    06B0: 47 35 01 TST   [FlagsAileron],0x1
    06B3: A2 5E    JZ    0x0912
(0135) 	{
(0136) #if (DEBUG_LCD)
(0137) 		LCD_Position(0,0);
(0138) 		LCD_PrHexInt(value);
(0139) #endif	
(0140) 		// stick in center 
(0141) 		if (Within(value, CENTER_AILERON, MARGIN_AILERON))
    06B5: 50 00    MOV   A,0x0
    06B7: 08       PUSH  A
    06B8: 50 02    MOV   A,0x2
    06BA: 08       PUSH  A
    06BB: 50 00    MOV   A,0x0
    06BD: 08       PUSH  A
    06BE: 50 8C    MOV   A,0x8C
    06C0: 08       PUSH  A
    06C1: 62 D0 00 MOV   REG[0xD0],0x0
    06C4: 52 FC    MOV   A,[X-4]
    06C6: 53 1F    MOV   [__r1],A
    06C8: 52 FB    MOV   A,[X-5]
    06CA: 08       PUSH  A
    06CB: 51 1F    MOV   A,[__r1]
    06CD: 08       PUSH  A
    06CE: 9F 9B    CALL  __UserModules_end|__text_start|_Within|_Within
    06D0: 38 FA    ADD   SP,0xFA
    06D2: 62 D0 00 MOV   REG[0xD0],0x0
    06D5: 39 00    CMP   A,0x0
    06D7: A0 0F    JZ    0x06E7
(0142) 		{
(0143) #if (DEBUG_LCD)
(0144) 			LCD_Position(0,5);
(0145) 			LCD_PrCString("C");
(0146) #endif		
(0147) 			return 0;
    06D9: 55 20 00 MOV   [__r0],0x0
    06DC: 55 1F 00 MOV   [__r1],0x0
    06DF: 55 1E 00 MOV   [__r2],0x0
    06E2: 55 1D 00 MOV   [__r3],0x0
    06E5: 82 3B    JMP   0x0921
(0148) 		}
(0149) 		else if (value < CENTER_AILERON) // stick left
    06E7: 52 FC    MOV   A,[X-4]
    06E9: 11 8C    SUB   A,0x8C
    06EB: 52 FB    MOV   A,[X-5]
    06ED: 19 00    SBB   A,0x0
    06EF: 52 FA    MOV   A,[X-6]
    06F1: 19 00    SBB   A,0x0
    06F3: 52 F9    MOV   A,[X-7]
    06F5: 19 00    SBB   A,0x0
    06F7: D1 02    JNC   0x07FA
(0150) 		{
(0151) #if (DEBUG_LCD)
(0152) 			LCD_Position(0,5);
(0153) 			LCD_PrCString("L");
(0154) #endif	
(0155) 			return ((float)value - CENTER_AILERON) / (float)(MAX_AILERON - CENTER_AILERON);
    06F9: 62 D0 00 MOV   REG[0xD0],0x0
FILE: C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
(0157) 		else if (value > CENTER_AILERON) // stick right
    07FA: 50 8C    MOV   A,0x8C
    07FC: 13 FC    SUB   A,[X-4]
    07FE: 50 00    MOV   A,0x0
    0800: 1B FB    SBB   A,[X-5]
    0802: 50 00    MOV   A,0x0
    0804: 1B FA    SBB   A,[X-6]
    0806: 50 00    MOV   A,0x0
    0808: 1B F9    SBB   A,[X-7]
    080A: D1 01    JNC   0x090C
(0158) 		{			
(0159) #if (DEBUG_LCD)
(0160) 			LCD_Position(0,5);
(0161) 			LCD_PrCString("R");
(0162) #endif			
(0163) 			return -(CENTER_AILERON - (float)value) / (float)(CENTER_AILERON - MIN_AILERON);
    080C: 62 D0 00 MOV   REG[0xD0],0x0
FILE: C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
(0167) 		FlagsAileron &= ~DATA_AVAILABLE_AILERON;
    090C: 62 D0 00 MOV   REG[0xD0],0x0
    090F: 26 35 FE AND   [FlagsAileron],0xFE
(0168) 	}
(0169) 	
(0170) 	return 0;
    0912: 62 D0 00 MOV   REG[0xD0],0x0
    0915: 55 20 00 MOV   [__r0],0x0
    0918: 55 1F 00 MOV   [__r1],0x0
    091B: 55 1E 00 MOV   [__r2],0x0
    091E: 55 1D 00 MOV   [__r3],0x0
    0921: 20       POP   X
    0922: 7F       RET   
(0171) }
(0172) // normalization function for Elevator(Timer2)
(0173) float EvaluateElevator(DWORD value)
(0174) {
_EvaluateElevator:
  value                --> X-7
    0923: 10       PUSH  X
    0924: 4F       MOV   X,SP
(0175) 	// Check if pulsewidth data is available
(0176) 	if(FlagsElevator & DATA_AVAILABLE_ELEVATOR)
    0925: 62 D0 00 MOV   REG[0xD0],0x0
    0928: 47 34 01 TST   [FlagsElevator],0x1
    092B: A2 5E    JZ    0x0B8A
(0177) 	{
(0178) #if (DEBUG_LCD)
(0179) 		LCD_Position(1,0);
(0180) 		LCD_PrHexInt(value);
(0181) #endif 	
(0182) 		// stick in center 
(0183) 		if (Within(value, CENTER_ELEVATOR, MARGIN_ELEVATOR))
    092D: 50 00    MOV   A,0x0
    092F: 08       PUSH  A
    0930: 50 02    MOV   A,0x2
    0932: 08       PUSH  A
    0933: 50 00    MOV   A,0x0
    0935: 08       PUSH  A
    0936: 50 8C    MOV   A,0x8C
    0938: 08       PUSH  A
    0939: 62 D0 00 MOV   REG[0xD0],0x0
    093C: 52 FC    MOV   A,[X-4]
    093E: 53 1F    MOV   [__r1],A
    0940: 52 FB    MOV   A,[X-5]
    0942: 08       PUSH  A
    0943: 51 1F    MOV   A,[__r1]
    0945: 08       PUSH  A
    0946: 9D 23    CALL  __UserModules_end|__text_start|_Within|_Within
    0948: 38 FA    ADD   SP,0xFA
    094A: 62 D0 00 MOV   REG[0xD0],0x0
    094D: 39 00    CMP   A,0x0
    094F: A0 0F    JZ    0x095F
(0184) 		{
(0185) #if (DEBUG_LCD)
(0186) 			LCD_Position(1,5);
(0187) 			LCD_PrCString("C");
(0188) #endif 	
(0189) 			return 0;
    0951: 55 20 00 MOV   [__r0],0x0
    0954: 55 1F 00 MOV   [__r1],0x0
    0957: 55 1E 00 MOV   [__r2],0x0
    095A: 55 1D 00 MOV   [__r3],0x0
    095D: 82 3B    JMP   0x0B99
(0190) 		}
(0191) 		else if (value > CENTER_ELEVATOR) // stick up
    095F: 50 8C    MOV   A,0x8C
    0961: 13 FC    SUB   A,[X-4]
    0963: 50 00    MOV   A,0x0
    0965: 1B FB    SBB   A,[X-5]
    0967: 50 00    MOV   A,0x0
    0969: 1B FA    SBB   A,[X-6]
    096B: 50 00    MOV   A,0x0
    096D: 1B F9    SBB   A,[X-7]
    096F: D1 02    JNC   0x0A72
(0192) 		{
(0193) #if (DEBUG_LCD)
(0194) 			LCD_Position(1,5);
(0195) 			LCD_PrCString("U");
(0196) #endif			
(0197) 			return ((float)value - CENTER_ELEVATOR) / (float)(MAX_ELEVATOR - CENTER_ELEVATOR);
    0971: 62 D0 00 MOV   REG[0xD0],0x0
FILE: C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
(0199) 		else if (value < CENTER_ELEVATOR) // stick down
    0A72: 52 FC    MOV   A,[X-4]
    0A74: 11 8C    SUB   A,0x8C
    0A76: 52 FB    MOV   A,[X-5]
    0A78: 19 00    SBB   A,0x0
    0A7A: 52 FA    MOV   A,[X-6]
    0A7C: 19 00    SBB   A,0x0
    0A7E: 52 F9    MOV   A,[X-7]
    0A80: 19 00    SBB   A,0x0
    0A82: D1 01    JNC   0x0B84
(0200) 		{			
(0201) #if (DEBUG_LCD)
(0202) 			LCD_Position(1,5);
(0203) 			LCD_PrCString("D");
(0204) #endif			
(0205) 			return -(CENTER_ELEVATOR - (float)value) / (float)(CENTER_ELEVATOR - MIN_ELEVATOR);
    0A84: 62 D0 00 MOV   REG[0xD0],0x0
FILE: C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
(0209) 		FlagsElevator &= ~DATA_AVAILABLE_ELEVATOR;
    0B84: 62 D0 00 MOV   REG[0xD0],0x0
    0B87: 26 34 FE AND   [FlagsElevator],0xFE
(0210) 	}
(0211) 	
(0212) 	return 0;
    0B8A: 62 D0 00 MOV   REG[0xD0],0x0
    0B8D: 55 20 00 MOV   [__r0],0x0
    0B90: 55 1F 00 MOV   [__r1],0x0
    0B93: 55 1E 00 MOV   [__r2],0x0
    0B96: 55 1D 00 MOV   [__r3],0x0
    0B99: 20       POP   X
    0B9A: 7F       RET   
(0213) }
(0214) 
(0215) void TriggerUltrasoon(void)
(0216) {
(0217) 	PRT1DR |= 0x10;// setting p1[4]
_TriggerUltrasoon:
    0B9B: 43 04 10 OR    REG[0x4],0x10
(0218)     asm("nop");
    0B9E: 40       NOP   
(0219) 	asm("nop");
    0B9F: 40       NOP   
(0220) 	asm("nop");
    0BA0: 40       NOP   
(0221) 	asm("nop");
    0BA1: 40       NOP   
(0222) 	asm("nop");
    0BA2: 40       NOP   
(0223) 	asm("nop");
    0BA3: 40       NOP   
(0224) 	asm("nop");
    0BA4: 40       NOP   
(0225) 	asm("nop");
    0BA5: 40       NOP   
(0226) 	asm("nop");
    0BA6: 40       NOP   
(0227) 	asm("nop");
    0BA7: 40       NOP   
(0228) 	asm("nop");
    0BA8: 40       NOP   
(0229) 	asm("nop");
    0BA9: 40       NOP   
(0230) 	asm("nop");
    0BAA: 40       NOP   
(0231) 	asm("nop");
    0BAB: 40       NOP   
(0232) 	asm("nop");
    0BAC: 40       NOP   
(0233) 	asm("nop");
    0BAD: 40       NOP   
(0234) 	asm("nop");
    0BAE: 40       NOP   
(0235) 	asm("nop");
    0BAF: 40       NOP   
(0236) 	PRT1DR &= ~0x10;// clearing   P1[4]
    0BB0: 41 04 EF AND   REG[0x4],0xEF
    0BB3: 7F       RET   
(0237) }
(0238) 
(0239) float EvaluateUltrasoonSensor(void)//(Timer3)
(0240) {
_EvaluateUltrasoonSensor:
  pulseWidthUltrasoon  --> X+0
    0BB4: 10       PUSH  X
    0BB5: 4F       MOV   X,SP
    0BB6: 38 02    ADD   SP,0x2
(0241) 	if (FlagUltrasoon & DATA_AVAILABLE_ULTRASOON)// do if databit is set 
    0BB8: 62 D0 00 MOV   REG[0xD0],0x0
    0BBB: 47 33 01 TST   [FlagUltrasoon],0x1
    0BBE: A0 F5    JZ    0x0CB4
(0242)     {    
(0243) 		WORD pulseWidthUltrasoon = PulseWidthUltrasoon;
    0BC0: 62 D0 00 MOV   REG[0xD0],0x0
    0BC3: 51 26    MOV   A,[PulseWidthUltrasoon+1]
    0BC5: 54 01    MOV   [X+1],A
    0BC7: 51 25    MOV   A,[PulseWidthUltrasoon]
    0BC9: 54 00    MOV   [X+0],A
(0244) 
(0245) #if (DEBUG_LCD)
(0246) 		LCD_Position(1,12);
(0247) 		LCD_PrHexInt(pulseWidthUltrasoon);
(0248) #endif
(0249) 		FlagUltrasoon &= ~DATA_AVAILABLE_ULTRASOON;
    0BCB: 62 D0 00 MOV   REG[0xD0],0x0
    0BCE: 26 33 FE AND   [FlagUltrasoon],0xFE
(0250) 		
(0251) 		// als meting gebeurt is trigger sensor opnieuw en we disablen timer1
(0252) 		TriggerUltrasoon();	
    0BD1: 9F C8    CALL  _TriggerUltrasoon
(0253) 		
(0254) 		return pulseWidthUltrasoon;
    0BD3: 62 D0 00 MOV   REG[0xD0],0x0
    0BD6: 52 01    MOV   A,[X+1]
    0BD8: 21 01    AND   A,0x1
    0BDA: 53 1F    MOV   [__r1],A
    0BDC: 52 00    MOV   A,[X+0]
    0BDE: 21 00    AND   A,0x0
    0BE0: 53 20    MOV   [__r0],A
    0BE2: 51 1F    MOV   A,[__r1]
    0BE4: 53 1D    MOV   [__r3],A
    0BE6: 51 20    MOV   A,[__r0]
    0BE8: 53 1E    MOV   [__r2],A
    0BEA: 47 1E 80 TST   [__r2],0x80
    0BED: A0 09    JZ    0x0BF7
    0BEF: 55 1F FF MOV   [__r1],0xFF
    0BF2: 55 20 FF MOV   [__r0],0xFF
    0BF5: 80 0A    JMP   0x0C00
    0BF7: 62 D0 00 MOV   REG[0xD0],0x0
    0BFA: 55 1F 00 MOV   [__r1],0x0
    0BFD: 55 20 00 MOV   [__r0],0x0
    0C00: 62 D0 00 MOV   REG[0xD0],0x0
    0C03: 51 20    MOV   A,[__r0]
    0C05: 08       PUSH  A
    0C06: 51 1F    MOV   A,[__r1]
    0C08: 08       PUSH  A
    0C09: 51 1E    MOV   A,[__r2]
    0C0B: 08       PUSH  A
    0C0C: 51 1D    MOV   A,[__r3]
    0C0E: 08       PUSH  A
    0C0F: 7C 18 AA LCALL 0x18AA
    0C12: 18       POP   A
    0C13: 53 1D    MOV   [__r3],A
    0C15: 18       POP   A
    0C16: 53 1E    MOV   [__r2],A
    0C18: 18       POP   A
    0C19: 53 1F    MOV   [__r1],A
    0C1B: 18       POP   A
    0C1C: 53 20    MOV   [__r0],A
    0C1E: 52 01    MOV   A,[X+1]
    0C20: 53 1B    MOV   [__r5],A
    0C22: 52 00    MOV   A,[X+0]
    0C24: 53 1C    MOV   [__r4],A
    0C26: 70 FB    AND   F,0xFB
    0C28: 6E 1C    RRC   [__r4]
    0C2A: 6E 1B    RRC   [__r5]
    0C2C: 51 1B    MOV   A,[__r5]
    0C2E: 53 19    MOV   [__r7],A
    0C30: 51 1C    MOV   A,[__r4]
    0C32: 53 1A    MOV   [__r6],A
    0C34: 47 1A 80 TST   [__r6],0x80
    0C37: A0 09    JZ    0x0C41
    0C39: 55 1B FF MOV   [__r5],0xFF
    0C3C: 55 1C FF MOV   [__r4],0xFF
    0C3F: 80 0A    JMP   0x0C4A
    0C41: 62 D0 00 MOV   REG[0xD0],0x0
    0C44: 55 1B 00 MOV   [__r5],0x0
    0C47: 55 1C 00 MOV   [__r4],0x0
    0C4A: 62 D0 00 MOV   REG[0xD0],0x0
    0C4D: 51 1C    MOV   A,[__r4]
    0C4F: 08       PUSH  A
    0C50: 51 1B    MOV   A,[__r5]
    0C52: 08       PUSH  A
    0C53: 51 1A    MOV   A,[__r6]
    0C55: 08       PUSH  A
    0C56: 51 19    MOV   A,[__r7]
    0C58: 08       PUSH  A
    0C59: 7C 18 AA LCALL 0x18AA
    0C5C: 18       POP   A
    0C5D: 53 19    MOV   [__r7],A
    0C5F: 18       POP   A
    0C60: 53 1A    MOV   [__r6],A
    0C62: 18       POP   A
    0C63: 53 1B    MOV   [__r5],A
    0C65: 18       POP   A
    0C66: 08       PUSH  A
    0C67: 51 1B    MOV   A,[__r5]
    0C69: 08       PUSH  A
    0C6A: 51 1A    MOV   A,[__r6]
    0C6C: 08       PUSH  A
    0C6D: 51 19    MOV   A,[__r7]
    0C6F: 08       PUSH  A
    0C70: 50 40    MOV   A,0x40
    0C72: 08       PUSH  A
    0C73: 50 00    MOV   A,0x0
    0C75: 08       PUSH  A
    0C76: 08       PUSH  A
    0C77: 08       PUSH  A
    0C78: 7C 17 42 LCALL 0x1742
    0C7B: 18       POP   A
    0C7C: 53 19    MOV   [__r7],A
    0C7E: 18       POP   A
    0C7F: 53 1A    MOV   [__r6],A
    0C81: 18       POP   A
    0C82: 53 1B    MOV   [__r5],A
    0C84: 18       POP   A
    0C85: 53 1C    MOV   [__r4],A
    0C87: 38 FC    ADD   SP,0xFC
    0C89: 51 20    MOV   A,[__r0]
    0C8B: 08       PUSH  A
    0C8C: 51 1F    MOV   A,[__r1]
    0C8E: 08       PUSH  A
    0C8F: 51 1E    MOV   A,[__r2]
    0C91: 08       PUSH  A
    0C92: 51 1D    MOV   A,[__r3]
    0C94: 08       PUSH  A
    0C95: 51 1C    MOV   A,[__r4]
    0C97: 08       PUSH  A
    0C98: 51 1B    MOV   A,[__r5]
    0C9A: 08       PUSH  A
    0C9B: 51 1A    MOV   A,[__r6]
    0C9D: 08       PUSH  A
    0C9E: 51 19    MOV   A,[__r7]
    0CA0: 08       PUSH  A
    0CA1: 7C 15 02 LCALL 0x1502
    0CA4: 18       POP   A
    0CA5: 53 1D    MOV   [__r3],A
    0CA7: 18       POP   A
    0CA8: 53 1E    MOV   [__r2],A
    0CAA: 18       POP   A
    0CAB: 53 1F    MOV   [__r1],A
    0CAD: 18       POP   A
    0CAE: 53 20    MOV   [__r0],A
    0CB0: 38 FC    ADD   SP,0xFC
    0CB2: 80 10    JMP   0x0CC3
(0255)     }  
(0256) 	
(0257) 	return MIN_SAFE_DISTANCE + 1;
    0CB4: 62 D0 00 MOV   REG[0xD0],0x0
    0CB7: 55 20 42 MOV   [__r0],0x42
    0CBA: 55 1F A2 MOV   [__r1],0xA2
    0CBD: 55 1E 00 MOV   [__r2],0x0
    0CC0: 55 1D 00 MOV   [__r3],0x0
    0CC3: 38 FE    ADD   SP,0xFE
    0CC5: 20       POP   X
    0CC6: 7F       RET   
(0258) }
(0259) 
(0260) void main(void)
(0261) {
_main:
  direction            --> X+25
  distance             --> X+21
  forward              --> X+20
  elevatorNormalized   --> X+16
  aileronNormalized    --> X+12
  motorRight           --> X+8
  motorLeft            --> X+4
  speed                --> X+0
    0CC7: 10       PUSH  X
    0CC8: 4F       MOV   X,SP
    0CC9: 38 23    ADD   SP,0x23
(0262) 	// Enable Global Interrupt   
(0263) 	M8C_EnableGInt;
    0CCB: 71 01    OR    F,0x1
(0264) 
(0265) 	// Clear the flags
(0266) 	FlagsElevator = 0;
    0CCD: 62 D0 00 MOV   REG[0xD0],0x0
    0CD0: 55 34 00 MOV   [FlagsElevator],0x0
(0267) 	FlagsAileron = 0;// new for motorcontroll2
    0CD3: 62 D0 00 MOV   REG[0xD0],0x0
    0CD6: 55 35 00 MOV   [FlagsAileron],0x0
(0268) 	FlagUltrasoon = 0;
    0CD9: 62 D0 00 MOV   REG[0xD0],0x0
    0CDC: 55 33 00 MOV   [FlagUltrasoon],0x0
(0269) 
(0270) 	// Start timers and enable interrupt
(0271) 	Timer1_Start();
    0CDF: 10       PUSH  X
    0CE0: 7C 05 56 LCALL _Timer1_Start
(0272) 	Timer1_EnableInt();
    0CE3: 7C 05 4E LCALL _Timer1_EnableInt
(0273) 
(0274) 	Timer2_Start();// new for motorcontroll2
    0CE6: 7C 04 F2 LCALL _Timer2_Start
(0275) 	Timer2_EnableInt();// new for motorcontroll2
    0CE9: 7C 04 EA LCALL _Timer2_EnableInt
(0276) 
(0277) 	Timer3_Start();
    0CEC: 7C 04 8E LCALL _Timer3_Start
(0278) 	Timer3_EnableInt();
    0CEF: 7C 04 86 LCALL _Timer3_EnableInt
    0CF2: 20       POP   X
(0279)    
(0280) 	TriggerUltrasoon();	
    0CF3: 9E A6    CALL  _TriggerUltrasoon
(0281) 
(0282) 	// Init motors
(0283) 	PWM1_Start();
    0CF5: 10       PUSH  X
    0CF6: 7C 06 17 LCALL _PWM1_Start
(0284) 	PWM2_Start();
    0CF9: 7C 05 B7 LCALL _PWM2_Start
    0CFC: 20       POP   X
    0CFD: 84 1F    JMP   0x111D
(0285) 
(0286) #if (DEBUG_LCD)
(0287) 	LCD_Start();
(0288) #endif  
(0289) 	
(0290) 	while (TRUE)
(0291) 	{
(0292) 		float aileronNormalized,
(0293) 			  elevatorNormalized;
(0294) 		float distance;
(0295) 		float speed, direction;
(0296) 		float motorLeft, motorRight;
(0297) 		BOOL forward;
(0298) 		
(0299) 		aileronNormalized = EvaluateAileron(PulseWidthAileron);
    0CFF: 62 D0 00 MOV   REG[0xD0],0x0
    0D02: 51 24    MOV   A,[PulseWidthAileron+1]
    0D04: 62 D0 00 MOV   REG[0xD0],0x0
    0D07: 53 1D    MOV   [__r3],A
    0D09: 62 D0 00 MOV   REG[0xD0],0x0
    0D0C: 51 23    MOV   A,[PulseWidthAileron]
    0D0E: 62 D0 00 MOV   REG[0xD0],0x0
    0D11: 53 1E    MOV   [__r2],A
    0D13: 50 00    MOV   A,0x0
    0D15: 08       PUSH  A
    0D16: 08       PUSH  A
    0D17: 51 1E    MOV   A,[__r2]
    0D19: 08       PUSH  A
    0D1A: 51 1D    MOV   A,[__r3]
    0D1C: 08       PUSH  A
    0D1D: 99 8C    CALL  _EvaluateAileron
    0D1F: 62 D0 00 MOV   REG[0xD0],0x0
    0D22: 51 20    MOV   A,[__r0]
    0D24: 54 0C    MOV   [X+12],A
    0D26: 51 1F    MOV   A,[__r1]
    0D28: 54 0D    MOV   [X+13],A
    0D2A: 51 1E    MOV   A,[__r2]
    0D2C: 54 0E    MOV   [X+14],A
    0D2E: 51 1D    MOV   A,[__r3]
    0D30: 54 0F    MOV   [X+15],A
(0300) 		direction  = fabs(aileronNormalized);
    0D32: 52 0C    MOV   A,[X+12]
    0D34: 08       PUSH  A
    0D35: 52 0D    MOV   A,[X+13]
    0D37: 08       PUSH  A
    0D38: 52 0E    MOV   A,[X+14]
    0D3A: 08       PUSH  A
    0D3B: 52 0F    MOV   A,[X+15]
    0D3D: 08       PUSH  A
    0D3E: 7C 19 15 LCALL _fabsfLMM
    0D41: 38 F8    ADD   SP,0xF8
    0D43: 62 D0 00 MOV   REG[0xD0],0x0
    0D46: 51 20    MOV   A,[__r0]
    0D48: 54 19    MOV   [X+25],A
    0D4A: 51 1F    MOV   A,[__r1]
    0D4C: 54 1A    MOV   [X+26],A
    0D4E: 51 1E    MOV   A,[__r2]
    0D50: 54 1B    MOV   [X+27],A
    0D52: 51 1D    MOV   A,[__r3]
    0D54: 54 1C    MOV   [X+28],A
(0301) 
(0302) 		elevatorNormalized = EvaluateElevator(PulseWidthElevator);
    0D56: 62 D0 00 MOV   REG[0xD0],0x0
    0D59: 51 2E    MOV   A,[PulseWidthElevator+1]
    0D5B: 62 D0 00 MOV   REG[0xD0],0x0
    0D5E: 53 1D    MOV   [__r3],A
    0D60: 62 D0 00 MOV   REG[0xD0],0x0
    0D63: 51 2D    MOV   A,[PulseWidthElevator]
    0D65: 62 D0 00 MOV   REG[0xD0],0x0
    0D68: 53 1E    MOV   [__r2],A
    0D6A: 50 00    MOV   A,0x0
    0D6C: 08       PUSH  A
    0D6D: 08       PUSH  A
    0D6E: 51 1E    MOV   A,[__r2]
    0D70: 08       PUSH  A
    0D71: 51 1D    MOV   A,[__r3]
    0D73: 08       PUSH  A
    0D74: 9B AD    CALL  _EvaluateElevator
    0D76: 62 D0 00 MOV   REG[0xD0],0x0
    0D79: 51 20    MOV   A,[__r0]
    0D7B: 54 10    MOV   [X+16],A
    0D7D: 51 1F    MOV   A,[__r1]
    0D7F: 54 11    MOV   [X+17],A
    0D81: 51 1E    MOV   A,[__r2]
    0D83: 54 12    MOV   [X+18],A
    0D85: 51 1D    MOV   A,[__r3]
    0D87: 54 13    MOV   [X+19],A
(0303) 		speed  = fabs(elevatorNormalized);
    0D89: 52 10    MOV   A,[X+16]
    0D8B: 08       PUSH  A
    0D8C: 52 11    MOV   A,[X+17]
    0D8E: 08       PUSH  A
    0D8F: 52 12    MOV   A,[X+18]
    0D91: 08       PUSH  A
    0D92: 52 13    MOV   A,[X+19]
    0D94: 08       PUSH  A
    0D95: 7C 19 15 LCALL _fabsfLMM
    0D98: 38 F8    ADD   SP,0xF8
    0D9A: 62 D0 00 MOV   REG[0xD0],0x0
    0D9D: 51 20    MOV   A,[__r0]
    0D9F: 54 00    MOV   [X+0],A
    0DA1: 51 1F    MOV   A,[__r1]
    0DA3: 54 01    MOV   [X+1],A
    0DA5: 51 1E    MOV   A,[__r2]
    0DA7: 54 02    MOV   [X+2],A
    0DA9: 51 1D    MOV   A,[__r3]
    0DAB: 54 03    MOV   [X+3],A
(0304) 		forward = (elevatorNormalized >= 0);
    0DAD: 50 00    MOV   A,0x0
    0DAF: 08       PUSH  A
    0DB0: 08       PUSH  A
    0DB1: 08       PUSH  A
    0DB2: 08       PUSH  A
    0DB3: 52 10    MOV   A,[X+16]
    0DB5: 08       PUSH  A
    0DB6: 52 11    MOV   A,[X+17]
    0DB8: 08       PUSH  A
    0DB9: 52 12    MOV   A,[X+18]
    0DBB: 08       PUSH  A
    0DBC: 52 13    MOV   A,[X+19]
    0DBE: 08       PUSH  A
    0DBF: 7C 16 02 LCALL 0x1602
    0DC2: 38 F8    ADD   SP,0xF8
    0DC4: 39 FF    CMP   A,0xFF
    0DC6: A0 09    JZ    0x0DD0
    0DC8: 56 1E 01 MOV   [X+30],0x1
    0DCB: 56 1D 00 MOV   [X+29],0x0
    0DCE: 80 07    JMP   0x0DD6
    0DD0: 56 1E 00 MOV   [X+30],0x0
    0DD3: 56 1D 00 MOV   [X+29],0x0
    0DD6: 62 D0 00 MOV   REG[0xD0],0x0
    0DD9: 52 1E    MOV   A,[X+30]
    0DDB: 54 14    MOV   [X+20],A
(0305) 		
(0306) 		distance = EvaluateUltrasoonSensor();
    0DDD: 9D D5    CALL  _EvaluateUltrasoonSensor
    0DDF: 62 D0 00 MOV   REG[0xD0],0x0
    0DE2: 51 20    MOV   A,[__r0]
    0DE4: 54 15    MOV   [X+21],A
    0DE6: 51 1F    MOV   A,[__r1]
    0DE8: 54 16    MOV   [X+22],A
    0DEA: 51 1E    MOV   A,[__r2]
    0DEC: 54 17    MOV   [X+23],A
    0DEE: 51 1D    MOV   A,[__r3]
    0DF0: 54 18    MOV   [X+24],A
(0307) 		if (distance < MIN_SAFE_DISTANCE)
    0DF2: 50 42    MOV   A,0x42
    0DF4: 08       PUSH  A
    0DF5: 50 A0    MOV   A,0xA0
    0DF7: 08       PUSH  A
    0DF8: 50 00    MOV   A,0x0
    0DFA: 08       PUSH  A
    0DFB: 08       PUSH  A
    0DFC: 52 15    MOV   A,[X+21]
    0DFE: 08       PUSH  A
    0DFF: 52 16    MOV   A,[X+22]
    0E01: 08       PUSH  A
    0E02: 52 17    MOV   A,[X+23]
    0E04: 08       PUSH  A
    0E05: 52 18    MOV   A,[X+24]
    0E07: 08       PUSH  A
    0E08: 7C 16 02 LCALL 0x1602
    0E0B: 38 F8    ADD   SP,0xF8
    0E0D: 39 00    CMP   A,0x0
    0E0F: A0 16    JZ    0x0E26
    0E11: 39 01    CMP   A,0x1
    0E13: A0 12    JZ    0x0E26
(0308) 		{
(0309) 			if (forward)
    0E15: 3D 14 00 CMP   [X+20],0x0
    0E18: A0 0D    JZ    0x0E26
(0310) 				speed = 0;
    0E1A: 56 00 00 MOV   [X+0],0x0
    0E1D: 56 01 00 MOV   [X+1],0x0
    0E20: 56 02 00 MOV   [X+2],0x0
    0E23: 56 03 00 MOV   [X+3],0x0
(0311) 		}
(0312) 		
(0313) 		motorLeft  = speed; // default is straight forward
    0E26: 52 00    MOV   A,[X+0]
    0E28: 54 04    MOV   [X+4],A
    0E2A: 52 01    MOV   A,[X+1]
    0E2C: 54 05    MOV   [X+5],A
    0E2E: 52 02    MOV   A,[X+2]
    0E30: 54 06    MOV   [X+6],A
    0E32: 52 03    MOV   A,[X+3]
    0E34: 54 07    MOV   [X+7],A
(0314) 		motorRight = speed;
    0E36: 52 00    MOV   A,[X+0]
    0E38: 54 08    MOV   [X+8],A
    0E3A: 52 01    MOV   A,[X+1]
    0E3C: 54 09    MOV   [X+9],A
    0E3E: 52 02    MOV   A,[X+2]
    0E40: 54 0A    MOV   [X+10],A
    0E42: 52 03    MOV   A,[X+3]
    0E44: 54 0B    MOV   [X+11],A
(0315) 		
(0316) 		if (aileronNormalized < 0) // turning left
    0E46: 50 00    MOV   A,0x0
    0E48: 08       PUSH  A
    0E49: 08       PUSH  A
    0E4A: 08       PUSH  A
    0E4B: 08       PUSH  A
    0E4C: 52 0C    MOV   A,[X+12]
    0E4E: 08       PUSH  A
    0E4F: 52 0D    MOV   A,[X+13]
    0E51: 08       PUSH  A
    0E52: 52 0E    MOV   A,[X+14]
    0E54: 08       PUSH  A
    0E55: 52 0F    MOV   A,[X+15]
    0E57: 08       PUSH  A
    0E58: 62 D0 00 MOV   REG[0xD0],0x0
    0E5B: 7C 16 02 LCALL 0x1602
    0E5E: 38 F8    ADD   SP,0xF8
    0E60: 39 00    CMP   A,0x0
    0E62: A0 63    JZ    0x0EC6
    0E64: 39 01    CMP   A,0x1
    0E66: A0 5F    JZ    0x0EC6
(0317) 		{
(0318) 			motorRight = speed;
    0E68: 52 00    MOV   A,[X+0]
    0E6A: 54 08    MOV   [X+8],A
    0E6C: 52 01    MOV   A,[X+1]
    0E6E: 54 09    MOV   [X+9],A
    0E70: 52 02    MOV   A,[X+2]
    0E72: 54 0A    MOV   [X+10],A
    0E74: 52 03    MOV   A,[X+3]
    0E76: 54 0B    MOV   [X+11],A
(0319) 			motorLeft  = speed * (1 - direction);
    0E78: 52 19    MOV   A,[X+25]
    0E7A: 08       PUSH  A
    0E7B: 52 1A    MOV   A,[X+26]
    0E7D: 08       PUSH  A
    0E7E: 52 1B    MOV   A,[X+27]
    0E80: 08       PUSH  A
    0E81: 52 1C    MOV   A,[X+28]
    0E83: 08       PUSH  A
    0E84: 50 3F    MOV   A,0x3F
    0E86: 08       PUSH  A
    0E87: 50 80    MOV   A,0x80
    0E89: 08       PUSH  A
    0E8A: 50 00    MOV   A,0x0
    0E8C: 08       PUSH  A
    0E8D: 08       PUSH  A
    0E8E: 7C 18 6C LCALL 0x186C
    0E91: 18       POP   A
    0E92: 53 1D    MOV   [__r3],A
    0E94: 18       POP   A
    0E95: 53 1E    MOV   [__r2],A
    0E97: 18       POP   A
    0E98: 53 1F    MOV   [__r1],A
    0E9A: 18       POP   A
    0E9B: 38 FC    ADD   SP,0xFC
    0E9D: 08       PUSH  A
    0E9E: 51 1F    MOV   A,[__r1]
    0EA0: 08       PUSH  A
    0EA1: 51 1E    MOV   A,[__r2]
    0EA3: 08       PUSH  A
    0EA4: 51 1D    MOV   A,[__r3]
    0EA6: 08       PUSH  A
    0EA7: 52 00    MOV   A,[X+0]
    0EA9: 08       PUSH  A
    0EAA: 52 01    MOV   A,[X+1]
    0EAC: 08       PUSH  A
    0EAD: 52 02    MOV   A,[X+2]
    0EAF: 08       PUSH  A
    0EB0: 52 03    MOV   A,[X+3]
    0EB2: 08       PUSH  A
    0EB3: 7C 17 42 LCALL 0x1742
    0EB6: 18       POP   A
    0EB7: 54 07    MOV   [X+7],A
    0EB9: 18       POP   A
    0EBA: 54 06    MOV   [X+6],A
    0EBC: 18       POP   A
    0EBD: 54 05    MOV   [X+5],A
    0EBF: 18       POP   A
    0EC0: 54 04    MOV   [X+4],A
    0EC2: 38 FC    ADD   SP,0xFC
(0320) 		}
    0EC4: 80 7F    JMP   0x0F44
(0321) 		else if (aileronNormalized > 0) // turning right
    0EC6: 50 00    MOV   A,0x0
    0EC8: 08       PUSH  A
    0EC9: 08       PUSH  A
    0ECA: 08       PUSH  A
    0ECB: 08       PUSH  A
    0ECC: 52 0C    MOV   A,[X+12]
    0ECE: 08       PUSH  A
    0ECF: 52 0D    MOV   A,[X+13]
    0ED1: 08       PUSH  A
    0ED2: 52 0E    MOV   A,[X+14]
    0ED4: 08       PUSH  A
    0ED5: 52 0F    MOV   A,[X+15]
    0ED7: 08       PUSH  A
    0ED8: 62 D0 00 MOV   REG[0xD0],0x0
    0EDB: 7C 16 02 LCALL 0x1602
    0EDE: 38 F8    ADD   SP,0xF8
    0EE0: 39 00    CMP   A,0x0
    0EE2: A0 61    JZ    0x0F44
    0EE4: 39 01    CMP   A,0x1
    0EE6: B0 5D    JNZ   0x0F44
(0322) 		{
(0323) 			motorLeft  = speed;
    0EE8: 52 00    MOV   A,[X+0]
    0EEA: 54 04    MOV   [X+4],A
    0EEC: 52 01    MOV   A,[X+1]
    0EEE: 54 05    MOV   [X+5],A
    0EF0: 52 02    MOV   A,[X+2]
    0EF2: 54 06    MOV   [X+6],A
    0EF4: 52 03    MOV   A,[X+3]
    0EF6: 54 07    MOV   [X+7],A
(0324) 			motorRight = speed * (1 - direction);
    0EF8: 52 19    MOV   A,[X+25]
    0EFA: 08       PUSH  A
    0EFB: 52 1A    MOV   A,[X+26]
    0EFD: 08       PUSH  A
    0EFE: 52 1B    MOV   A,[X+27]
    0F00: 08       PUSH  A
    0F01: 52 1C    MOV   A,[X+28]
    0F03: 08       PUSH  A
    0F04: 50 3F    MOV   A,0x3F
    0F06: 08       PUSH  A
    0F07: 50 80    MOV   A,0x80
    0F09: 08       PUSH  A
    0F0A: 50 00    MOV   A,0x0
    0F0C: 08       PUSH  A
    0F0D: 08       PUSH  A
    0F0E: 7C 18 6C LCALL 0x186C
    0F11: 18       POP   A
    0F12: 53 1D    MOV   [__r3],A
    0F14: 18       POP   A
    0F15: 53 1E    MOV   [__r2],A
    0F17: 18       POP   A
    0F18: 53 1F    MOV   [__r1],A
    0F1A: 18       POP   A
    0F1B: 38 FC    ADD   SP,0xFC
    0F1D: 08       PUSH  A
    0F1E: 51 1F    MOV   A,[__r1]
    0F20: 08       PUSH  A
    0F21: 51 1E    MOV   A,[__r2]
    0F23: 08       PUSH  A
    0F24: 51 1D    MOV   A,[__r3]
    0F26: 08       PUSH  A
    0F27: 52 00    MOV   A,[X+0]
    0F29: 08       PUSH  A
    0F2A: 52 01    MOV   A,[X+1]
    0F2C: 08       PUSH  A
    0F2D: 52 02    MOV   A,[X+2]
    0F2F: 08       PUSH  A
    0F30: 52 03    MOV   A,[X+3]
    0F32: 08       PUSH  A
    0F33: 7C 17 42 LCALL 0x1742
    0F36: 18       POP   A
    0F37: 54 0B    MOV   [X+11],A
    0F39: 18       POP   A
    0F3A: 54 0A    MOV   [X+10],A
    0F3C: 18       POP   A
    0F3D: 54 09    MOV   [X+9],A
    0F3F: 18       POP   A
    0F40: 54 08    MOV   [X+8],A
    0F42: 38 FC    ADD   SP,0xFC
(0325) 		}
(0326) 				
(0327) 		if (forward)
    0F44: 3D 14 00 CMP   [X+20],0x0
    0F47: A0 0F    JZ    0x0F57
(0328) 		{
(0329) 			// ccw
(0330) 			PRT1DR |=  0x08; // AIN1
    0F49: 43 04 08 OR    REG[0x4],0x8
(0331) 			PRT1DR &= ~0x02; // AIN2
    0F4C: 41 04 FD AND   REG[0x4],0xFD
(0332) 			
(0333) 			PRT1DR |=  0x20; // BIN1
    0F4F: 43 04 20 OR    REG[0x4],0x20
(0334) 			PRT1DR &= ~0x80; // BIN2
    0F52: 41 04 7F AND   REG[0x4],0x7F
(0335) 		}
    0F55: 80 0D    JMP   0x0F63
(0336) 		else 
(0337) 		{
(0338) 			//cw
(0339) 			PRT1DR &= ~0x08; // AIN1
    0F57: 41 04 F7 AND   REG[0x4],0xF7
(0340) 			PRT1DR |=  0x02; // AIN2
    0F5A: 43 04 02 OR    REG[0x4],0x2
(0341) 			
(0342) 			PRT1DR &= ~0x20; // BIN1
    0F5D: 41 04 DF AND   REG[0x4],0xDF
(0343) 			PRT1DR |=  0x80; // BIN2
    0F60: 43 04 80 OR    REG[0x4],0x80
(0344) 		}
(0345) 	
(0346) 		// Denormalize to Engine
(0347) 		motorLeft *= (MAX_POWER - MIN_POWER);
    0F63: 52 04    MOV   A,[X+4]
    0F65: 08       PUSH  A
    0F66: 52 05    MOV   A,[X+5]
    0F68: 08       PUSH  A
    0F69: 52 06    MOV   A,[X+6]
    0F6B: 08       PUSH  A
    0F6C: 52 07    MOV   A,[X+7]
    0F6E: 08       PUSH  A
    0F6F: 50 44    MOV   A,0x44
    0F71: 08       PUSH  A
    0F72: 50 7A    MOV   A,0x7A
    0F74: 08       PUSH  A
    0F75: 50 00    MOV   A,0x0
    0F77: 08       PUSH  A
    0F78: 08       PUSH  A
    0F79: 62 D0 00 MOV   REG[0xD0],0x0
    0F7C: 7C 17 42 LCALL 0x1742
    0F7F: 18       POP   A
    0F80: 54 07    MOV   [X+7],A
    0F82: 18       POP   A
    0F83: 54 06    MOV   [X+6],A
    0F85: 18       POP   A
    0F86: 54 05    MOV   [X+5],A
    0F88: 18       POP   A
    0F89: 54 04    MOV   [X+4],A
    0F8B: 38 FC    ADD   SP,0xFC
(0348) 		motorLeft += MIN_POWER;
    0F8D: 50 00    MOV   A,0x0
    0F8F: 08       PUSH  A
    0F90: 08       PUSH  A
    0F91: 08       PUSH  A
    0F92: 08       PUSH  A
    0F93: 52 04    MOV   A,[X+4]
    0F95: 08       PUSH  A
    0F96: 52 05    MOV   A,[X+5]
    0F98: 08       PUSH  A
    0F99: 52 06    MOV   A,[X+6]
    0F9B: 08       PUSH  A
    0F9C: 52 07    MOV   A,[X+7]
    0F9E: 08       PUSH  A
    0F9F: 7C 15 02 LCALL 0x1502
    0FA2: 18       POP   A
    0FA3: 54 07    MOV   [X+7],A
    0FA5: 18       POP   A
    0FA6: 54 06    MOV   [X+6],A
    0FA8: 18       POP   A
    0FA9: 54 05    MOV   [X+5],A
    0FAB: 18       POP   A
    0FAC: 54 04    MOV   [X+4],A
    0FAE: 38 FC    ADD   SP,0xFC
(0349) 		motorRight *= (MAX_POWER - MIN_POWER);
    0FB0: 52 08    MOV   A,[X+8]
    0FB2: 08       PUSH  A
    0FB3: 52 09    MOV   A,[X+9]
    0FB5: 08       PUSH  A
    0FB6: 52 0A    MOV   A,[X+10]
    0FB8: 08       PUSH  A
    0FB9: 52 0B    MOV   A,[X+11]
    0FBB: 08       PUSH  A
    0FBC: 50 44    MOV   A,0x44
    0FBE: 08       PUSH  A
    0FBF: 50 7A    MOV   A,0x7A
    0FC1: 08       PUSH  A
    0FC2: 50 00    MOV   A,0x0
    0FC4: 08       PUSH  A
    0FC5: 08       PUSH  A
    0FC6: 7C 17 42 LCALL 0x1742
    0FC9: 18       POP   A
    0FCA: 54 0B    MOV   [X+11],A
    0FCC: 18       POP   A
    0FCD: 54 0A    MOV   [X+10],A
    0FCF: 18       POP   A
    0FD0: 54 09    MOV   [X+9],A
    0FD2: 18       POP   A
    0FD3: 54 08    MOV   [X+8],A
    0FD5: 38 FC    ADD   SP,0xFC
(0350) 		motorRight += MIN_POWER;
    0FD7: 50 00    MOV   A,0x0
    0FD9: 08       PUSH  A
    0FDA: 08       PUSH  A
    0FDB: 08       PUSH  A
    0FDC: 08       PUSH  A
    0FDD: 52 08    MOV   A,[X+8]
    0FDF: 08       PUSH  A
    0FE0: 52 09    MOV   A,[X+9]
    0FE2: 08       PUSH  A
    0FE3: 52 0A    MOV   A,[X+10]
    0FE5: 08       PUSH  A
    0FE6: 52 0B    MOV   A,[X+11]
    0FE8: 08       PUSH  A
    0FE9: 7C 15 02 LCALL 0x1502
    0FEC: 18       POP   A
    0FED: 54 0B    MOV   [X+11],A
    0FEF: 18       POP   A
    0FF0: 54 0A    MOV   [X+10],A
    0FF2: 18       POP   A
    0FF3: 54 09    MOV   [X+9],A
    0FF5: 18       POP   A
    0FF6: 54 08    MOV   [X+8],A
    0FF8: 38 FC    ADD   SP,0xFC
(0351) 
(0352) 		PWM1_WritePulseWidth(motorLeft);
    0FFA: 50 47    MOV   A,0x47
    0FFC: 08       PUSH  A
    0FFD: 50 00    MOV   A,0x0
    0FFF: 08       PUSH  A
    1000: 08       PUSH  A
    1001: 08       PUSH  A
    1002: 52 04    MOV   A,[X+4]
    1004: 08       PUSH  A
    1005: 52 05    MOV   A,[X+5]
    1007: 08       PUSH  A
    1008: 52 06    MOV   A,[X+6]
    100A: 08       PUSH  A
    100B: 52 07    MOV   A,[X+7]
    100D: 08       PUSH  A
    100E: 7C 16 02 LCALL 0x1602
    1011: 38 F8    ADD   SP,0xF8
    1013: 39 FF    CMP   A,0xFF
    1015: A0 47    JZ    0x105D
    1017: 50 47    MOV   A,0x47
    1019: 08       PUSH  A
    101A: 50 00    MOV   A,0x0
    101C: 08       PUSH  A
    101D: 08       PUSH  A
    101E: 08       PUSH  A
    101F: 52 04    MOV   A,[X+4]
    1021: 08       PUSH  A
    1022: 52 05    MOV   A,[X+5]
    1024: 08       PUSH  A
    1025: 52 06    MOV   A,[X+6]
    1027: 08       PUSH  A
    1028: 52 07    MOV   A,[X+7]
    102A: 08       PUSH  A
    102B: 7C 18 6C LCALL 0x186C
    102E: 18       POP   A
    102F: 53 1D    MOV   [__r3],A
    1031: 18       POP   A
    1032: 53 1E    MOV   [__r2],A
    1034: 18       POP   A
    1035: 53 1F    MOV   [__r1],A
    1037: 18       POP   A
    1038: 38 FC    ADD   SP,0xFC
    103A: 08       PUSH  A
    103B: 51 1F    MOV   A,[__r1]
    103D: 08       PUSH  A
    103E: 51 1E    MOV   A,[__r2]
    1040: 08       PUSH  A
    1041: 51 1D    MOV   A,[__r3]
    1043: 08       PUSH  A
    1044: 7C 13 F1 LCALL 0x13F1
    1047: 18       POP   A
    1048: 53 1F    MOV   [__r1],A
    104A: 18       POP   A
    104B: 53 20    MOV   [__r0],A
    104D: 38 FE    ADD   SP,0xFE
    104F: 51 1F    MOV   A,[__r1]
    1051: 01 00    ADD   A,0x0
    1053: 54 20    MOV   [X+32],A
    1055: 51 20    MOV   A,[__r0]
    1057: 09 80    ADC   A,0x80
    1059: 54 1F    MOV   [X+31],A
    105B: 80 23    JMP   0x107F
    105D: 62 D0 00 MOV   REG[0xD0],0x0
    1060: 52 04    MOV   A,[X+4]
    1062: 08       PUSH  A
    1063: 52 05    MOV   A,[X+5]
    1065: 08       PUSH  A
    1066: 52 06    MOV   A,[X+6]
    1068: 08       PUSH  A
    1069: 52 07    MOV   A,[X+7]
    106B: 08       PUSH  A
    106C: 7C 13 F1 LCALL 0x13F1
    106F: 18       POP   A
    1070: 53 1F    MOV   [__r1],A
    1072: 18       POP   A
    1073: 53 20    MOV   [__r0],A
    1075: 38 FE    ADD   SP,0xFE
    1077: 51 1F    MOV   A,[__r1]
    1079: 54 20    MOV   [X+32],A
    107B: 51 20    MOV   A,[__r0]
    107D: 54 1F    MOV   [X+31],A
    107F: 10       PUSH  X
    1080: 52 1F    MOV   A,[X+31]
    1082: 08       PUSH  A
    1083: 52 20    MOV   A,[X+32]
    1085: 20       POP   X
    1086: 7C 06 25 LCALL _PWM1_WritePulseWidth
    1089: 20       POP   X
(0353) 		PWM2_WritePulseWidth(motorRight);
    108A: 50 47    MOV   A,0x47
    108C: 08       PUSH  A
    108D: 50 00    MOV   A,0x0
    108F: 08       PUSH  A
    1090: 08       PUSH  A
    1091: 08       PUSH  A
    1092: 52 08    MOV   A,[X+8]
    1094: 08       PUSH  A
    1095: 52 09    MOV   A,[X+9]
    1097: 08       PUSH  A
    1098: 52 0A    MOV   A,[X+10]
    109A: 08       PUSH  A
    109B: 52 0B    MOV   A,[X+11]
    109D: 08       PUSH  A
    109E: 62 D0 00 MOV   REG[0xD0],0x0
    10A1: 7C 16 02 LCALL 0x1602
    10A4: 38 F8    ADD   SP,0xF8
    10A6: 39 FF    CMP   A,0xFF
    10A8: A0 47    JZ    0x10F0
    10AA: 50 47    MOV   A,0x47
    10AC: 08       PUSH  A
    10AD: 50 00    MOV   A,0x0
    10AF: 08       PUSH  A
    10B0: 08       PUSH  A
    10B1: 08       PUSH  A
    10B2: 52 08    MOV   A,[X+8]
    10B4: 08       PUSH  A
    10B5: 52 09    MOV   A,[X+9]
    10B7: 08       PUSH  A
    10B8: 52 0A    MOV   A,[X+10]
    10BA: 08       PUSH  A
    10BB: 52 0B    MOV   A,[X+11]
    10BD: 08       PUSH  A
    10BE: 7C 18 6C LCALL 0x186C
    10C1: 18       POP   A
    10C2: 53 1D    MOV   [__r3],A
    10C4: 18       POP   A
    10C5: 53 1E    MOV   [__r2],A
    10C7: 18       POP   A
    10C8: 53 1F    MOV   [__r1],A
    10CA: 18       POP   A
    10CB: 38 FC    ADD   SP,0xFC
    10CD: 08       PUSH  A
    10CE: 51 1F    MOV   A,[__r1]
    10D0: 08       PUSH  A
    10D1: 51 1E    MOV   A,[__r2]
    10D3: 08       PUSH  A
    10D4: 51 1D    MOV   A,[__r3]
    10D6: 08       PUSH  A
    10D7: 7C 13 F1 LCALL 0x13F1
    10DA: 18       POP   A
    10DB: 53 1F    MOV   [__r1],A
    10DD: 18       POP   A
    10DE: 53 20    MOV   [__r0],A
    10E0: 38 FE    ADD   SP,0xFE
    10E2: 51 1F    MOV   A,[__r1]
    10E4: 01 00    ADD   A,0x0
    10E6: 54 22    MOV   [X+34],A
    10E8: 51 20    MOV   A,[__r0]
    10EA: 09 80    ADC   A,0x80
    10EC: 54 21    MOV   [X+33],A
    10EE: 80 23    JMP   0x1112
    10F0: 62 D0 00 MOV   REG[0xD0],0x0
    10F3: 52 08    MOV   A,[X+8]
    10F5: 08       PUSH  A
    10F6: 52 09    MOV   A,[X+9]
    10F8: 08       PUSH  A
    10F9: 52 0A    MOV   A,[X+10]
    10FB: 08       PUSH  A
    10FC: 52 0B    MOV   A,[X+11]
    10FE: 08       PUSH  A
    10FF: 7C 13 F1 LCALL 0x13F1
    1102: 18       POP   A
    1103: 53 1F    MOV   [__r1],A
    1105: 18       POP   A
    1106: 53 20    MOV   [__r0],A
    1108: 38 FE    ADD   SP,0xFE
    110A: 51 1F    MOV   A,[__r1]
    110C: 54 22    MOV   [X+34],A
    110E: 51 20    MOV   A,[__r0]
    1110: 54 21    MOV   [X+33],A
    1112: 10       PUSH  X
    1113: 52 21    MOV   A,[X+33]
    1115: 08       PUSH  A
    1116: 52 22    MOV   A,[X+34]
    1118: 20       POP   X
    1119: 7C 05 C5 LCALL _PWM2_WritePulseWidth
    111C: 20       POP   X
(0354) 
(0355) #if (DEBUG_LCD)
(0356) 		LCD_Position(0,7);
(0357) 		LCD_PrHexInt(motorLeft);
(0358) 		LCD_Position(1,7);
(0359) 		LCD_PrHexInt(motorRight);
(0360) 		
(0361) 		LCD_Position(0,12);
(0362) 		LCD_PrCString(forward ? "F" : "B");
(0363) #endif 	
(0364) 
(0365)    }
    111D: 8B E1    JMP   0x0CFF
    111F: 38 DD    ADD   SP,0xDD
    1121: 20       POP   X
    1122: 8F FF    JMP   0x1122
(0366) }
(0367) 
(0368) void Timer1CaptureISR(void)
(0369) {
_Timer1CaptureISR:
    1124: 71 C0    OR    F,0xC0
    1126: 08       PUSH  A
    1127: 5D D0    MOV   A,REG[0xD0]
    1129: 08       PUSH  A
    112A: 5D D3    MOV   A,REG[0xD3]
    112C: 08       PUSH  A
    112D: 5D D4    MOV   A,REG[0xD4]
    112F: 08       PUSH  A
    1130: 5D D5    MOV   A,REG[0xD5]
    1132: 08       PUSH  A
    1133: 62 D0 00 MOV   REG[0xD0],0x0
    1136: 51 20    MOV   A,[__r0]
    1138: 08       PUSH  A
    1139: 51 1F    MOV   A,[__r1]
    113B: 08       PUSH  A
    113C: 51 1E    MOV   A,[__r2]
    113E: 08       PUSH  A
    113F: 51 1D    MOV   A,[__r3]
    1141: 08       PUSH  A
    1142: 51 1C    MOV   A,[__r4]
    1144: 08       PUSH  A
    1145: 51 1B    MOV   A,[__r5]
    1147: 08       PUSH  A
    1148: 51 1A    MOV   A,[__r6]
    114A: 08       PUSH  A
    114B: 51 19    MOV   A,[__r7]
    114D: 08       PUSH  A
    114E: 51 18    MOV   A,[__r8]
    1150: 08       PUSH  A
    1151: 51 17    MOV   A,[__r9]
    1153: 08       PUSH  A
    1154: 51 16    MOV   A,[__r10]
    1156: 08       PUSH  A
    1157: 51 15    MOV   A,[__r11]
    1159: 08       PUSH  A
    115A: 51 14    MOV   A,[__rX]
    115C: 08       PUSH  A
    115D: 51 13    MOV   A,[__rY]
    115F: 08       PUSH  A
    1160: 51 12    MOV   A,[__rZ]
    1162: 08       PUSH  A
(0370)    if (FlagsAileron & FALLING_EDGE_AILERON)
    1163: 62 D0 00 MOV   REG[0xD0],0x0
    1166: 47 35 02 TST   [FlagsAileron],0x2
    1169: A0 49    JZ    0x11B3
(0371)    {
(0372)       // Read the count on negative edge
(0373)       CaptureNegEdgeAileron = Timer1_wReadCompareValue();
    116B: 10       PUSH  X
    116C: 7C 05 6A LCALL _Timer1_wReadCompareValue|_wTimer1_ReadCompareValue|wTimer1_ReadCompareValue|Timer1_wReadCompareValue
    116F: 62 D0 00 MOV   REG[0xD0],0x0
    1172: 5A 20    MOV   [__r0],X
    1174: 20       POP   X
    1175: 08       PUSH  A
    1176: 51 20    MOV   A,[__r0]
    1178: 62 D0 00 MOV   REG[0xD0],0x0
    117B: 53 2B    MOV   [CaptureNegEdgeAileron],A
    117D: 18       POP   A
    117E: 53 2C    MOV   [CaptureNegEdgeAileron+1],A
(0374) 
(0375)       // Change the capture to positive edge and clear the FALLING_EDGE flag
(0376)       Timer1_FUNC_LSB_REG &= ~0x80;
    1180: 71 10    OR    F,0x10
    1182: 41 20 7F AND   REG[0x20],0x7F
(0377)       FlagsAileron &= ~FALLING_EDGE_AILERON;
    1185: 70 CF    AND   F,0xCF
    1187: 62 D0 00 MOV   REG[0xD0],0x0
    118A: 26 35 FD AND   [FlagsAileron],0xFD
(0378) 
(0379)       // Calculate the pulswidth by finding difference between positive edge
(0380)       // and negative edge counts.  As both the numbers are unsigned numbers
(0381)       // the result will be correct even if there is an underflow in the counter
(0382)       // The result will be accurate as long as the total pulsewidth is less than
(0383)       // 65535 timer ticks.
(0384)       PulseWidthAileron = CapturePosEdgeAileron - CaptureNegEdgeAileron;
    118D: 62 D0 00 MOV   REG[0xD0],0x0
    1190: 51 22    MOV   A,[CapturePosEdgeAileron+1]
    1192: 62 D0 00 MOV   REG[0xD0],0x0
    1195: 12 2C    SUB   A,[CaptureNegEdgeAileron+1]
    1197: 62 D0 00 MOV   REG[0xD0],0x0
    119A: 53 24    MOV   [PulseWidthAileron+1],A
    119C: 62 D0 00 MOV   REG[0xD0],0x0
    119F: 51 21    MOV   A,[CapturePosEdgeAileron]
    11A1: 62 D0 00 MOV   REG[0xD0],0x0
    11A4: 1A 2B    SBB   A,[CaptureNegEdgeAileron]
    11A6: 62 D0 00 MOV   REG[0xD0],0x0
    11A9: 53 23    MOV   [PulseWidthAileron],A
(0385)       
(0386)       // Set the Data available flag
(0387)       FlagsAileron |= DATA_AVAILABLE_AILERON;
    11AB: 62 D0 00 MOV   REG[0xD0],0x0
    11AE: 2E 35 01 OR    [FlagsAileron],0x1
(0388)    }
    11B1: 80 23    JMP   0x11D5
(0389)    else
(0390)    {
(0391)       // Read the count on positive edge
(0392)       CapturePosEdgeAileron = Timer1_wReadCompareValue();
    11B3: 10       PUSH  X
    11B4: 7C 05 6A LCALL _Timer1_wReadCompareValue|_wTimer1_ReadCompareValue|wTimer1_ReadCompareValue|Timer1_wReadCompareValue
    11B7: 62 D0 00 MOV   REG[0xD0],0x0
    11BA: 5A 20    MOV   [__r0],X
    11BC: 20       POP   X
    11BD: 08       PUSH  A
    11BE: 51 20    MOV   A,[__r0]
    11C0: 62 D0 00 MOV   REG[0xD0],0x0
    11C3: 53 21    MOV   [CapturePosEdgeAileron],A
    11C5: 18       POP   A
    11C6: 53 22    MOV   [CapturePosEdgeAileron+1],A
(0393)       
(0394)       // Change the capture to negative edge and set flag
(0395)       Timer1_FUNC_LSB_REG |= 0x80;
    11C8: 71 10    OR    F,0x10
    11CA: 43 20 80 OR    REG[0x20],0x80
(0396)       FlagsAileron |= FALLING_EDGE_AILERON;
    11CD: 70 CF    AND   F,0xCF
    11CF: 62 D0 00 MOV   REG[0xD0],0x0
    11D2: 2E 35 02 OR    [FlagsAileron],0x2
(0397)    }
    11D5: 62 D0 00 MOV   REG[0xD0],0x0
    11D8: 18       POP   A
    11D9: 53 12    MOV   [__rZ],A
    11DB: 18       POP   A
    11DC: 53 13    MOV   [__rY],A
    11DE: 18       POP   A
    11DF: 53 14    MOV   [__rX],A
    11E1: 18       POP   A
    11E2: 53 15    MOV   [__r11],A
    11E4: 18       POP   A
    11E5: 53 16    MOV   [__r10],A
    11E7: 18       POP   A
    11E8: 53 17    MOV   [__r9],A
    11EA: 18       POP   A
    11EB: 53 18    MOV   [__r8],A
    11ED: 18       POP   A
    11EE: 53 19    MOV   [__r7],A
    11F0: 18       POP   A
    11F1: 53 1A    MOV   [__r6],A
    11F3: 18       POP   A
    11F4: 53 1B    MOV   [__r5],A
    11F6: 18       POP   A
    11F7: 53 1C    MOV   [__r4],A
    11F9: 18       POP   A
    11FA: 53 1D    MOV   [__r3],A
    11FC: 18       POP   A
    11FD: 53 1E    MOV   [__r2],A
    11FF: 18       POP   A
    1200: 53 1F    MOV   [__r1],A
    1202: 18       POP   A
    1203: 53 20    MOV   [__r0],A
    1205: 18       POP   A
    1206: 60 D5    MOV   REG[0xD5],A
    1208: 18       POP   A
    1209: 60 D4    MOV   REG[0xD4],A
    120B: 18       POP   A
    120C: 60 D3    MOV   REG[0xD3],A
    120E: 18       POP   A
    120F: 60 D0    MOV   REG[0xD0],A
    1211: 18       POP   A
    1212: 7E       RETI  
(0398) }
(0399) 
(0400) void Timer2CaptureISR(void)// new function for motorcontroll2
(0401) {
_Timer2CaptureISR:
    1213: 71 C0    OR    F,0xC0
    1215: 08       PUSH  A
    1216: 5D D0    MOV   A,REG[0xD0]
    1218: 08       PUSH  A
    1219: 5D D3    MOV   A,REG[0xD3]
    121B: 08       PUSH  A
    121C: 5D D4    MOV   A,REG[0xD4]
    121E: 08       PUSH  A
    121F: 5D D5    MOV   A,REG[0xD5]
    1221: 08       PUSH  A
    1222: 62 D0 00 MOV   REG[0xD0],0x0
    1225: 51 20    MOV   A,[__r0]
    1227: 08       PUSH  A
    1228: 51 1F    MOV   A,[__r1]
    122A: 08       PUSH  A
    122B: 51 1E    MOV   A,[__r2]
    122D: 08       PUSH  A
    122E: 51 1D    MOV   A,[__r3]
    1230: 08       PUSH  A
    1231: 51 1C    MOV   A,[__r4]
    1233: 08       PUSH  A
    1234: 51 1B    MOV   A,[__r5]
    1236: 08       PUSH  A
    1237: 51 1A    MOV   A,[__r6]
    1239: 08       PUSH  A
    123A: 51 19    MOV   A,[__r7]
    123C: 08       PUSH  A
    123D: 51 18    MOV   A,[__r8]
    123F: 08       PUSH  A
    1240: 51 17    MOV   A,[__r9]
    1242: 08       PUSH  A
    1243: 51 16    MOV   A,[__r10]
    1245: 08       PUSH  A
    1246: 51 15    MOV   A,[__r11]
    1248: 08       PUSH  A
    1249: 51 14    MOV   A,[__rX]
    124B: 08       PUSH  A
    124C: 51 13    MOV   A,[__rY]
    124E: 08       PUSH  A
    124F: 51 12    MOV   A,[__rZ]
    1251: 08       PUSH  A
(0402) 	if(FlagsElevator & FALLING_EDGE_ELEVATOR)//
    1252: 62 D0 00 MOV   REG[0xD0],0x0
    1255: 47 34 02 TST   [FlagsElevator],0x2
    1258: A0 49    JZ    0x12A2
(0403) 	{
(0404) 		// Read the count on negative edge
(0405) 		CaptureNegEdgeElevator = Timer2_wReadCompareValue();
    125A: 10       PUSH  X
    125B: 7C 05 06 LCALL _wTimer2_ReadCompareValue|Timer2_wReadCompareValue|_Timer2_wReadCompareValue
    125E: 62 D0 00 MOV   REG[0xD0],0x0
    1261: 5A 20    MOV   [__r0],X
    1263: 20       POP   X
    1264: 08       PUSH  A
    1265: 51 20    MOV   A,[__r0]
    1267: 62 D0 00 MOV   REG[0xD0],0x0
    126A: 53 2F    MOV   [CaptureNegEdgeElevator],A
    126C: 18       POP   A
    126D: 53 30    MOV   [CaptureNegEdgeElevator+1],A
(0406) 
(0407) 		// Change the capture to positive edge and clear the FALLING_EDGE flag
(0408) 		Timer2_FUNC_LSB_REG &= ~0x80;
    126F: 71 10    OR    F,0x10
    1271: 41 28 7F AND   REG[0x28],0x7F
(0409) 		FlagsElevator &= ~FALLING_EDGE_ELEVATOR;// clearing faling edge bit in flags
    1274: 70 CF    AND   F,0xCF
    1276: 62 D0 00 MOV   REG[0xD0],0x0
    1279: 26 34 FD AND   [FlagsElevator],0xFD
(0410) 	
(0411) 
(0412) 		// Calculate the pulswidth by finding difference between positive edge
(0413) 		// and negative edge counts.  As both the numbers are unsigned numbers
(0414) 		// the result will be correct even if there is an underflow in the counter
(0415) 		// The result will be accurate as long as the total pulsewidth is less than
(0416) 		// 65535 timer ticks.
(0417) 		PulseWidthElevator = CapturePosEdgeElevator - CaptureNegEdgeElevator;
    127C: 62 D0 00 MOV   REG[0xD0],0x0
    127F: 51 32    MOV   A,[CapturePosEdgeElevator+1]
    1281: 62 D0 00 MOV   REG[0xD0],0x0
    1284: 12 30    SUB   A,[CaptureNegEdgeElevator+1]
    1286: 62 D0 00 MOV   REG[0xD0],0x0
    1289: 53 2E    MOV   [PulseWidthElevator+1],A
    128B: 62 D0 00 MOV   REG[0xD0],0x0
    128E: 51 31    MOV   A,[CapturePosEdgeElevator]
    1290: 62 D0 00 MOV   REG[0xD0],0x0
    1293: 1A 2F    SBB   A,[CaptureNegEdgeElevator]
    1295: 62 D0 00 MOV   REG[0xD0],0x0
    1298: 53 2D    MOV   [PulseWidthElevator],A
(0418) 
(0419) 		// Set the Data available flag
(0420) 		FlagsElevator |= DATA_AVAILABLE_ELEVATOR; // BEN: set the correct bit on or off
    129A: 62 D0 00 MOV   REG[0xD0],0x0
    129D: 2E 34 01 OR    [FlagsElevator],0x1
(0421) 	}
    12A0: 80 23    JMP   0x12C4
(0422) 	else
(0423) 	{
(0424) 		// Read the count on positive edge
(0425) 		CapturePosEdgeElevator = Timer2_wReadCompareValue();
    12A2: 10       PUSH  X
    12A3: 7C 05 06 LCALL _wTimer2_ReadCompareValue|Timer2_wReadCompareValue|_Timer2_wReadCompareValue
    12A6: 62 D0 00 MOV   REG[0xD0],0x0
    12A9: 5A 20    MOV   [__r0],X
    12AB: 20       POP   X
    12AC: 08       PUSH  A
    12AD: 51 20    MOV   A,[__r0]
    12AF: 62 D0 00 MOV   REG[0xD0],0x0
    12B2: 53 31    MOV   [CapturePosEdgeElevator],A
    12B4: 18       POP   A
    12B5: 53 32    MOV   [CapturePosEdgeElevator+1],A
(0426) 
(0427) 		// Change the capture to negative edge and set flag
(0428) 		Timer2_FUNC_LSB_REG |= 0x80;
    12B7: 71 10    OR    F,0x10
    12B9: 43 28 80 OR    REG[0x28],0x80
(0429) 		FlagsElevator |= FALLING_EDGE_ELEVATOR;
    12BC: 70 CF    AND   F,0xCF
    12BE: 62 D0 00 MOV   REG[0xD0],0x0
    12C1: 2E 34 02 OR    [FlagsElevator],0x2
(0430) 	}
    12C4: 62 D0 00 MOV   REG[0xD0],0x0
    12C7: 18       POP   A
    12C8: 53 12    MOV   [__rZ],A
    12CA: 18       POP   A
    12CB: 53 13    MOV   [__rY],A
    12CD: 18       POP   A
    12CE: 53 14    MOV   [__rX],A
    12D0: 18       POP   A
    12D1: 53 15    MOV   [__r11],A
    12D3: 18       POP   A
    12D4: 53 16    MOV   [__r10],A
    12D6: 18       POP   A
    12D7: 53 17    MOV   [__r9],A
    12D9: 18       POP   A
    12DA: 53 18    MOV   [__r8],A
    12DC: 18       POP   A
    12DD: 53 19    MOV   [__r7],A
    12DF: 18       POP   A
    12E0: 53 1A    MOV   [__r6],A
    12E2: 18       POP   A
    12E3: 53 1B    MOV   [__r5],A
    12E5: 18       POP   A
    12E6: 53 1C    MOV   [__r4],A
    12E8: 18       POP   A
    12E9: 53 1D    MOV   [__r3],A
    12EB: 18       POP   A
    12EC: 53 1E    MOV   [__r2],A
    12EE: 18       POP   A
    12EF: 53 1F    MOV   [__r1],A
    12F1: 18       POP   A
    12F2: 53 20    MOV   [__r0],A
    12F4: 18       POP   A
    12F5: 60 D5    MOV   REG[0xD5],A
    12F7: 18       POP   A
    12F8: 60 D4    MOV   REG[0xD4],A
    12FA: 18       POP   A
    12FB: 60 D3    MOV   REG[0xD3],A
    12FD: 18       POP   A
    12FE: 60 D0    MOV   REG[0xD0],A
    1300: 18       POP   A
    1301: 7E       RETI  
(0431) }
(0432) 
(0433) void Timer3CaptureISR(void)
(0434) {	
_Timer3CaptureISR:
    1302: 71 C0    OR    F,0xC0
    1304: 08       PUSH  A
    1305: 5D D0    MOV   A,REG[0xD0]
    1307: 08       PUSH  A
    1308: 5D D3    MOV   A,REG[0xD3]
    130A: 08       PUSH  A
    130B: 5D D4    MOV   A,REG[0xD4]
    130D: 08       PUSH  A
    130E: 5D D5    MOV   A,REG[0xD5]
    1310: 08       PUSH  A
    1311: 62 D0 00 MOV   REG[0xD0],0x0
    1314: 51 20    MOV   A,[__r0]
    1316: 08       PUSH  A
    1317: 51 1F    MOV   A,[__r1]
    1319: 08       PUSH  A
    131A: 51 1E    MOV   A,[__r2]
    131C: 08       PUSH  A
    131D: 51 1D    MOV   A,[__r3]
    131F: 08       PUSH  A
    1320: 51 1C    MOV   A,[__r4]
    1322: 08       PUSH  A
    1323: 51 1B    MOV   A,[__r5]
    1325: 08       PUSH  A
    1326: 51 1A    MOV   A,[__r6]
    1328: 08       PUSH  A
    1329: 51 19    MOV   A,[__r7]
    132B: 08       PUSH  A
    132C: 51 18    MOV   A,[__r8]
    132E: 08       PUSH  A
    132F: 51 17    MOV   A,[__r9]
    1331: 08       PUSH  A
    1332: 51 16    MOV   A,[__r10]
    1334: 08       PUSH  A
    1335: 51 15    MOV   A,[__r11]
    1337: 08       PUSH  A
    1338: 51 14    MOV   A,[__rX]
    133A: 08       PUSH  A
    133B: 51 13    MOV   A,[__rY]
    133D: 08       PUSH  A
    133E: 51 12    MOV   A,[__rZ]
    1340: 08       PUSH  A
(0435)    if(FlagUltrasoon & FALLING_EDGE_ULTRASOON)
    1341: 62 D0 00 MOV   REG[0xD0],0x0
    1344: 47 33 02 TST   [FlagUltrasoon],0x2
    1347: A0 49    JZ    0x1391
(0436)    {
(0437)       // Read the count on negative edge
(0438)       CaptureNegEdgeUltrasoon = Timer3_wReadCompareValue();
    1349: 10       PUSH  X
    134A: 7C 04 A2 LCALL _wTimer3_ReadCompareValue|Timer3_wReadCompareValue|_Timer3_wReadCompareValue
    134D: 62 D0 00 MOV   REG[0xD0],0x0
    1350: 5A 20    MOV   [__r0],X
    1352: 20       POP   X
    1353: 08       PUSH  A
    1354: 51 20    MOV   A,[__r0]
    1356: 62 D0 00 MOV   REG[0xD0],0x0
    1359: 53 27    MOV   [CaptureNegEdgeUltrasoon],A
    135B: 18       POP   A
    135C: 53 28    MOV   [CaptureNegEdgeUltrasoon+1],A
(0439) 
(0440)       // Change the capture to positive edge and clear the FALLING_EDGE flag
(0441)       Timer3_FUNC_LSB_REG &= ~0x80;
    135E: 71 10    OR    F,0x10
    1360: 41 30 7F AND   REG[0x30],0x7F
(0442)       FlagUltrasoon &= ~FALLING_EDGE_ULTRASOON;
    1363: 70 CF    AND   F,0xCF
    1365: 62 D0 00 MOV   REG[0xD0],0x0
    1368: 26 33 FD AND   [FlagUltrasoon],0xFD
(0443) 
(0444)       // Calculate the pulswidth by finding difference between positive edge
(0445)       // and negative edge counts.  As both the numbers are unsigned numbers
(0446)       // the result will be correct even if there is an underflow in the counter
(0447)       // The result will be accurate as long as the total pulsewidth is less than
(0448)       // 65535 timer ticks.
(0449)       PulseWidthUltrasoon = CapturePosEdgeUltrasoon - CaptureNegEdgeUltrasoon;
    136B: 62 D0 00 MOV   REG[0xD0],0x0
    136E: 51 2A    MOV   A,[CapturePosEdgeUltrasoon+1]
    1370: 62 D0 00 MOV   REG[0xD0],0x0
    1373: 12 28    SUB   A,[CaptureNegEdgeUltrasoon+1]
    1375: 62 D0 00 MOV   REG[0xD0],0x0
    1378: 53 26    MOV   [PulseWidthUltrasoon+1],A
    137A: 62 D0 00 MOV   REG[0xD0],0x0
    137D: 51 29    MOV   A,[CapturePosEdgeUltrasoon]
    137F: 62 D0 00 MOV   REG[0xD0],0x0
    1382: 1A 27    SBB   A,[CaptureNegEdgeUltrasoon]
    1384: 62 D0 00 MOV   REG[0xD0],0x0
    1387: 53 25    MOV   [PulseWidthUltrasoon],A
(0450) 
(0451)       // Set the Data available flag
(0452)       FlagUltrasoon |= DATA_AVAILABLE_ULTRASOON;
    1389: 62 D0 00 MOV   REG[0xD0],0x0
    138C: 2E 33 01 OR    [FlagUltrasoon],0x1
(0453)    }
    138F: 80 23    JMP   0x13B3
(0454)    else
(0455)    {
(0456)       // Read the count on positive edge
(0457)       CapturePosEdgeUltrasoon = Timer3_wReadCompareValue();
    1391: 10       PUSH  X
    1392: 7C 04 A2 LCALL _wTimer3_ReadCompareValue|Timer3_wReadCompareValue|_Timer3_wReadCompareValue
    1395: 62 D0 00 MOV   REG[0xD0],0x0
    1398: 5A 20    MOV   [__r0],X
    139A: 20       POP   X
    139B: 08       PUSH  A
    139C: 51 20    MOV   A,[__r0]
    139E: 62 D0 00 MOV   REG[0xD0],0x0
    13A1: 53 29    MOV   [CapturePosEdgeUltrasoon],A
    13A3: 18       POP   A
    13A4: 53 2A    MOV   [CapturePosEdgeUltrasoon+1],A
(0458)       
(0459)       // Change the capture to negative edge and set flag
(0460)       Timer3_FUNC_LSB_REG |= 0x80;
    13A6: 71 10    OR    F,0x10
    13A8: 43 30 80 OR    REG[0x30],0x80
(0461)       FlagUltrasoon |= FALLING_EDGE_ULTRASOON;
    13AB: 70 CF    AND   F,0xCF
    13AD: 62 D0 00 MOV   REG[0xD0],0x0
    13B0: 2E 33 02 OR    [FlagUltrasoon],0x2
(0462)    }
    13B3: 62 D0 00 MOV   REG[0xD0],0x0
(0463) }
(0464) 
(0465) 
    13B6: 18       POP   A
    13B7: 53 12    MOV   [__rZ],A
    13B9: 18       POP   A
    13BA: 53 13    MOV   [__rY],A
    13BC: 18       POP   A
    13BD: 53 14    MOV   [__rX],A
    13BF: 18       POP   A
    13C0: 53 15    MOV   [__r11],A
    13C2: 18       POP   A
    13C3: 53 16    MOV   [__r10],A
    13C5: 18       POP   A
    13C6: 53 17    MOV   [__r9],A
    13C8: 18       POP   A
    13C9: 53 18    MOV   [__r8],A
    13CB: 18       POP   A
    13CC: 53 19    MOV   [__r7],A
    13CE: 18       POP   A
    13CF: 53 1A    MOV   [__r6],A
    13D1: 18       POP   A
    13D2: 53 1B    MOV   [__r5],A
    13D4: 18       POP   A
    13D5: 53 1C    MOV   [__r4],A
    13D7: 18       POP   A
    13D8: 53 1D    MOV   [__r3],A
    13DA: 18       POP   A
    13DB: 53 1E    MOV   [__r2],A
    13DD: 18       POP   A
    13DE: 53 1F    MOV   [__r1],A
    13E0: 18       POP   A
    13E1: 53 20    MOV   [__r0],A
    13E3: 18       POP   A
    13E4: 60 D5    MOV   REG[0xD5],A
    13E6: 18       POP   A
    13E7: 60 D4    MOV   REG[0xD4],A
    13E9: 18       POP   A
    13EA: 60 D3    MOV   REG[0xD3],A
    13EC: 18       POP   A
    13ED: 60 D0    MOV   REG[0xD0],A
    13EF: 18       POP   A
    13F0: 7E       RETI  
_fabsfLMM:
    1915: 62 D0 00 MOV   REG[0xD0],0x0
_fabsf:
    1918: 10       PUSH  X
    1919: 4F       MOV   X,SP
    191A: 52 FC    MOV   A,[X-4]
    191C: 53 1D    MOV   [__r3],A
    191E: 52 FB    MOV   A,[X-5]
    1920: 53 1E    MOV   [__r2],A
    1922: 52 FA    MOV   A,[X-6]
    1924: 53 1F    MOV   [__r1],A
    1926: 52 F9    MOV   A,[X-7]
    1928: 21 7F    AND   A,0x7F
    192A: 53 20    MOV   [__r0],A
    192C: 20       POP   X
    192D: 7F       RET   
