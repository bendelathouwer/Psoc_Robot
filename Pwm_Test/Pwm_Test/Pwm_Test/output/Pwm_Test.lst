FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
                                        (0149)     // call	void_handler
0020: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
0024: 7D 03 AD LJMP  _PWM_ISR           (0153)     ljmp	_PWM_ISR
0027: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
                                        (0157)     // call	void_handler
0028: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 03 AE LJMP  _PWM2_ISR          (0161)     ljmp	_PWM2_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [0xF8],0x0         (0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [0xF9],0x0         (0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 03 4B LCALL 0x034B             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 02    MOV   A,0x2              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 44    MOV   X,0x44             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 01    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 01    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 01    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 00    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 01    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 01 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 00    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 00    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 01    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 01 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 00    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
0129: 70 EF    AND   F,0xEF             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
                                        (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012B: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
012E: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0130: 62 E0 00 MOV   REG[0xE0],0x0      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0133: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0136: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
0138: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013B: 7C 04 EA LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
013E: 8F FF    JMP   0x013E             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0140: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0142: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
0246: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_pwm_test_Bank1
                                        (0019) export LoadConfigTBL_pwm_test_Bank0
                                        (0020) export LoadConfigTBL_pwm_test_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_pwm_test_Bank0:
                                        (0023) ;  Instance name PWM, User Module PWM16
                                        (0024) ;       Instance name PWM, Block Name PWM16_LSB(DBB00)
                                        (0025) 	db		23h, 00h		;PWM_CONTROL_LSB_REG(DBB00CR0)
                                        (0026) 	db		21h, e7h		;PWM_PERIOD_LSB_REG(DBB00DR1)
                                        (0027) 	db		22h, 00h		;PWM_COMPARE_LSB_REG(DBB00DR2)
                                        (0028) ;       Instance name PWM, Block Name PWM16_MSB(DBB01)
                                        (0029) 	db		27h, 00h		;PWM_CONTROL_MSB_REG(DBB01CR0)
                                        (0030) 	db		25h, 03h		;PWM_PERIOD_MSB_REG(DBB01DR1)
                                        (0031) 	db		26h, 00h		;PWM_COMPARE_MSB_REG(DBB01DR2)
                                        (0032) ;  Instance name PWM2, User Module PWM16
                                        (0033) ;       Instance name PWM2, Block Name PWM16_LSB(DCB02)
                                        (0034) 	db		2bh, 00h		;PWM2_CONTROL_LSB_REG(DCB02CR0)
                                        (0035) 	db		29h, e7h		;PWM2_PERIOD_LSB_REG(DCB02DR1)
                                        (0036) 	db		2ah, 00h		;PWM2_COMPARE_LSB_REG(DCB02DR2)
                                        (0037) ;       Instance name PWM2, Block Name PWM16_MSB(DCB03)
                                        (0038) 	db		2fh, 00h		;PWM2_CONTROL_MSB_REG(DCB03CR0)
                                        (0039) 	db		2dh, 03h		;PWM2_PERIOD_MSB_REG(DCB03DR1)
                                        (0040) 	db		2eh, 00h		;PWM2_COMPARE_MSB_REG(DCB03DR2)
                                        (0041) ;  Global Register values Bank 0
                                        (0042) 	db		60h, 28h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0043) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0044) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0045) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0046) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0047) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0048) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0049) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0050) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0051) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0052) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0053) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0054) 	db		b5h, 22h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0055) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0056) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0057) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0058) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0059) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0060) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0061) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0062) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0063) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0064) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0065) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0066) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0067) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0068) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0069) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0070) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0071) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0072) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0073) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0074) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0075) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0076) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0077) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0078) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0079) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0080) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0081) 	db		ffh
                                        (0082) LoadConfigTBL_pwm_test_Bank1:
                                        (0083) ;  Instance name PWM, User Module PWM16
                                        (0084) ;       Instance name PWM, Block Name PWM16_LSB(DBB00)
                                        (0085) 	db		20h, 11h		;PWM_FUNC_LSB_REG(DBB00FN)
                                        (0086) 	db		21h, 15h		;PWM_INPUT_LSB_REG(DBB00IN)
                                        (0087) 	db		22h, 40h		;PWM_OUTPUT_LSB_REG(DBB00OU)
                                        (0088) ;       Instance name PWM, Block Name PWM16_MSB(DBB01)
                                        (0089) 	db		24h, 31h		;PWM_FUNC_MSB_REG(DBB01FN)
                                        (0090) 	db		25h, 35h		;PWM_INPUT_MSB_REG(DBB01IN)
                                        (0091) 	db		26h, 44h		;PWM_OUTPUT_MSB_REG(DBB01OU)
                                        (0092) ;  Instance name PWM2, User Module PWM16
                                        (0093) ;       Instance name PWM2, Block Name PWM16_LSB(DCB02)
                                        (0094) 	db		28h, 11h		;PWM2_FUNC_LSB_REG(DCB02FN)
                                        (0095) 	db		29h, 15h		;PWM2_INPUT_LSB_REG(DCB02IN)
                                        (0096) 	db		2ah, 40h		;PWM2_OUTPUT_LSB_REG(DCB02OU)
                                        (0097) ;       Instance name PWM2, Block Name PWM16_MSB(DCB03)
                                        (0098) 	db		2ch, 31h		;PWM2_FUNC_MSB_REG(DCB03FN)
                                        (0099) 	db		2dh, 35h		;PWM2_INPUT_MSB_REG(DCB03IN)
                                        (0100) 	db		2eh, 45h		;PWM2_OUTPUT_MSB_REG(DCB03OU)
                                        (0101) ;  Global Register values Bank 1
                                        (0102) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0103) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0104) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0105) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0106) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0107) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0108) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0109) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0110) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0111) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0112) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0113) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0114) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0115) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0116) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0117) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0118) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0119) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0120) 	db		ffh
                                        (0121) AREA psoc_config(rom, rel)
                                        (0122) LoadConfigTBL_pwm_test_Ordered:
                                        (0123) ;  Ordered Global Register values
                                        (0124) 	M8C_SetBank0
0248: 62 00 00 MOV   REG[0x0],0x0       (0125) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
024B: 71 10    OR    F,0x10             
                                        (0126) 	M8C_SetBank1
024D: 62 00 30 MOV   REG[0x0],0x30      (0127) 	mov	reg[00h], 30h		; Port_0_DriveMode_0 register (PRT0DM0)
0250: 62 01 CF MOV   REG[0x1],0xCF      (0128) 	mov	reg[01h], cfh		; Port_0_DriveMode_1 register (PRT0DM1)
0253: 70 EF    AND   F,0xEF             
                                        (0129) 	M8C_SetBank0
0255: 62 03 CF MOV   REG[0x3],0xCF      (0130) 	mov	reg[03h], cfh		; Port_0_DriveMode_2 register (PRT0DM2)
0258: 62 02 30 MOV   REG[0x2],0x30      (0131) 	mov	reg[02h], 30h		; Port_0_GlobalSelect register (PRT0GS)
025B: 71 10    OR    F,0x10             
                                        (0132) 	M8C_SetBank1
025D: 62 02 00 MOV   REG[0x2],0x0       (0133) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0260: 62 03 00 MOV   REG[0x3],0x0       (0134) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0263: 70 EF    AND   F,0xEF             
                                        (0135) 	M8C_SetBank0
0265: 62 01 00 MOV   REG[0x1],0x0       (0136) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0268: 62 04 00 MOV   REG[0x4],0x0       (0137) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
026B: 71 10    OR    F,0x10             
                                        (0138) 	M8C_SetBank1
026D: 62 04 FF MOV   REG[0x4],0xFF      (0139) 	mov	reg[04h], ffh		; Port_1_DriveMode_0 register (PRT1DM0)
0270: 62 05 00 MOV   REG[0x5],0x0       (0140) 	mov	reg[05h], 00h		; Port_1_DriveMode_1 register (PRT1DM1)
0273: 70 EF    AND   F,0xEF             
                                        (0141) 	M8C_SetBank0
0275: 62 07 00 MOV   REG[0x7],0x0       (0142) 	mov	reg[07h], 00h		; Port_1_DriveMode_2 register (PRT1DM2)
0278: 62 06 00 MOV   REG[0x6],0x0       (0143) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
027B: 71 10    OR    F,0x10             
                                        (0144) 	M8C_SetBank1
027D: 62 06 00 MOV   REG[0x6],0x0       (0145) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0280: 62 07 00 MOV   REG[0x7],0x0       (0146) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0283: 70 EF    AND   F,0xEF             
                                        (0147) 	M8C_SetBank0
0285: 62 05 00 MOV   REG[0x5],0x0       (0148) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0288: 62 08 00 MOV   REG[0x8],0x0       (0149) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
028B: 71 10    OR    F,0x10             
                                        (0150) 	M8C_SetBank1
028D: 62 08 A5 MOV   REG[0x8],0xA5      (0151) 	mov	reg[08h], a5h		; Port_2_DriveMode_0 register (PRT2DM0)
0290: 62 09 5A MOV   REG[0x9],0x5A      (0152) 	mov	reg[09h], 5ah		; Port_2_DriveMode_1 register (PRT2DM1)
0293: 70 EF    AND   F,0xEF             
                                        (0153) 	M8C_SetBank0
0295: 62 0B 5A MOV   REG[0xB],0x5A      (0154) 	mov	reg[0bh], 5ah		; Port_2_DriveMode_2 register (PRT2DM2)
0298: 62 0A 00 MOV   REG[0xA],0x0       (0155) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
029B: 71 10    OR    F,0x10             
                                        (0156) 	M8C_SetBank1
029D: 62 0A 00 MOV   REG[0xA],0x0       (0157) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
02A0: 62 0B 00 MOV   REG[0xB],0x0       (0158) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
02A3: 70 EF    AND   F,0xEF             
                                        (0159) 	M8C_SetBank0
02A5: 62 09 00 MOV   REG[0x9],0x0       (0160) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
02A8: 62 0C 00 MOV   REG[0xC],0x0       (0161) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
02AB: 71 10    OR    F,0x10             
                                        (0162) 	M8C_SetBank1
02AD: 62 0C 00 MOV   REG[0xC],0x0       (0163) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
02B0: 62 0D 00 MOV   REG[0xD],0x0       (0164) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
02B3: 70 EF    AND   F,0xEF             
                                        (0165) 	M8C_SetBank0
02B5: 62 0F 00 MOV   REG[0xF],0x0       (0166) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
02B8: 62 0E 00 MOV   REG[0xE],0x0       (0167) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
02BB: 71 10    OR    F,0x10             
                                        (0168) 	M8C_SetBank1
02BD: 62 0E 00 MOV   REG[0xE],0x0       (0169) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
02C0: 62 0F 00 MOV   REG[0xF],0x0       (0170) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
02C3: 70 EF    AND   F,0xEF             
                                        (0171) 	M8C_SetBank0
02C5: 62 0D 00 MOV   REG[0xD],0x0       (0172) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
02C8: 62 10 00 MOV   REG[0x10],0x0      (0173) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
02CB: 71 10    OR    F,0x10             
                                        (0174) 	M8C_SetBank1
02CD: 62 10 00 MOV   REG[0x10],0x0      (0175) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
02D0: 62 11 00 MOV   REG[0x11],0x0      (0176) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
02D3: 70 EF    AND   F,0xEF             
                                        (0177) 	M8C_SetBank0
02D5: 62 13 00 MOV   REG[0x13],0x0      (0178) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
02D8: 62 12 00 MOV   REG[0x12],0x0      (0179) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
02DB: 71 10    OR    F,0x10             
                                        (0180) 	M8C_SetBank1
02DD: 62 12 00 MOV   REG[0x12],0x0      (0181) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
02E0: 62 13 00 MOV   REG[0x13],0x0      (0182) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
02E3: 70 EF    AND   F,0xEF             
                                        (0183) 	M8C_SetBank0
02E5: 62 11 00 MOV   REG[0x11],0x0      (0184) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
02E8: 62 14 00 MOV   REG[0x14],0x0      (0185) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
02EB: 71 10    OR    F,0x10             
                                        (0186) 	M8C_SetBank1
02ED: 62 14 00 MOV   REG[0x14],0x0      (0187) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
02F0: 62 15 00 MOV   REG[0x15],0x0      (0188) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
02F3: 70 EF    AND   F,0xEF             
                                        (0189) 	M8C_SetBank0
02F5: 62 17 00 MOV   REG[0x17],0x0      (0190) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
02F8: 62 16 00 MOV   REG[0x16],0x0      (0191) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
02FB: 71 10    OR    F,0x10             
                                        (0192) 	M8C_SetBank1
02FD: 62 16 00 MOV   REG[0x16],0x0      (0193) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0300: 62 17 00 MOV   REG[0x17],0x0      (0194) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0303: 70 EF    AND   F,0xEF             
                                        (0195) 	M8C_SetBank0
0305: 62 15 00 MOV   REG[0x15],0x0      (0196) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0308: 62 18 00 MOV   REG[0x18],0x0      (0197) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
030B: 71 10    OR    F,0x10             
                                        (0198) 	M8C_SetBank1
030D: 62 18 00 MOV   REG[0x18],0x0      (0199) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
0310: 62 19 00 MOV   REG[0x19],0x0      (0200) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
0313: 70 EF    AND   F,0xEF             
                                        (0201) 	M8C_SetBank0
0315: 62 1B 00 MOV   REG[0x1B],0x0      (0202) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
0318: 62 1A 00 MOV   REG[0x1A],0x0      (0203) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
031B: 71 10    OR    F,0x10             
                                        (0204) 	M8C_SetBank1
031D: 62 1A 00 MOV   REG[0x1A],0x0      (0205) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
0320: 62 1B 00 MOV   REG[0x1B],0x0      (0206) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
0323: 70 EF    AND   F,0xEF             
                                        (0207) 	M8C_SetBank0
0325: 62 19 00 MOV   REG[0x19],0x0      (0208) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0328: 62 1C 00 MOV   REG[0x1C],0x0      (0209) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
032B: 71 10    OR    F,0x10             
                                        (0210) 	M8C_SetBank1
032D: 62 1C 00 MOV   REG[0x1C],0x0      (0211) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0330: 62 1D 00 MOV   REG[0x1D],0x0      (0212) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
0333: 70 EF    AND   F,0xEF             
                                        (0213) 	M8C_SetBank0
0335: 62 1F 00 MOV   REG[0x1F],0x0      (0214) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0338: 62 1E 00 MOV   REG[0x1E],0x0      (0215) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
033B: 71 10    OR    F,0x10             
                                        (0216) 	M8C_SetBank1
033D: 62 1E 00 MOV   REG[0x1E],0x0      (0217) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
0340: 62 1F 00 MOV   REG[0x1F],0x0      (0218) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
0343: 70 EF    AND   F,0xEF             
                                        (0219) 	M8C_SetBank0
0345: 62 1D 00 MOV   REG[0x1D],0x0      (0220) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0348: 70 EF    AND   F,0xEF             
                                        (0221) 	M8C_SetBank0
034A: 7F       RET                      (0222) 	ret
                                        (0223) 
                                        (0224) 
                                        (0225) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_pwm_test
                                        (0026) export _LoadConfig_pwm_test
                                        (0027) 
                                        (0028) export NO_SHADOW
                                        (0029) export _NO_SHADOW
                                        (0030) 
                                        (0031) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0032) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0033) 
                                        (0034) AREA psoc_config(rom, rel)
                                        (0035) 
                                        (0036) ;---------------------------------------------------------------------------
                                        (0037) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0038) ;                  parameters handled by boot code, like CPU speed). This
                                        (0039) ;                  function can be called from user code, but typically it
                                        (0040) ;                  is only called from boot.
                                        (0041) ;
                                        (0042) ;       INPUTS: None.
                                        (0043) ;      RETURNS: Nothing.
                                        (0044) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0045) ;               In the large memory model currently only the page
                                        (0046) ;               pointer registers listed below are modified.  This does
                                        (0047) ;               not guarantee that in future implementations of this
                                        (0048) ;               function other page pointer registers will not be
                                        (0049) ;               modified.
                                        (0050) ;          
                                        (0051) ;               Page Pointer Registers Modified: 
                                        (0052) ;               CUR_PP
                                        (0053) ;
                                        (0054) _LoadConfigInit:
                                        (0055)  LoadConfigInit:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0057)     
034B: 7C 03 52 LCALL 0x0352             (0058) 	lcall	LoadConfig_pwm_test
034E: 7C 02 46 LCALL 0x0246             (0059) 	lcall	LoadConfigTBL_pwm_test_Ordered
                                        (0060) 
                                        (0061) 
                                        (0062)     RAM_EPILOGUE RAM_USE_CLASS_4
0351: 7F       RET                      (0063)     ret
                                        (0064) 
                                        (0065) ;---------------------------------------------------------------------------
                                        (0066) ; Load Configuration pwm_test
                                        (0067) ;
                                        (0068) ;    Load configuration registers for pwm_test.
                                        (0069) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0070) ;
                                        (0071) ;       INPUTS: None.
                                        (0072) ;      RETURNS: Nothing.
                                        (0073) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0074) ;               modified as may the Page Pointer registers!
                                        (0075) ;               In the large memory model currently only the page
                                        (0076) ;               pointer registers listed below are modified.  This does
                                        (0077) ;               not guarantee that in future implementations of this
                                        (0078) ;               function other page pointer registers will not be
                                        (0079) ;               modified.
                                        (0080) ;          
                                        (0081) ;               Page Pointer Registers Modified: 
                                        (0082) ;               CUR_PP
                                        (0083) ;
                                        (0084) _LoadConfig_pwm_test:
                                        (0085)  LoadConfig_pwm_test:
                                        (0086)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0087) 
0352: 10       PUSH  X                  (0088) 	push	x
0353: 70 EF    AND   F,0xEF             
                                        (0089)     M8C_SetBank0                    ; Force bank 0
0355: 50 00    MOV   A,0x0              (0090)     mov     a, 0                    ; Specify bank 0
0357: 67       ASR   A                  (0091)     asr     a                       ; Store in carry flag
                                        (0092)                                     ; Load bank 0 table:
0358: 50 01    MOV   A,0x1              (0093)     mov     A, >LoadConfigTBL_pwm_test_Bank0
035A: 57 A0    MOV   X,0xA0             (0094)     mov     X, <LoadConfigTBL_pwm_test_Bank0
035C: 7C 03 6D LCALL 0x036D             (0095)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0096) 
035F: 50 01    MOV   A,0x1              (0097)     mov     a, 1                    ; Specify bank 1
0361: 67       ASR   A                  (0098)     asr     a                       ; Store in carry flag
                                        (0099)                                     ; Load bank 1 table:
0362: 50 02    MOV   A,0x2              (0100)     mov     A, >LoadConfigTBL_pwm_test_Bank1
0364: 57 07    MOV   X,0x7              (0101)     mov     X, <LoadConfigTBL_pwm_test_Bank1
0366: 7C 03 6D LCALL 0x036D             (0102)     lcall   LoadConfig              ; Load the bank 1 values
0369: 70 EF    AND   F,0xEF             
                                        (0103) 
                                        (0104)     M8C_SetBank0                    ; Force return to bank 0
036B: 20       POP   X                  (0105) 	pop		x
                                        (0106) 
                                        (0107)     RAM_EPILOGUE RAM_USE_CLASS_4
036C: 7F       RET                      (0108)     ret
                                        (0109) 
                                        (0110) 
                                        (0111) 
                                        (0112) 
                                        (0113) ;---------------------------------------------------------------------------
                                        (0114) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0115) ;              pairs. Terminate on address=0xFF.
                                        (0116) ;
                                        (0117) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0118) ;           Flag Register Carry bit encodes the Register Bank
                                        (0119) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0120) ;
                                        (0121) ;  RETURNS: nothing.
                                        (0122) ;
                                        (0123) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0124) ;                X-3 Temporary store for register address
                                        (0125) ;                X-2 LSB of config table address
                                        (0126) ;                X-1 MSB of config table address
                                        (0127) ;
                                        (0128) LoadConfig:
                                        (0129)     RAM_PROLOGUE RAM_USE_CLASS_2
036D: 38 02    ADD   SP,0x2             (0130)     add     SP, 2                   ; Set up local vars
036F: 10       PUSH  X                  (0131)     push    X                       ; Save config table address on stack
0370: 08       PUSH  A                  (0132)     push    A
0371: 4F       MOV   X,SP               (0133)     mov     X, SP
0372: 56 FC 00 MOV   [X-4],0x0          (0134)     mov     [X-4], 0                ; Set default Destination to Bank 0
0375: D0 04    JNC   0x037A             (0135)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0377: 56 FC 01 MOV   [X-4],0x1          (0136)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0137) .BankSelectSaved:
037A: 18       POP   A                  (0138)     pop     A
037B: 20       POP   X                  (0139)     pop     X
037C: 70 EF    AND   F,0xEF             
037E: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0140) 
                                        (0141) LoadConfigLp:
                                        (0142)     M8C_SetBank0                    ; Switch to bank 0
                                        (0143)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0381: 10       PUSH  X                  (0144)     push    X                       ; Preserve the config table address
0382: 08       PUSH  A                  (0145)     push    A
0383: 28       ROMX                     (0146)     romx                            ; Load register address from table
0384: 39 FF    CMP   A,0xFF             (0147)     cmp     A, END_CONFIG_TABLE     ; End of table?
0386: A0 1F    JZ    0x03A6             (0148)     jz      EndLoadConfig           ;   Yes, go wrap it up
0388: 4F       MOV   X,SP               (0149)     mov     X, SP                   ;
0389: 48 FC 01 TST   [X-4],0x1          (0150)     tst     [X-4], 1                ; Loading IO Bank 1?
038C: A0 03    JZ    0x0390             (0151)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
038E: 71 10    OR    F,0x10             
                                        (0152)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0153) .IOBankNowSet:
0390: 54 FD    MOV   [X-3],A            (0154)     mov     [X-3], A                ; Stash the register address
0392: 18       POP   A                  (0155)     pop     A                       ; Retrieve the table address
0393: 20       POP   X                  (0156)     pop     X
0394: 75       INC   X                  (0157)     inc     X                       ; Advance to the data byte
0395: 09 00    ADC   A,0x0              (0158)     adc     A, 0
0397: 10       PUSH  X                  (0159)     push    X                       ; Save the config table address again
0398: 08       PUSH  A                  (0160)     push    A
0399: 28       ROMX                     (0161)     romx                            ; load config data from the table
039A: 4F       MOV   X,SP               (0162)     mov     X, SP                   ; retrieve the register address
039B: 59 FD    MOV   X,[X-3]            (0163)     mov     X, [X-3]
039D: 61 00    MOV   REG[X+0x0],A       (0164)     mov     reg[X], A               ; Configure the register
039F: 18       POP   A                  (0165)     pop     A                       ; retrieve the table address
03A0: 20       POP   X                  (0166)     pop     X
03A1: 75       INC   X                  (0167)     inc     X                       ; advance to next table entry
03A2: 09 00    ADC   A,0x0              (0168)     adc     A, 0
03A4: 8F D7    JMP   0x037C             (0169)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0170) EndLoadConfig:
03A6: 38 FC    ADD   SP,0xFC            (0171)     add     SP, -4
03A8: 70 3F    AND   F,0x3F             
03AA: 71 C0    OR    F,0xC0             
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_2
03AC: 7F       RET                      (0173)     ret
                                        (0174) 
                                        (0175) AREA InterruptRAM(ram, rel)
                                        (0176) 
                                        (0177) NO_SHADOW:
                                        (0178) _NO_SHADOW:
FILE: lib\pwmint.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWMINT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:26:51
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
03AD: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWMINT.asm
FILE: lib\pwm2int.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM2INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:26:51
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM2.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM2_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM2_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM2_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
03AE: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM2INT.asm
FILE: lib\pwm2.asm                      (0001) ;;*****************************************************************************
03AF: 43 E1 08 OR    REG[0xE1],0x8      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM2.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:26:51
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM2.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM2_EnableInt
                                        (0030) export _PWM2_EnableInt
                                        (0031) export  PWM2_DisableInt
                                        (0032) export _PWM2_DisableInt
                                        (0033) export  PWM2_Start
                                        (0034) export _PWM2_Start
                                        (0035) export  PWM2_Stop
                                        (0036) export _PWM2_Stop
                                        (0037) export  PWM2_WritePeriod
                                        (0038) export _PWM2_WritePeriod
                                        (0039) export  PWM2_WritePulseWidth
                                        (0040) export _PWM2_WritePulseWidth
                                        (0041) export  PWM2_wReadPulseWidth
                                        (0042) export _PWM2_wReadPulseWidth
                                        (0043) export  PWM2_wReadCounter
                                        (0044) export _PWM2_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wPWM2_ReadPulseWidth    ; deprecated
                                        (0049) export _wPWM2_ReadPulseWidth    ; deprecated
                                        (0050) export  wPWM2_ReadCounter       ; deprecated
                                        (0051) export _wPWM2_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA pwm_test_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM2_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM2_EnableInt:
                                        (0091) _PWM2_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM2_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
03B2: 7F       RET                      (0095)    ret
03B3: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM2_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM2_DisableInt:
                                        (0119) _PWM2_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM2_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
03B6: 7F       RET                      (0123)    ret
03B7: 43 2B 01 OR    REG[0x2B],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM2_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM2_Start:
                                        (0148) _PWM2_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM2_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
03BA: 7F       RET                      (0152)    ret
03BB: 41 2B FE AND   REG[0x2B],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM2_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register of the LSB block.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM2_Stop:
                                        (0176) _PWM2_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM2_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
03BE: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM2_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count registers (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM2_WritePeriod:
                                        (0206) _PWM2_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
03BF: 60 29    MOV   REG[0x29],A        (0208)    mov   reg[PWM2_PERIOD_LSB_REG], A
03C1: 5B       MOV   A,X                (0209)    mov   A, X
03C2: 60 2D    MOV   REG[0x2D],A        (0210)    mov   reg[PWM2_PERIOD_MSB_REG], A
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
03C4: 7F       RET                      (0212)    ret
                                        (0213) 
                                        (0214) 
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) .SECTION
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  FUNCTION NAME: PWM2_WritePulseWidth
                                        (0220) ;
                                        (0221) ;  DESCRIPTION:
                                        (0222) ;     Writes the pulse width value into the Compare register (DR2).
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0226) ;  RETURNS:      Nothing
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  PWM2_WritePulseWidth:
                                        (0235) _PWM2_WritePulseWidth:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
03C5: 60 2A    MOV   REG[0x2A],A        (0237)    mov   reg[PWM2_COMPARE_LSB_REG], A
03C7: 5B       MOV   A,X                (0238)    mov   A, X
03C8: 60 2E    MOV   REG[0x2E],A        (0239)    mov   reg[PWM2_COMPARE_MSB_REG], A
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
03CA: 7F       RET                      (0241)    ret
                                        (0242) 
                                        (0243) 
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: PWM2_wReadPulseWidth
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Reads the Compare register.
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS:    None
                                        (0255) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0256) ;  SIDE EFFECTS:
                                        (0257) ;    The A and X registers may be modified by this or future implementations
                                        (0258) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0259) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;
                                        (0263)  PWM2_wReadPulseWidth:
                                        (0264) _PWM2_wReadPulseWidth:
                                        (0265)  wPWM2_ReadPulseWidth:                           ; this name deprecated
                                        (0266) _wPWM2_ReadPulseWidth:                           ; this name deprecated
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
03CB: 5D 2E    MOV   A,REG[0x2E]        (0268)    mov   A, reg[PWM2_COMPARE_MSB_REG]
03CD: 5C       MOV   X,A                (0269)    mov   X, A
03CE: 5D 2A    MOV   A,REG[0x2A]        (0270)    mov   A, reg[PWM2_COMPARE_LSB_REG]
                                        (0271)    RAM_EPILOGUE RAM_USE_CLASS_1
03D0: 7F       RET                      (0272)    ret
                                        (0273) 
                                        (0274) 
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: PWM2_wReadCounter
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:
                                        (0282) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0283) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0284) ;     from the Count to the Compare register by holding the clock low in
                                        (0285) ;     the MSB PSoC block.
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0292) ;     2) The A and X registers may be modified by this or future implementations
                                        (0293) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0294) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0295) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0296) ;        functions.
                                        (0297) ;
                                        (0298)  PWM2_wReadCounter:
                                        (0299) _PWM2_wReadCounter:
                                        (0300)  wPWM2_ReadCounter:                              ; this name deprecated
                                        (0301) _wPWM2_ReadCounter:                              ; this name deprecated
                                        (0302) 
                                        (0303)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0304)    bOrigClockSetting:      EQU   2                  ; Frame offset to temp Input   store
                                        (0305)    wCounter:               EQU   3                  ; Frame offset to temp Count   store
                                        (0306)    STACK_FRAME_SIZE:       EQU   5                  ; max stack frame size is 5 bytes
                                        (0307) 
                                        (0308)    RAM_PROLOGUE RAM_USE_CLASS_2
03D1: 4F       MOV   X,SP               (0309)    mov   X, SP                                      ; X <-  stack frame pointer
03D2: 5D 2E    MOV   A,REG[0x2E]        (0310)    mov   A, reg[PWM2_COMPARE_MSB_REG]            ; Save the Compare register on the stack
03D4: 08       PUSH  A                  (0311)    push  A                                          ;
03D5: 5D 2A    MOV   A,REG[0x2A]        (0312)    mov   A, reg[PWM2_COMPARE_LSB_REG]            ;
03D7: 08       PUSH  A                  (0313)    push  A                                          ;  -stack frame now 2 bytes-
03D8: 41 2B FE AND   REG[0x2B],0xFE     
03DB: 71 10    OR    F,0x10             
                                        (0314)    PWM2_Stop_M                                   ; Disable the PWM function
                                        (0315)    M8C_SetBank1                                     ;
03DD: 5D 29    MOV   A,REG[0x29]        (0316)    mov   A, reg[PWM2_INPUT_LSB_REG]              ; save the LSB clock input setting
03DF: 08       PUSH  A                  (0317)    push  A                                          ;   on the stack (now 3 bytes) and ...
                                        (0318)                                                     ;   hold the clock low:
03E0: 62 29 00 MOV   REG[0x29],0x0      (0319)    mov   reg[PWM2_INPUT_LSB_REG], INPUT_REG_NULL
03E3: 70 EF    AND   F,0xEF             
                                        (0320)    M8C_SetBank0                                     ; Extract the Count via DR2 register
03E5: 5D 2C    MOV   A,REG[0x2C]        (0321)    mov   A, reg[PWM2_COUNTER_MSB_REG]            ; DR2 <- DR0 (in the MSB block)
03E7: 5D 2E    MOV   A,REG[0x2E]        (0322)    mov   A, reg[PWM2_COMPARE_MSB_REG]            ; Stash the Count MSB on the stack
03E9: 08       PUSH  A                  (0323)    push  A                                          ;  -stack frame is now 4 bytes
03EA: 5D 28    MOV   A,REG[0x28]        (0324)    mov   A, reg[PWM2_COUNTER_LSB_REG]            ; DR2 <- DR0 (in the LSB block)
03EC: 5D 2A    MOV   A,REG[0x2A]        (0325)    mov   A, reg[PWM2_COMPARE_LSB_REG]            ; Stash the Count LSB on the stack
03EE: 08       PUSH  A                  (0326)    push  A                                          ;   -stack frame is now 5 bytes-
03EF: 52 00    MOV   A,[X+0]            (0327)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
03F1: 60 2E    MOV   REG[0x2E],A        (0328)    mov   reg[PWM2_COMPARE_MSB_REG], A            ;
03F3: 52 01    MOV   A,[X+1]            (0329)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
03F5: 60 2A    MOV   REG[0x2A],A        (0330)    mov   reg[PWM2_COMPARE_LSB_REG], A            ;
03F7: 71 10    OR    F,0x10             
                                        (0331)    M8C_SetBank1                                     ; ---Restore the PWM operation
03F9: 52 02    MOV   A,[X+2]            (0332)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
03FB: 60 29    MOV   REG[0x29],A        (0333)    mov   reg[PWM2_INPUT_LSB_REG], A              ;    and restore it
03FD: 70 EF    AND   F,0xEF             
03FF: 43 2B 01 OR    REG[0x2B],0x1      
                                        (0334)    M8C_SetBank0                                     ;
                                        (0335)    PWM2_Start_M                                  ; Now re-enable the PWM function
0402: 18       POP   A                  (0336)    pop   A                                          ; Setup the return value
0403: 20       POP   X                  (0337)    pop   X                                          ;
0404: 38 FD    ADD   SP,0xFD            (0338)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
0406: 70 3F    AND   F,0x3F             
0408: 71 C0    OR    F,0xC0             
                                        (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
040A: 7F       RET                      (0340)    ret
                                        (0341) 
                                        (0342) .ENDSECTION
                                        (0343) 
                                        (0344) ; End of File PWM2.asm
FILE: lib\pwm.asm                       (0001) ;;*****************************************************************************
040B: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:26:51
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM_EnableInt
                                        (0030) export _PWM_EnableInt
                                        (0031) export  PWM_DisableInt
                                        (0032) export _PWM_DisableInt
                                        (0033) export  PWM_Start
                                        (0034) export _PWM_Start
                                        (0035) export  PWM_Stop
                                        (0036) export _PWM_Stop
                                        (0037) export  PWM_WritePeriod
                                        (0038) export _PWM_WritePeriod
                                        (0039) export  PWM_WritePulseWidth
                                        (0040) export _PWM_WritePulseWidth
                                        (0041) export  PWM_wReadPulseWidth
                                        (0042) export _PWM_wReadPulseWidth
                                        (0043) export  PWM_wReadCounter
                                        (0044) export _PWM_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wPWM_ReadPulseWidth    ; deprecated
                                        (0049) export _wPWM_ReadPulseWidth    ; deprecated
                                        (0050) export  wPWM_ReadCounter       ; deprecated
                                        (0051) export _wPWM_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA pwm_test_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM_EnableInt:
                                        (0091) _PWM_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
040E: 7F       RET                      (0095)    ret
040F: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM_DisableInt:
                                        (0119) _PWM_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0412: 7F       RET                      (0123)    ret
0413: 43 23 01 OR    REG[0x23],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM_Start:
                                        (0148) _PWM_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0416: 7F       RET                      (0152)    ret
0417: 41 23 FE AND   REG[0x23],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register of the LSB block.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM_Stop:
                                        (0176) _PWM_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
041A: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count registers (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM_WritePeriod:
                                        (0206) _PWM_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
041B: 60 21    MOV   REG[0x21],A        (0208)    mov   reg[PWM_PERIOD_LSB_REG], A
041D: 5B       MOV   A,X                (0209)    mov   A, X
041E: 60 25    MOV   REG[0x25],A        (0210)    mov   reg[PWM_PERIOD_MSB_REG], A
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
0420: 7F       RET                      (0212)    ret
                                        (0213) 
                                        (0214) 
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) .SECTION
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  FUNCTION NAME: PWM_WritePulseWidth
                                        (0220) ;
                                        (0221) ;  DESCRIPTION:
                                        (0222) ;     Writes the pulse width value into the Compare register (DR2).
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0226) ;  RETURNS:      Nothing
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  PWM_WritePulseWidth:
                                        (0235) _PWM_WritePulseWidth:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
0421: 60 22    MOV   REG[0x22],A        (0237)    mov   reg[PWM_COMPARE_LSB_REG], A
0423: 5B       MOV   A,X                (0238)    mov   A, X
0424: 60 26    MOV   REG[0x26],A        (0239)    mov   reg[PWM_COMPARE_MSB_REG], A
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
0426: 7F       RET                      (0241)    ret
                                        (0242) 
                                        (0243) 
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: PWM_wReadPulseWidth
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Reads the Compare register.
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS:    None
                                        (0255) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0256) ;  SIDE EFFECTS:
                                        (0257) ;    The A and X registers may be modified by this or future implementations
                                        (0258) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0259) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;
                                        (0263)  PWM_wReadPulseWidth:
                                        (0264) _PWM_wReadPulseWidth:
                                        (0265)  wPWM_ReadPulseWidth:                            ; this name deprecated
                                        (0266) _wPWM_ReadPulseWidth:                            ; this name deprecated
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
0427: 5D 26    MOV   A,REG[0x26]        (0268)    mov   A, reg[PWM_COMPARE_MSB_REG]
0429: 5C       MOV   X,A                (0269)    mov   X, A
042A: 5D 22    MOV   A,REG[0x22]        (0270)    mov   A, reg[PWM_COMPARE_LSB_REG]
                                        (0271)    RAM_EPILOGUE RAM_USE_CLASS_1
042C: 7F       RET                      (0272)    ret
                                        (0273) 
                                        (0274) 
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: PWM_wReadCounter
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:
                                        (0282) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0283) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0284) ;     from the Count to the Compare register by holding the clock low in
                                        (0285) ;     the MSB PSoC block.
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0292) ;     2) The A and X registers may be modified by this or future implementations
                                        (0293) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0294) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0295) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0296) ;        functions.
                                        (0297) ;
                                        (0298)  PWM_wReadCounter:
                                        (0299) _PWM_wReadCounter:
                                        (0300)  wPWM_ReadCounter:                               ; this name deprecated
                                        (0301) _wPWM_ReadCounter:                               ; this name deprecated
                                        (0302) 
                                        (0303)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0304)    bOrigClockSetting:      EQU   2                  ; Frame offset to temp Input   store
                                        (0305)    wCounter:               EQU   3                  ; Frame offset to temp Count   store
                                        (0306)    STACK_FRAME_SIZE:       EQU   5                  ; max stack frame size is 5 bytes
                                        (0307) 
                                        (0308)    RAM_PROLOGUE RAM_USE_CLASS_2
042D: 4F       MOV   X,SP               (0309)    mov   X, SP                                      ; X <-  stack frame pointer
042E: 5D 26    MOV   A,REG[0x26]        (0310)    mov   A, reg[PWM_COMPARE_MSB_REG]             ; Save the Compare register on the stack
0430: 08       PUSH  A                  (0311)    push  A                                          ;
0431: 5D 22    MOV   A,REG[0x22]        (0312)    mov   A, reg[PWM_COMPARE_LSB_REG]             ;
0433: 08       PUSH  A                  (0313)    push  A                                          ;  -stack frame now 2 bytes-
0434: 41 23 FE AND   REG[0x23],0xFE     
0437: 71 10    OR    F,0x10             
                                        (0314)    PWM_Stop_M                                    ; Disable the PWM function
                                        (0315)    M8C_SetBank1                                     ;
0439: 5D 21    MOV   A,REG[0x21]        (0316)    mov   A, reg[PWM_INPUT_LSB_REG]               ; save the LSB clock input setting
043B: 08       PUSH  A                  (0317)    push  A                                          ;   on the stack (now 3 bytes) and ...
                                        (0318)                                                     ;   hold the clock low:
043C: 62 21 00 MOV   REG[0x21],0x0      (0319)    mov   reg[PWM_INPUT_LSB_REG], INPUT_REG_NULL
043F: 70 EF    AND   F,0xEF             
                                        (0320)    M8C_SetBank0                                     ; Extract the Count via DR2 register
0441: 5D 24    MOV   A,REG[0x24]        (0321)    mov   A, reg[PWM_COUNTER_MSB_REG]             ; DR2 <- DR0 (in the MSB block)
0443: 5D 26    MOV   A,REG[0x26]        (0322)    mov   A, reg[PWM_COMPARE_MSB_REG]             ; Stash the Count MSB on the stack
0445: 08       PUSH  A                  (0323)    push  A                                          ;  -stack frame is now 4 bytes
0446: 5D 20    MOV   A,REG[0x20]        (0324)    mov   A, reg[PWM_COUNTER_LSB_REG]             ; DR2 <- DR0 (in the LSB block)
0448: 5D 22    MOV   A,REG[0x22]        (0325)    mov   A, reg[PWM_COMPARE_LSB_REG]             ; Stash the Count LSB on the stack
044A: 08       PUSH  A                  (0326)    push  A                                          ;   -stack frame is now 5 bytes-
044B: 52 00    MOV   A,[X+0]            (0327)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
044D: 60 26    MOV   REG[0x26],A        (0328)    mov   reg[PWM_COMPARE_MSB_REG], A             ;
044F: 52 01    MOV   A,[X+1]            (0329)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
0451: 60 22    MOV   REG[0x22],A        (0330)    mov   reg[PWM_COMPARE_LSB_REG], A             ;
0453: 71 10    OR    F,0x10             
                                        (0331)    M8C_SetBank1                                     ; ---Restore the PWM operation
0455: 52 02    MOV   A,[X+2]            (0332)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
0457: 60 21    MOV   REG[0x21],A        (0333)    mov   reg[PWM_INPUT_LSB_REG], A               ;    and restore it
0459: 70 EF    AND   F,0xEF             
045B: 43 23 01 OR    REG[0x23],0x1      
                                        (0334)    M8C_SetBank0                                     ;
                                        (0335)    PWM_Start_M                                   ; Now re-enable the PWM function
045E: 18       POP   A                  (0336)    pop   A                                          ; Setup the return value
045F: 20       POP   X                  (0337)    pop   X                                          ;
0460: 38 FD    ADD   SP,0xFD            (0338)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
0462: 70 3F    AND   F,0x3F             
0464: 71 C0    OR    F,0xC0             
                                        (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
0466: 7F       RET                      (0340)    ret
                                        (0341) 
                                        (0342) .ENDSECTION
                                        (0343) 
                                        (0344) ; End of File PWM.asm
FILE: lib\delay.asm                     (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: delay.asm
                                        (0004) ;;
                                        (0005) ;;  DESCRIPTION: Delay functions implementation file
                                        (0006) ;;
                                        (0007) ;;-----------------------------------------------------------------------------
                                        (0008) ;;  Copyright (c) Cypress MicroSystems 2002-2006. All Rights Reserved.
                                        (0009) ;;*****************************************************************************
                                        (0010) ;;*****************************************************************************
                                        (0011) 
                                        (0012) ;-----------------------------------------------------------------------------
                                        (0013) ;  Include Files
                                        (0014) ;-----------------------------------------------------------------------------
                                        (0015) include "m8c.inc"
                                        (0016) include "memory.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------------------------------------
                                        (0021) export  Delay50uTimes
                                        (0022) export _Delay50uTimes
                                        (0023) 
                                        (0024) export  Delay50u
                                        (0025) export _Delay50u
                                        (0026) 
                                        (0027) export  Delay10msTimes
                                        (0028) export _Delay10msTimes
                                        (0029) 
                                        (0030) 
                                        (0031) area text(rom)
                                        (0032) .SECTION
                                        (0033) ;-----------------------------------------------------------------------------
                                        (0034) ;  FUNCTION NAME: DelaySeconds
                                        (0035) ;
                                        (0036) ;  DESCRIPTION:
                                        (0037) ;     Delay increments of 10mSeconds
                                        (0038) ;
                                        (0039) ;-----------------------------------------------------------------------------
                                        (0040) ;
                                        (0041) ;  ARGUMENTS:
                                        (0042) ;     A contains the delay multiplier
                                        (0043) ;
                                        (0044) ;  RETURNS:
                                        (0045) ;
                                        (0046) ;  SIDE EFFECTS:
                                        (0047) ;    The A and X registers may be modified by this or future implementations
                                        (0048) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0049) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0050) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0051) ;    functions.
                                        (0052) 
                                        (0053) 
                                        (0054)  Delay10msTimes:
                                        (0055) _Delay10msTimes:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_1
0467: 08       PUSH  A                  (0057) 	push A
                                        (0058) 
0468: 50 C8    MOV   A,0xC8             (0059) 	mov A, 200
                                        (0060) 	DELAY50US:
046A: 90 16    CALL  _Delay50u          (0061)     call  Delay50u
046C: 78       DEC   A                  (0062)     dec   A
046D: BF FC    JNZ   0x046A             (0063)     jnz   DELAY50US
                                        (0064) 
046F: 18       POP   A                  (0065) 	pop A
0470: 78       DEC   A                  (0066) 	dec   A
0471: BF F5    JNZ   __UserModules_end|Delay10msTimes|_Delay10msTimes|__text_start(0067)     jnz   Delay10msTimes
                                        (0068) 
                                        (0069)     RAM_EPILOGUE RAM_USE_CLASS_1
0473: 7F       RET                      (0070)     ret
                                        (0071) .ENDSECTION
                                        (0072) 
                                        (0073) 
                                        (0074) 
                                        (0075) 
                                        (0076) .SECTION
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) ;  FUNCTION NAME: Delay50uTimes
                                        (0079) ;
                                        (0080) ;  DESCRIPTION:
                                        (0081) ;     Delay increments of 50uSeconds
                                        (0082) ;
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:
                                        (0086) ;     A contains the delay multiplier
                                        (0087) ;
                                        (0088) ;  RETURNS:
                                        (0089) ;
                                        (0090) ;  SIDE EFFECTS:
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097) ;
                                        (0098) 
                                        (0099)  Delay50uTimes:
                                        (0100) _Delay50uTimes:
                                        (0101)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0102) 
0474: 90 0C    CALL  _Delay50u          (0103)     call  Delay50u
0476: 78       DEC   A                  (0104) 	dec A
0477: BF FC    JNZ   _Delay50uTimes     (0105)     jnz   Delay50uTimes
                                        (0106) 
                                        (0107) 	
                                        (0108)     RAM_EPILOGUE RAM_USE_CLASS_1
0479: 7F       RET                      (0109)     ret
                                        (0110) 
                                        (0111) .ENDSECTION
                                        (0112) 
                                        (0113) ;-----------------------------------------------------------------------------
                                        (0114) ;  FUNCTION NAME: Delay50u
                                        (0115) ;
                                        (0116) ;  DESCRIPTION:
                                        (0117) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0118) ;     Slower clock frequencies the delay will be;
                                        (0119) ;           1.5
                                        (0120) ;        -------------- * 50uSec
                                        (0121) ;        clock_freq(MHz)
                                        (0122) ;
                                        (0123) ;
                                        (0124) ;-----------------------------------------------------------------------------
                                        (0125) ;
                                        (0126) ;  ARGUMENTS: none
                                        (0127) ;
                                        (0128) ;  RETURNS: none
                                        (0129) ;
                                        (0130) ;  SIDE EFFECTS:
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137) ;  THEORY of OPERATION or PROCEDURE:
                                        (0138) ;
                                        (0139) .LITERAL
                                        (0140)  Delay50u_Table::
                                        (0141)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0142) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0143) .ENDLITERAL
                                        (0144) .SECTION
                                        (0145) 
                                        (0146)   Delay50u:
                                        (0147)  _Delay50u:                      ; [11]  Call
                                        (0148)     RAM_PROLOGUE RAM_USE_CLASS_1
0482: 08       PUSH  A                  (0149)     push  A
0483: 71 10    OR    F,0x10             
                                        (0150)     M8C_SetBank1                       ; [4]
0485: 5D E0    MOV   A,REG[0xE0]        (0151)     mov   A, reg[OSC_CR0]              ; [6] Get delay value
0487: 70 EF    AND   F,0xEF             
                                        (0152)     M8C_SetBank0                       ; [4]
0489: 21 07    AND   A,0x7              (0153)     and   A,07h                        ; [4] Mask off only the clock bits
048B: 39 05    CMP   A,0x5              (0154)     cmp   A,05h
048D: D0 06    JNC   0x0494             (0155)     jnc   Delay50u_End
048F: FF E9    INDEX Delay50u_Table     (0156)     index Delay50u_Table               ; [13] Get delay value
                                        (0157) Delay50u_Loop:                         ;
0491: 78       DEC   A                  (0158)     dec   A                            ; [4]
0492: BF FE    JNZ   0x0491             (0159)     jnz   Delay50u_Loop                ; [5]
                                        (0160) Delay50u_End:
0494: 18       POP   A                  (0161)     pop   A
                                        (0162)     RAM_EPILOGUE RAM_USE_CLASS_1
0495: 7F       RET                      (0163)     ret
FILE: C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\Pwm_Test\Pwm_Test\Pwm_Test\main.c
(0001) //----------------------------------------------------------------------------
(0002) // FILENAME: main.c
(0003) //
(0004) // DESCRIPTION:
(0005) //
(0006) //  This sample shows how to create a 33% duty cycle output pulse. 
(0007) //
(0008) // OVERVIEW:
(0009) //
(0010) //  The PWM output can be routed to any pin. 
(0011) //  In this example the PWM output is routed to P0[4]. 
(0012) //  The pin P0[4] has the 33% duty cycle output pulse with frequency = 1,5 kHz.
(0013) //
(0014) //	The following changes need to be made to the default settings in the Device Editor:
(0015) //
(0016) //   1. Select PWM16 user module.
(0017) //   2. The User Module will occupy the space in dedicated system resources.
(0018) //   3. Rename User Module's instance name to PWM16.
(0019) //   4. Set PWM16's Clock Parameter to VC1.
(0020) //   5. Set PWM16's Enable Parameter to High.
(0021) //   6. Set PWM16's CompareOut Parameter to Row_0_Output_0.
(0022) //   7. Set PWM16's CompareType Parameter to Less Than Or Equal.
(0023) //   8. Set PWM16's ClockSync Parameter to SyncSysClk.
(0024) //   9. Click on Row_0_Output_0 and connect Row_0_Output_0 to GlobalOutEven_4.
(0025) //   10.Select GlobalOutEven_4 for P0[4] in the Pinout.
(0026) //
(0027) // CONFIGURATION DETAILS:
(0028) //
(0029) //  1. The clock selected should be 1000 times the required period.
(0030) //  2. The UM's instance name must be shortened to PWM16.
(0031) //
(0032) // PROJECT SETTINGS:
(0033) //
(0034) //     IMO setting (SysClk)  = 24MHz       System clock is set to 24MHz
(0035) //     VC1=SysClk/1  = 16 (default)
(0036) //
(0037) // USER MODULE PARAMETER SETTINGS:
(0038) //
(0039) //  -------------------------------------------------------------------------------
(0040) //  UM         Parameter         Value                 Comments 
(0041) //  -------------------------------------------------------------------------------
(0042) //  PWM16      Name              PWM16                  UM's instance name
(0043) //             Clock             VC1
(0044) //             Enable            High
(0045) //             CompareOut        Row_0_Output_0
(0046) //             TerminalCountOut  Row_0_Output_1
(0047) //             Period            0                     The Code changes it.
(0048) //             PulseWidth        0                     The Code changes it. 
(0049) //             CompareType       Less Than Or Equal 
(0050) //             InterruptType     Terminal Count
(0051) //             ClockSync         SyncSysClk
(0052) //                                                    
(0053) //  -------------------------------------------------------------------------------
(0054) //
(0055) /* Code begins here */
(0056) 
(0057) #include <m8c.h>        // part specific constants and macros
(0058) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0059) #include "delay.h"
(0060) //#define PWM_PERIOD1 	//cte 
(0061) #define PWM_PULSEWIDTH1 500//sweetspot]
(0062) #define PWM2_PULSEWIDTH2 500//sweetspot
(0063) 
(0064) void SetBitInByte(BYTE prt, int bit, BOOL high)
(0065) {
_SetBitInByte:
  high                 --> X-7
  bit                  --> X-6
  prt                  --> X-4
    0496: 10       PUSH  X
    0497: 4F       MOV   X,SP
(0066) 	if (high)
    0498: 3D F9 00 CMP   [X-7],0x0
    049B: A0 25    JZ    0x04C1
(0067) 	{
(0068) 		prt |=  (1 << bit);
    049D: 62 D0 00 MOV   REG[0xD0],0x0
    04A0: 55 00 01 MOV   [__r1],0x1
    04A3: 55 01 00 MOV   [__r0],0x0
    04A6: 52 FB    MOV   A,[X-5]
    04A8: 21 0F    AND   A,0xF
    04AA: A0 0B    JZ    0x04B6
    04AC: 62 D0 00 MOV   REG[0xD0],0x0
    04AF: 65 00    ASL   [__r1]
    04B1: 6B 01    RLC   [__r0]
    04B3: 78       DEC   A
    04B4: BF F7    JNZ   0x04AC
    04B6: 62 D0 00 MOV   REG[0xD0],0x0
    04B9: 52 FC    MOV   A,[X-4]
    04BB: 2A 00    OR    A,[__r1]
    04BD: 54 FC    MOV   [X-4],A
(0069) 	}
    04BF: 80 28    JMP   0x04E8
(0070) 	else 
(0071) 	{
(0072) 		prt &= ~(1 << bit);
    04C1: 62 D0 00 MOV   REG[0xD0],0x0
    04C4: 55 00 01 MOV   [__r1],0x1
    04C7: 55 01 00 MOV   [__r0],0x0
    04CA: 52 FB    MOV   A,[X-5]
    04CC: 21 0F    AND   A,0xF
    04CE: A0 0B    JZ    0x04DA
    04D0: 62 D0 00 MOV   REG[0xD0],0x0
    04D3: 65 00    ASL   [__r1]
    04D5: 6B 01    RLC   [__r0]
    04D7: 78       DEC   A
    04D8: BF F7    JNZ   0x04D0
    04DA: 62 D0 00 MOV   REG[0xD0],0x0
    04DD: 51 00    MOV   A,[__r1]
    04DF: 73       CPL   A
    04E0: 53 00    MOV   [__r1],A
    04E2: 52 FC    MOV   A,[X-4]
    04E4: 22 00    AND   A,[__r1]
    04E6: 54 FC    MOV   [X-4],A
(0073) 	}
    04E8: 20       POP   X
    04E9: 7F       RET   
(0074) }
(0075) 
(0076) void main(void)
(0077) {
(0078) 	
(0079) 	//PWM_WritePeriod(PWM_PERIOD1);
(0080) 	PWM_WritePulseWidth(PWM_PULSEWIDTH1);  
_main:
    04EA: 10       PUSH  X
    04EB: 57 01    MOV   X,0x1
    04ED: 50 F4    MOV   A,0xF4
    04EF: 7C 04 21 LCALL _PWM_WritePulseWidth
(0081) 	PWM_Start();
    04F2: 7C 04 13 LCALL _PWM_Start
(0082) 	PWM2_WritePulseWidth(PWM2_PULSEWIDTH2);  
    04F5: 57 01    MOV   X,0x1
    04F7: 50 F4    MOV   A,0xF4
    04F9: 7C 03 C5 LCALL _PWM2_WritePulseWidth
(0083) 	PWM2_Start();
    04FC: 7C 03 B7 LCALL _PWM2_Start
    04FF: 20       POP   X
    0500: 80 27    JMP   0x0528
(0084) 	while (TRUE)
(0085) 	{
(0086) 		//motor1
(0087) 	//	SetBitInByte(PRT2DR, 7, TRUE);
(0088) 		PRT2DR &= ~0x80;  // P27 low AIN 1
    0502: 41 08 7F AND   REG[0x8],0x7F
(0089) 		PRT2DR |=  0x20;  // P25 high AIN 2
    0505: 43 08 20 OR    REG[0x8],0x20
(0090) 		// motor 2
(0091) 		PRT1DR &= ~0x10; // P16 low
    0508: 41 04 EF AND   REG[0x4],0xEF
(0092) 		PRT1DR |=  0x80; // P17 high
    050B: 43 04 80 OR    REG[0x4],0x80
(0093) 
(0094) 	    Delay10msTimes(100);
    050E: 10       PUSH  X
    050F: 50 64    MOV   A,0x64
    0511: 7C 04 67 LCALL __UserModules_end|Delay10msTimes|_Delay10msTimes|__text_start
    0514: 20       POP   X
(0095) 		
(0096) 		// Motor 1
(0097) 		PRT2DR |=  0x80;  // P27 high
    0515: 43 08 80 OR    REG[0x8],0x80
(0098) 		PRT2DR &= ~ 0x20; // P25 low AIN 2
    0518: 41 08 DF AND   REG[0x8],0xDF
(0099) 		// Motor 2
(0100) 		PRT1DR |=  0x10; // P16 high
    051B: 43 04 10 OR    REG[0x4],0x10
(0101) 	    PRT1DR &= ~0x80; // P17 low
    051E: 41 04 7F AND   REG[0x4],0x7F
(0102) 		
(0103) 		Delay10msTimes(100);
    0521: 10       PUSH  X
    0522: 50 64    MOV   A,0x64
    0524: 7C 04 67 LCALL __UserModules_end|Delay10msTimes|_Delay10msTimes|__text_start
    0527: 20       POP   X
(0104)     }
    0528: 8F D9    JMP   0x0502
(0105) }
    052A: 8F FF    JMP   0x052A
