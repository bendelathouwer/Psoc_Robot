 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
 0000                   .dbfunc e Within _Within fc
 0000           ;          upper -> X+2
 0000           ;          lower -> X+0
 0000           ;         margin -> X-9
 0000           ;         border -> X-7
 0000           ;          value -> X-5
 0000           _Within::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3804              add SP,4
 0004                   .dbline 119
 0004           ; //****************************************************************************
 0004           ; //*****************************************************************************
 0004           ; //  FILENAME: main.c
 0004           ; //   Made for project 2 in the second semester of school
 0004           ; //
 0004           ; //  DESCRIPTION: Main file of the Psoc_robot project.
 0004           ; //
 0004           ; //-----------------------------------------------------------------------------
 0004           ; // 
 0004           ; //*****************************************************************************
 0004           ; //*****************************************************************************
 0004           ; ////***************************************************************************************
 0004           ; 
 0004           ; //------------------------------------------------------------------------------
 0004           ; // Name: Psoc_robot
 0004           ; //------------------------------------------------------------------------------
 0004           ; //------------------------------------------------------------------------------
 0004           ; // For Device: CY8C29466
 0004           ; //------------------------------------------------------------------------------
 0004           ; // Required Software:  PSoC Designer 5.3
 0004           ; 
 0004           ; // Project Settings: 
 0004           ; //      
 0004           ; //      Power Setting [Vcc/SysClk Freq]:  5.0V/24MHz
 0004           ; //      CPU Clock:                        Sysclk/1  
 0004           ; //      VC1                               Sysclk/12
 0004           ; //      VC2                               VC1/2 = Sysclk/24
 0004           ; //      
 0004           ; //            Timer1:                         `                         For reading one joystick channel aileron puls with 
 0004           ; //      Clock                                                            VC2
 0004           ; //      Period                             65535
 0004           ; //      CompareValue                       0
 0004           ; //      CompareType                        Less than or equal to
 0004           ; //      Conected to port                   Port_0_0
 0004           ; 
 0004           ; 
 0004           ; //    Timer2:                         `                         For reading one joystick channel      elevation puls with 1
 0004           ; //      Clock                                                            VC2
 0004           ; //      Period                             65535
 0004           ; //      CompareValue                       0
 0004           ; //      CompareType                        Less than or equal to
 0004           ; //      Conected to port                   Port_0_1
 0004           ; //    
 0004           ; //      Timer3:                               `                         For reading the  ultrasonic sensor
 0004           ; //      Clock                                                            VC2
 0004           ; //      Period                             65535
 0004           ; //      CompareValue                       0
 0004           ; //      CompareType                        Less than or equal to
 0004           ; //      Conected to port                   Port_0_2
 0004           ; //            
 0004           ; //            
 0004           ; //    Pwm conected to port                 Port_0_4
 0004           ; //    PWM:                                                               For controlling one motor on one side
 0004           ; //      Clock                              VC2
 0004           ; //      Enable                             High
 0004           ; //      Period                             1000
 0004           ; //      PulseWidth                         0
 0004           ; //      CompareType                        Less than 
 0004           ; //      Interrupt Type                     Terminal count
 0004           ; //      LCD:
 0004           ; //      LCDPort                            Port_2
 0004           ; //      
 0004           ; //---------------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include <math.h>      
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; 
 0004           ; #define DEBUG_LCD 0
 0004           ; 
 0004           ; //volatile BOOL ultrasoonInitDone;//dit gedaan om compiler te verplichten waarde terug in te lezen (Caching tegen te gaan )
 0004           ; 
 0004           ; #define MAX_POWER 1000
 0004           ; #define MIN_POWER 0
 0004           ; 
 0004           ; //
 0004           ; #define DATA_AVAILABLE_AILERON 0x01//staat in de eerste bit van de flag 
 0004           ; #define FALLING_EDGE_AILERON 0x02 // staat in de 2de bit van de flag 
 0004           ; WORD CapturePosEdgeAileron;
 0004           ; WORD CaptureNegEdgeAileron;
 0004           ; WORD PulseWidthAileron;
 0004           ; BYTE FlagsAileron;
 0004           ; #define MARGIN_AILERON 2
 0004           ; #define MIN_AILERON 0x60
 0004           ; #define CENTER_AILERON 0x8C
 0004           ; #define MAX_AILERON 0xB9
 0004           ; 
 0004           ; // 
 0004           ; #define DATA_AVAILABLE_ELEVATOR 0x01 // new for motorcontroll2
 0004           ; #define FALLING_EDGE_ELEVATOR 0x02    // new for motorcontroll2
 0004           ; WORD CapturePosEdgeElevator;
 0004           ; WORD CaptureNegEdgeElevator;
 0004           ; WORD PulseWidthElevator;
 0004           ; BYTE FlagsElevator;
 0004           ; #define MARGIN_ELEVATOR 2
 0004           ; #define MIN_ELEVATOR 0x60
 0004           ; #define CENTER_ELEVATOR 0x8C
 0004           ; #define MAX_ELEVATOR 0xB9
 0004           ; 
 0004           ; // for timer 3 and ultrasoon sensor 1
 0004           ; #define DATA_AVAILABLE_ULTRASOON 0x01 
 0004           ; #define FALLING_EDGE_ULTRASOON 0x02    
 0004           ; #define MIN_SAFE_DISTANCE  0x50
 0004           ; 
 0004           ; 
 0004           ; WORD CapturePosEdgeUltrasoon;
 0004           ; WORD CaptureNegEdgeUltrasoon;
 0004           ; WORD PulseWidthUltrasoon;
 0004           ; BYTE FlagUltrasoon;
 0004           ; 
 0004           ; void ultrasoonSensor(void);//long ultrasoon sensor(void);
 0004           ; 
 0004           ; #pragma interrupt_handler Timer1CaptureISR
 0004           ; #pragma interrupt_handler Timer2CaptureISR
 0004           ; #pragma interrupt_handler Timer3CaptureISR
 0004           ; 
 0004           ; 
 0004           ; BOOL Within(WORD value, WORD border, WORD margin)
 0004           ; {
 0004                   .dbline 120
 0004           ;       WORD lower = border - margin;
 0004 52FA              mov A,[X-6]
 0006 13F8              sub A,[X-8]
 0008 5401              mov [X+1],A
 000A 52F9              mov A,[X-7]
 000C 1BF7              sbb A,[X-9]
 000E 5400              mov [X+0],A
 0010                   .dbline 121
 0010           ;       WORD upper = border + margin;
 0010 52FA              mov A,[X-6]
 0012 03F8              add A,[X-8]
 0014 5403              mov [X+3],A
 0016 52F9              mov A,[X-7]
 0018 0BF7              adc A,[X-9]
 001A 5402              mov [X+2],A
 001C                   .dbline 123
 001C           ;       
 001C           ;       if (value >= lower
 001C 52FC              mov A,[X-4]
 001E 1301              sub A,[X+1]
 0020 52FB              mov A,[X-5]
 0022 1B00              sbb A,[X+0]
 0024 C012              jc L2
 0026           X0:
 0026 5203              mov A,[X+3]
 0028 13FC              sub A,[X-4]
 002A 5202              mov A,[X+2]
 002C 1BFB              sbb A,[X-5]
 002E C008              jc L2
 0030           X1:
 0030                   .dbline 125
 0030           ;       &&  value <= upper)
 0030           ;               return TRUE;
 0030 62D000            mov REG[0xd0],>__r0
 0033 5001              mov A,1
 0035 8006              xjmp L1
 0037           L2:
 0037                   .dbline 127
 0037           ;       else
 0037           ;               return FALSE;
 0037 62D000            mov REG[0xd0],>__r0
 003A 5000              mov A,0
 003C                   .dbline -2
 003C           L1:
 003C 38FC              add SP,-4
 003E 20                pop X
 003F                   .dbline 0 ; func end
 003F 7F                ret
 0040                   .dbsym l upper 2 i
 0040                   .dbsym l lower 0 i
 0040                   .dbsym l margin -9 i
 0040                   .dbsym l border -7 i
 0040                   .dbsym l value -5 i
 0040                   .dbend
 0040                   .dbfunc e EvaluateAileron _EvaluateAileron fD
 0040           ;          value -> X-7
 0040           _EvaluateAileron::
 0040                   .dbline -1
 0040 10                push X
 0041 4F                mov X,SP
 0042                   .dbline 132
 0042           ; }
 0042           ; 
 0042           ; // normalization function for Aileron (Timer1)
 0042           ; float EvaluateAileron(DWORD value)
 0042           ; {     
 0042                   .dbline 134
 0042           ;       // Check if pulsewidth data is available
 0042           ;       if(FlagsAileron & DATA_AVAILABLE_AILERON)
 0042 62D000            mov REG[0xd0],>_FlagsAileron
 0045 470001            tst [_FlagsAileron],1
 0048 A25E              jz L5
 004A                   .dbline 141
 004A           ;       {
 004A           ; #if (DEBUG_LCD)
 004A           ;               LCD_Position(0,0);
 004A           ;               LCD_PrHexInt(value);
 004A           ; #endif        
 004A           ;               // stick in center 
 004A           ;               if (Within(value, CENTER_AILERON, MARGIN_AILERON))
 004A                   .dbline 141
 004A 5000              mov A,0
 004C 08                push A
 004D 5002              mov A,2
 004F 08                push A
 0050 5000              mov A,0
 0052 08                push A
 0053 508C              mov A,-116
 0055 08                push A
 0056 62D000            mov REG[0xd0],>__r0
 0059 52FC              mov A,[X-4]
 005B 5300              mov [__r1],A
 005D 52FB              mov A,[X-5]
 005F 08                push A
 0060 5100              mov A,[__r1]
 0062 08                push A
 0063 9F9B              xcall _Within
 0065 38FA              add SP,-6
 0067 62D000            mov REG[0xd0],>__r0
 006A 3900              cmp A,0
 006C A00F              jz L7
 006E                   .dbline 147
 006E           ;               {
 006E           ; #if (DEBUG_LCD)
 006E           ;                       LCD_Position(0,5);
 006E           ;                       LCD_PrCString("C");
 006E           ; #endif                
 006E           ;                       return 0;
 006E                   .dbline 147
 006E 550000            mov [__r0],0
 0071 550000            mov [__r1],0
 0074 550000            mov [__r2],0
 0077 550000            mov [__r3],0
 007A 823B              xjmp L4
 007C           L7:
 007C                   .dbline 149
 007C           ;               }
 007C           ;               else if (value < CENTER_AILERON) // stick left
 007C 52FC              mov A,[X-4]
 007E 118C              sub A,-116
 0080 52FB              mov A,[X-5]
 0082 1900              sbb A,0
 0084 52FA              mov A,[X-6]
 0086 1900              sbb A,0
 0088 52F9              mov A,[X-7]
 008A 1900              sbb A,0
 008C D102              jnc L9
 008E           X2:
 008E                   .dbline 155
 008E           ;               {
 008E           ; #if (DEBUG_LCD)
 008E           ;                       LCD_Position(0,5);
 008E           ;                       LCD_PrCString("L");
 008E           ; #endif        
 008E           ;                       return ((float)value - CENTER_AILERON) / (float)(MAX_AILERON - CENTER_AILERON);
 008E                   .dbline 155
 008E 62D000            mov REG[0xd0],>__r0
 0091 52FC              mov A,[X-4]
 0093 2101              and A,1
 0095 5300              mov [__r3],A
 0097 52FB              mov A,[X-5]
 0099 2100              and A,0
 009B 5300              mov [__r2],A
 009D 52FA              mov A,[X-6]
 009F 2100              and A,0
 00A1 5300              mov [__r1],A
 00A3 52F9              mov A,[X-7]
 00A5 2100              and A,0
 00A7 08                push A
 00A8 5100              mov A,[__r1]
 00AA 08                push A
 00AB 5100              mov A,[__r2]
 00AD 08                push A
 00AE 5100              mov A,[__r3]
 00B0 08                push A
 00B1 7C0000            xcall __long2fp
 00B4 18                pop A
 00B5 5300              mov [__r3],A
 00B7 18                pop A
 00B8 5300              mov [__r2],A
 00BA 18                pop A
 00BB 5300              mov [__r1],A
 00BD 18                pop A
 00BE 5300              mov [__r0],A
 00C0 52F9              mov A,[X-7]
 00C2 5300              mov [__r4],A
 00C4 52FA              mov A,[X-6]
 00C6 5300              mov [__r5],A
 00C8 52FB              mov A,[X-5]
 00CA 5300              mov [__r6],A
 00CC 52FC              mov A,[X-4]
 00CE 5300              mov [__r7],A
 00D0 70FB              and F,-5
 00D2 6E00              rrc [__r4]
 00D4 6E00              rrc [__r5]
 00D6 6E00              rrc [__r6]
 00D8 6E00              rrc [__r7]
 00DA 5100              mov A,[__r4]
 00DC 08                push A
 00DD 5100              mov A,[__r5]
 00DF 08                push A
 00E0 5100              mov A,[__r6]
 00E2 08                push A
 00E3 5100              mov A,[__r7]
 00E5 08                push A
 00E6 7C0000            xcall __long2fp
 00E9 18                pop A
 00EA 5300              mov [__r7],A
 00EC 18                pop A
 00ED 5300              mov [__r6],A
 00EF 18                pop A
 00F0 5300              mov [__r5],A
 00F2 18                pop A
 00F3 08                push A
 00F4 5100              mov A,[__r5]
 00F6 08                push A
 00F7 5100              mov A,[__r6]
 00F9 08                push A
 00FA 5100              mov A,[__r7]
 00FC 08                push A
 00FD 5040              mov A,64
 00FF 08                push A
 0100 5000              mov A,0
 0102 08                push A
 0103 08                push A
 0104 08                push A
 0105 7C0000            xcall __fpmul
 0108 18                pop A
 0109 5300              mov [__r7],A
 010B 18                pop A
 010C 5300              mov [__r6],A
 010E 18                pop A
 010F 5300              mov [__r5],A
 0111 18                pop A
 0112 5300              mov [__r4],A
 0114 38FC              add SP,-4
 0116 5100              mov A,[__r0]
 0118 08                push A
 0119 5100              mov A,[__r1]
 011B 08                push A
 011C 5100              mov A,[__r2]
 011E 08                push A
 011F 5100              mov A,[__r3]
 0121 08                push A
 0122 5100              mov A,[__r4]
 0124 08                push A
 0125 5100              mov A,[__r5]
 0127 08                push A
 0128 5100              mov A,[__r6]
 012A 08                push A
 012B 5100              mov A,[__r7]
 012D 08                push A
 012E 7C0000            xcall __fpadd
 0131 18                pop A
 0132 5300              mov [__r3],A
 0134 18                pop A
 0135 5300              mov [__r2],A
 0137 18                pop A
 0138 5300              mov [__r1],A
 013A 18                pop A
 013B 5300              mov [__r0],A
 013D 38FC              add SP,-4
 013F 5043              mov A,67
 0141 08                push A
 0142 500C              mov A,12
 0144 08                push A
 0145 5000              mov A,0
 0147 08                push A
 0148 08                push A
 0149 5100              mov A,[__r0]
 014B 08                push A
 014C 5100              mov A,[__r1]
 014E 08                push A
 014F 5100              mov A,[__r2]
 0151 08                push A
 0152 5100              mov A,[__r3]
 0154 08                push A
 0155 7C0000            xcall __fpsub
 0158 18                pop A
 0159 5300              mov [__r3],A
 015B 18                pop A
 015C 5300              mov [__r2],A
 015E 18                pop A
 015F 5300              mov [__r1],A
 0161 18                pop A
 0162 5300              mov [__r0],A
 0164 38FC              add SP,-4
 0166 5042              mov A,66
 0168 08                push A
 0169 5034              mov A,52
 016B 08                push A
 016C 5000              mov A,0
 016E 08                push A
 016F 08                push A
 0170 5100              mov A,[__r0]
 0172 08                push A
 0173 5100              mov A,[__r1]
 0175 08                push A
 0176 5100              mov A,[__r2]
 0178 08                push A
 0179 5100              mov A,[__r3]
 017B 08                push A
 017C 7C0000            xcall __fpdiv
 017F 18                pop A
 0180 5300              mov [__r3],A
 0182 18                pop A
 0183 5300              mov [__r2],A
 0185 18                pop A
 0186 5300              mov [__r1],A
 0188 18                pop A
 0189 5300              mov [__r0],A
 018B 38FC              add SP,-4
 018D 8128              xjmp L4
 018F           L9:
 018F                   .dbline 157
 018F           ;               }
 018F           ;               else if (value > CENTER_AILERON) // stick right
 018F 508C              mov A,-116
 0191 13FC              sub A,[X-4]
 0193 5000              mov A,0
 0195 1BFB              sbb A,[X-5]
 0197 5000              mov A,0
 0199 1BFA              sbb A,[X-6]
 019B 5000              mov A,0
 019D 1BF9              sbb A,[X-7]
 019F D101              jnc L11
 01A1           X3:
 01A1                   .dbline 163
 01A1           ;               {                       
 01A1           ; #if (DEBUG_LCD)
 01A1           ;                       LCD_Position(0,5);
 01A1           ;                       LCD_PrCString("R");
 01A1           ; #endif                        
 01A1           ;                       return -(CENTER_AILERON - (float)value) / (float)(CENTER_AILERON - MIN_AILERON);
 01A1                   .dbline 163
 01A1 62D000            mov REG[0xd0],>__r0
 01A4 52FC              mov A,[X-4]
 01A6 2101              and A,1
 01A8 5300              mov [__r3],A
 01AA 52FB              mov A,[X-5]
 01AC 2100              and A,0
 01AE 5300              mov [__r2],A
 01B0 52FA              mov A,[X-6]
 01B2 2100              and A,0
 01B4 5300              mov [__r1],A
 01B6 52F9              mov A,[X-7]
 01B8 2100              and A,0
 01BA 08                push A
 01BB 5100              mov A,[__r1]
 01BD 08                push A
 01BE 5100              mov A,[__r2]
 01C0 08                push A
 01C1 5100              mov A,[__r3]
 01C3 08                push A
 01C4 7C0000            xcall __long2fp
 01C7 18                pop A
 01C8 5300              mov [__r3],A
 01CA 18                pop A
 01CB 5300              mov [__r2],A
 01CD 18                pop A
 01CE 5300              mov [__r1],A
 01D0 18                pop A
 01D1 5300              mov [__r0],A
 01D3 52F9              mov A,[X-7]
 01D5 5300              mov [__r4],A
 01D7 52FA              mov A,[X-6]
 01D9 5300              mov [__r5],A
 01DB 52FB              mov A,[X-5]
 01DD 5300              mov [__r6],A
 01DF 52FC              mov A,[X-4]
 01E1 5300              mov [__r7],A
 01E3 70FB              and F,-5
 01E5 6E00              rrc [__r4]
 01E7 6E00              rrc [__r5]
 01E9 6E00              rrc [__r6]
 01EB 6E00              rrc [__r7]
 01ED 5100              mov A,[__r4]
 01EF 08                push A
 01F0 5100              mov A,[__r5]
 01F2 08                push A
 01F3 5100              mov A,[__r6]
 01F5 08                push A
 01F6 5100              mov A,[__r7]
 01F8 08                push A
 01F9 7C0000            xcall __long2fp
 01FC 18                pop A
 01FD 5300              mov [__r7],A
 01FF 18                pop A
 0200 5300              mov [__r6],A
 0202 18                pop A
 0203 5300              mov [__r5],A
 0205 18                pop A
 0206 08                push A
 0207 5100              mov A,[__r5]
 0209 08                push A
 020A 5100              mov A,[__r6]
 020C 08                push A
 020D 5100              mov A,[__r7]
 020F 08                push A
 0210 5040              mov A,64
 0212 08                push A
 0213 5000              mov A,0
 0215 08                push A
 0216 08                push A
 0217 08                push A
 0218 7C0000            xcall __fpmul
 021B 18                pop A
 021C 5300              mov [__r7],A
 021E 18                pop A
 021F 5300              mov [__r6],A
 0221 18                pop A
 0222 5300              mov [__r5],A
 0224 18                pop A
 0225 5300              mov [__r4],A
 0227 38FC              add SP,-4
 0229 5100              mov A,[__r0]
 022B 08                push A
 022C 5100              mov A,[__r1]
 022E 08                push A
 022F 5100              mov A,[__r2]
 0231 08                push A
 0232 5100              mov A,[__r3]
 0234 08                push A
 0235 5100              mov A,[__r4]
 0237 08                push A
 0238 5100              mov A,[__r5]
 023A 08                push A
 023B 5100              mov A,[__r6]
 023D 08                push A
 023E 5100              mov A,[__r7]
 0240 08                push A
 0241 7C0000            xcall __fpadd
 0244 18                pop A
 0245 5300              mov [__r3],A
 0247 18                pop A
 0248 5300              mov [__r2],A
 024A 18                pop A
 024B 5300              mov [__r1],A
 024D 18                pop A
 024E 38FC              add SP,-4
 0250 08                push A
 0251 5100              mov A,[__r1]
 0253 08                push A
 0254 5100              mov A,[__r2]
 0256 08                push A
 0257 5100              mov A,[__r3]
 0259 08                push A
 025A 5043              mov A,67
 025C 08                push A
 025D 500C              mov A,12
 025F 08                push A
 0260 5000              mov A,0
 0262 08                push A
 0263 08                push A
 0264 7C0000            xcall __fpsub
 0267 18                pop A
 0268 5300              mov [__r3],A
 026A 18                pop A
 026B 5300              mov [__r2],A
 026D 18                pop A
 026E 5300              mov [__r1],A
 0270 18                pop A
 0271 5300              mov [__r0],A
 0273 38FC              add SP,-4
 0275 360080            xor [__r0],-128
 0278 5042              mov A,66
 027A 08                push A
 027B 5030              mov A,48
 027D 08                push A
 027E 5000              mov A,0
 0280 08                push A
 0281 08                push A
 0282 5100              mov A,[__r0]
 0284 08                push A
 0285 5100              mov A,[__r1]
 0287 08                push A
 0288 5100              mov A,[__r2]
 028A 08                push A
 028B 5100              mov A,[__r3]
 028D 08                push A
 028E 7C0000            xcall __fpdiv
 0291 18                pop A
 0292 5300              mov [__r3],A
 0294 18                pop A
 0295 5300              mov [__r2],A
 0297 18                pop A
 0298 5300              mov [__r1],A
 029A 18                pop A
 029B 5300              mov [__r0],A
 029D 38FC              add SP,-4
 029F 8016              xjmp L4
 02A1           L11:
 02A1                   .dbline 167
 02A1           ;               }
 02A1           ;               
 02A1           ;               // action finished, clear flag to avoid doing it again
 02A1           ;               FlagsAileron &= ~DATA_AVAILABLE_AILERON;
 02A1 62D000            mov REG[0xd0],>_FlagsAileron
 02A4 2600FE            and [_FlagsAileron],-2
 02A7                   .dbline 168
 02A7           ;       }
 02A7           L5:
 02A7                   .dbline 170
 02A7           ;       
 02A7           ;       return 0;
 02A7 62D000            mov REG[0xd0],>__r0
 02AA 550000            mov [__r0],0
 02AD 550000            mov [__r1],0
 02B0 550000            mov [__r2],0
 02B3 550000            mov [__r3],0
 02B6                   .dbline -2
 02B6           L4:
 02B6 20                pop X
 02B7                   .dbline 0 ; func end
 02B7 7F                ret
 02B8                   .dbsym l value -7 l
 02B8                   .dbend
 02B8                   .dbfunc e EvaluateElevator _EvaluateElevator fD
 02B8           ;          value -> X-7
 02B8           _EvaluateElevator::
 02B8                   .dbline -1
 02B8 10                push X
 02B9 4F                mov X,SP
 02BA                   .dbline 174
 02BA           ; }
 02BA           ; // normalization function for Elevator(Timer2)
 02BA           ; float EvaluateElevator(DWORD value)
 02BA           ; {
 02BA                   .dbline 176
 02BA           ;       // Check if pulsewidth data is available
 02BA           ;       if(FlagsElevator & DATA_AVAILABLE_ELEVATOR)
 02BA 62D000            mov REG[0xd0],>_FlagsElevator
 02BD 470001            tst [_FlagsElevator],1
 02C0 A25E              jz L14
 02C2                   .dbline 183
 02C2           ;       {
 02C2           ; #if (DEBUG_LCD)
 02C2           ;               LCD_Position(1,0);
 02C2           ;               LCD_PrHexInt(value);
 02C2           ; #endif        
 02C2           ;               // stick in center 
 02C2           ;               if (Within(value, CENTER_ELEVATOR, MARGIN_ELEVATOR))
 02C2                   .dbline 183
 02C2 5000              mov A,0
 02C4 08                push A
 02C5 5002              mov A,2
 02C7 08                push A
 02C8 5000              mov A,0
 02CA 08                push A
 02CB 508C              mov A,-116
 02CD 08                push A
 02CE 62D000            mov REG[0xd0],>__r0
 02D1 52FC              mov A,[X-4]
 02D3 5300              mov [__r1],A
 02D5 52FB              mov A,[X-5]
 02D7 08                push A
 02D8 5100              mov A,[__r1]
 02DA 08                push A
 02DB 9D23              xcall _Within
 02DD 38FA              add SP,-6
 02DF 62D000            mov REG[0xd0],>__r0
 02E2 3900              cmp A,0
 02E4 A00F              jz L16
 02E6                   .dbline 189
 02E6           ;               {
 02E6           ; #if (DEBUG_LCD)
 02E6           ;                       LCD_Position(1,5);
 02E6           ;                       LCD_PrCString("C");
 02E6           ; #endif        
 02E6           ;                       return 0;
 02E6                   .dbline 189
 02E6 550000            mov [__r0],0
 02E9 550000            mov [__r1],0
 02EC 550000            mov [__r2],0
 02EF 550000            mov [__r3],0
 02F2 823B              xjmp L13
 02F4           L16:
 02F4                   .dbline 191
 02F4           ;               }
 02F4           ;               else if (value > CENTER_ELEVATOR) // stick up
 02F4 508C              mov A,-116
 02F6 13FC              sub A,[X-4]
 02F8 5000              mov A,0
 02FA 1BFB              sbb A,[X-5]
 02FC 5000              mov A,0
 02FE 1BFA              sbb A,[X-6]
 0300 5000              mov A,0
 0302 1BF9              sbb A,[X-7]
 0304 D102              jnc L18
 0306           X4:
 0306                   .dbline 197
 0306           ;               {
 0306           ; #if (DEBUG_LCD)
 0306           ;                       LCD_Position(1,5);
 0306           ;                       LCD_PrCString("U");
 0306           ; #endif                        
 0306           ;                       return ((float)value - CENTER_ELEVATOR) / (float)(MAX_ELEVATOR - CENTER_ELEVATOR);
 0306                   .dbline 197
 0306 62D000            mov REG[0xd0],>__r0
 0309 52FC              mov A,[X-4]
 030B 2101              and A,1
 030D 5300              mov [__r3],A
 030F 52FB              mov A,[X-5]
 0311 2100              and A,0
 0313 5300              mov [__r2],A
 0315 52FA              mov A,[X-6]
 0317 2100              and A,0
 0319 5300              mov [__r1],A
 031B 52F9              mov A,[X-7]
 031D 2100              and A,0
 031F 08                push A
 0320 5100              mov A,[__r1]
 0322 08                push A
 0323 5100              mov A,[__r2]
 0325 08                push A
 0326 5100              mov A,[__r3]
 0328 08                push A
 0329 7C0000            xcall __long2fp
 032C 18                pop A
 032D 5300              mov [__r3],A
 032F 18                pop A
 0330 5300              mov [__r2],A
 0332 18                pop A
 0333 5300              mov [__r1],A
 0335 18                pop A
 0336 5300              mov [__r0],A
 0338 52F9              mov A,[X-7]
 033A 5300              mov [__r4],A
 033C 52FA              mov A,[X-6]
 033E 5300              mov [__r5],A
 0340 52FB              mov A,[X-5]
 0342 5300              mov [__r6],A
 0344 52FC              mov A,[X-4]
 0346 5300              mov [__r7],A
 0348 70FB              and F,-5
 034A 6E00              rrc [__r4]
 034C 6E00              rrc [__r5]
 034E 6E00              rrc [__r6]
 0350 6E00              rrc [__r7]
 0352 5100              mov A,[__r4]
 0354 08                push A
 0355 5100              mov A,[__r5]
 0357 08                push A
 0358 5100              mov A,[__r6]
 035A 08                push A
 035B 5100              mov A,[__r7]
 035D 08                push A
 035E 7C0000            xcall __long2fp
 0361 18                pop A
 0362 5300              mov [__r7],A
 0364 18                pop A
 0365 5300              mov [__r6],A
 0367 18                pop A
 0368 5300              mov [__r5],A
 036A 18                pop A
 036B 08                push A
 036C 5100              mov A,[__r5]
 036E 08                push A
 036F 5100              mov A,[__r6]
 0371 08                push A
 0372 5100              mov A,[__r7]
 0374 08                push A
 0375 5040              mov A,64
 0377 08                push A
 0378 5000              mov A,0
 037A 08                push A
 037B 08                push A
 037C 08                push A
 037D 7C0000            xcall __fpmul
 0380 18                pop A
 0381 5300              mov [__r7],A
 0383 18                pop A
 0384 5300              mov [__r6],A
 0386 18                pop A
 0387 5300              mov [__r5],A
 0389 18                pop A
 038A 5300              mov [__r4],A
 038C 38FC              add SP,-4
 038E 5100              mov A,[__r0]
 0390 08                push A
 0391 5100              mov A,[__r1]
 0393 08                push A
 0394 5100              mov A,[__r2]
 0396 08                push A
 0397 5100              mov A,[__r3]
 0399 08                push A
 039A 5100              mov A,[__r4]
 039C 08                push A
 039D 5100              mov A,[__r5]
 039F 08                push A
 03A0 5100              mov A,[__r6]
 03A2 08                push A
 03A3 5100              mov A,[__r7]
 03A5 08                push A
 03A6 7C0000            xcall __fpadd
 03A9 18                pop A
 03AA 5300              mov [__r3],A
 03AC 18                pop A
 03AD 5300              mov [__r2],A
 03AF 18                pop A
 03B0 5300              mov [__r1],A
 03B2 18                pop A
 03B3 5300              mov [__r0],A
 03B5 38FC              add SP,-4
 03B7 5043              mov A,67
 03B9 08                push A
 03BA 500C              mov A,12
 03BC 08                push A
 03BD 5000              mov A,0
 03BF 08                push A
 03C0 08                push A
 03C1 5100              mov A,[__r0]
 03C3 08                push A
 03C4 5100              mov A,[__r1]
 03C6 08                push A
 03C7 5100              mov A,[__r2]
 03C9 08                push A
 03CA 5100              mov A,[__r3]
 03CC 08                push A
 03CD 7C0000            xcall __fpsub
 03D0 18                pop A
 03D1 5300              mov [__r3],A
 03D3 18                pop A
 03D4 5300              mov [__r2],A
 03D6 18                pop A
 03D7 5300              mov [__r1],A
 03D9 18                pop A
 03DA 5300              mov [__r0],A
 03DC 38FC              add SP,-4
 03DE 5042              mov A,66
 03E0 08                push A
 03E1 5034              mov A,52
 03E3 08                push A
 03E4 5000              mov A,0
 03E6 08                push A
 03E7 08                push A
 03E8 5100              mov A,[__r0]
 03EA 08                push A
 03EB 5100              mov A,[__r1]
 03ED 08                push A
 03EE 5100              mov A,[__r2]
 03F0 08                push A
 03F1 5100              mov A,[__r3]
 03F3 08                push A
 03F4 7C0000            xcall __fpdiv
 03F7 18                pop A
 03F8 5300              mov [__r3],A
 03FA 18                pop A
 03FB 5300              mov [__r2],A
 03FD 18                pop A
 03FE 5300              mov [__r1],A
 0400 18                pop A
 0401 5300              mov [__r0],A
 0403 38FC              add SP,-4
 0405 8128              xjmp L13
 0407           L18:
 0407                   .dbline 199
 0407           ;               }
 0407           ;               else if (value < CENTER_ELEVATOR) // stick down
 0407 52FC              mov A,[X-4]
 0409 118C              sub A,-116
 040B 52FB              mov A,[X-5]
 040D 1900              sbb A,0
 040F 52FA              mov A,[X-6]
 0411 1900              sbb A,0
 0413 52F9              mov A,[X-7]
 0415 1900              sbb A,0
 0417 D101              jnc L20
 0419           X5:
 0419                   .dbline 205
 0419           ;               {                       
 0419           ; #if (DEBUG_LCD)
 0419           ;                       LCD_Position(1,5);
 0419           ;                       LCD_PrCString("D");
 0419           ; #endif                        
 0419           ;                       return -(CENTER_ELEVATOR - (float)value) / (float)(CENTER_ELEVATOR - MIN_ELEVATOR);
 0419                   .dbline 205
 0419 62D000            mov REG[0xd0],>__r0
 041C 52FC              mov A,[X-4]
 041E 2101              and A,1
 0420 5300              mov [__r3],A
 0422 52FB              mov A,[X-5]
 0424 2100              and A,0
 0426 5300              mov [__r2],A
 0428 52FA              mov A,[X-6]
 042A 2100              and A,0
 042C 5300              mov [__r1],A
 042E 52F9              mov A,[X-7]
 0430 2100              and A,0
 0432 08                push A
 0433 5100              mov A,[__r1]
 0435 08                push A
 0436 5100              mov A,[__r2]
 0438 08                push A
 0439 5100              mov A,[__r3]
 043B 08                push A
 043C 7C0000            xcall __long2fp
 043F 18                pop A
 0440 5300              mov [__r3],A
 0442 18                pop A
 0443 5300              mov [__r2],A
 0445 18                pop A
 0446 5300              mov [__r1],A
 0448 18                pop A
 0449 5300              mov [__r0],A
 044B 52F9              mov A,[X-7]
 044D 5300              mov [__r4],A
 044F 52FA              mov A,[X-6]
 0451 5300              mov [__r5],A
 0453 52FB              mov A,[X-5]
 0455 5300              mov [__r6],A
 0457 52FC              mov A,[X-4]
 0459 5300              mov [__r7],A
 045B 70FB              and F,-5
 045D 6E00              rrc [__r4]
 045F 6E00              rrc [__r5]
 0461 6E00              rrc [__r6]
 0463 6E00              rrc [__r7]
 0465 5100              mov A,[__r4]
 0467 08                push A
 0468 5100              mov A,[__r5]
 046A 08                push A
 046B 5100              mov A,[__r6]
 046D 08                push A
 046E 5100              mov A,[__r7]
 0470 08                push A
 0471 7C0000            xcall __long2fp
 0474 18                pop A
 0475 5300              mov [__r7],A
 0477 18                pop A
 0478 5300              mov [__r6],A
 047A 18                pop A
 047B 5300              mov [__r5],A
 047D 18                pop A
 047E 08                push A
 047F 5100              mov A,[__r5]
 0481 08                push A
 0482 5100              mov A,[__r6]
 0484 08                push A
 0485 5100              mov A,[__r7]
 0487 08                push A
 0488 5040              mov A,64
 048A 08                push A
 048B 5000              mov A,0
 048D 08                push A
 048E 08                push A
 048F 08                push A
 0490 7C0000            xcall __fpmul
 0493 18                pop A
 0494 5300              mov [__r7],A
 0496 18                pop A
 0497 5300              mov [__r6],A
 0499 18                pop A
 049A 5300              mov [__r5],A
 049C 18                pop A
 049D 5300              mov [__r4],A
 049F 38FC              add SP,-4
 04A1 5100              mov A,[__r0]
 04A3 08                push A
 04A4 5100              mov A,[__r1]
 04A6 08                push A
 04A7 5100              mov A,[__r2]
 04A9 08                push A
 04AA 5100              mov A,[__r3]
 04AC 08                push A
 04AD 5100              mov A,[__r4]
 04AF 08                push A
 04B0 5100              mov A,[__r5]
 04B2 08                push A
 04B3 5100              mov A,[__r6]
 04B5 08                push A
 04B6 5100              mov A,[__r7]
 04B8 08                push A
 04B9 7C0000            xcall __fpadd
 04BC 18                pop A
 04BD 5300              mov [__r3],A
 04BF 18                pop A
 04C0 5300              mov [__r2],A
 04C2 18                pop A
 04C3 5300              mov [__r1],A
 04C5 18                pop A
 04C6 38FC              add SP,-4
 04C8 08                push A
 04C9 5100              mov A,[__r1]
 04CB 08                push A
 04CC 5100              mov A,[__r2]
 04CE 08                push A
 04CF 5100              mov A,[__r3]
 04D1 08                push A
 04D2 5043              mov A,67
 04D4 08                push A
 04D5 500C              mov A,12
 04D7 08                push A
 04D8 5000              mov A,0
 04DA 08                push A
 04DB 08                push A
 04DC 7C0000            xcall __fpsub
 04DF 18                pop A
 04E0 5300              mov [__r3],A
 04E2 18                pop A
 04E3 5300              mov [__r2],A
 04E5 18                pop A
 04E6 5300              mov [__r1],A
 04E8 18                pop A
 04E9 5300              mov [__r0],A
 04EB 38FC              add SP,-4
 04ED 360080            xor [__r0],-128
 04F0 5042              mov A,66
 04F2 08                push A
 04F3 5030              mov A,48
 04F5 08                push A
 04F6 5000              mov A,0
 04F8 08                push A
 04F9 08                push A
 04FA 5100              mov A,[__r0]
 04FC 08                push A
 04FD 5100              mov A,[__r1]
 04FF 08                push A
 0500 5100              mov A,[__r2]
 0502 08                push A
 0503 5100              mov A,[__r3]
 0505 08                push A
 0506 7C0000            xcall __fpdiv
 0509 18                pop A
 050A 5300              mov [__r3],A
 050C 18                pop A
 050D 5300              mov [__r2],A
 050F 18                pop A
 0510 5300              mov [__r1],A
 0512 18                pop A
 0513 5300              mov [__r0],A
 0515 38FC              add SP,-4
 0517 8016              xjmp L13
 0519           L20:
 0519                   .dbline 209
 0519           ;               }
 0519           ;               
 0519           ;               // action finished, clear flag to avoid doing it again
 0519           ;               FlagsElevator &= ~DATA_AVAILABLE_ELEVATOR;
 0519 62D000            mov REG[0xd0],>_FlagsElevator
 051C 2600FE            and [_FlagsElevator],-2
 051F                   .dbline 210
 051F           ;       }
 051F           L14:
 051F                   .dbline 212
 051F           ;       
 051F           ;       return 0;
 051F 62D000            mov REG[0xd0],>__r0
 0522 550000            mov [__r0],0
 0525 550000            mov [__r1],0
 0528 550000            mov [__r2],0
 052B 550000            mov [__r3],0
 052E                   .dbline -2
 052E           L13:
 052E 20                pop X
 052F                   .dbline 0 ; func end
 052F 7F                ret
 0530                   .dbsym l value -7 l
 0530                   .dbend
 0530                   .dbfunc e TriggerUltrasoon _TriggerUltrasoon fV
 0530           _TriggerUltrasoon::
 0530                   .dbline -1
 0530                   .dbline 216
 0530           ; }
 0530           ; 
 0530           ; void TriggerUltrasoon(void)
 0530           ; {
 0530                   .dbline 217
 0530           ;       PRT1DR |= 0x10;// setting p1[4]
 0530 430410            or REG[0x4],16
 0533                   .dbline 218
 0533           ;     asm("nop");
 0533 40                        nop
 0534           
 0534                   .dbline 219
 0534           ;       asm("nop");
 0534 40                        nop
 0535           
 0535                   .dbline 220
 0535           ;       asm("nop");
 0535 40                        nop
 0536           
 0536                   .dbline 221
 0536           ;       asm("nop");
 0536 40                        nop
 0537           
 0537                   .dbline 222
 0537           ;       asm("nop");
 0537 40                        nop
 0538           
 0538                   .dbline 223
 0538           ;       asm("nop");
 0538 40                        nop
 0539           
 0539                   .dbline 224
 0539           ;       asm("nop");
 0539 40                        nop
 053A           
 053A                   .dbline 225
 053A           ;       asm("nop");
 053A 40                        nop
 053B           
 053B                   .dbline 226
 053B           ;       asm("nop");
 053B 40                        nop
 053C           
 053C                   .dbline 227
 053C           ;       asm("nop");
 053C 40                        nop
 053D           
 053D                   .dbline 228
 053D           ;       asm("nop");
 053D 40                        nop
 053E           
 053E                   .dbline 229
 053E           ;       asm("nop");
 053E 40                        nop
 053F           
 053F                   .dbline 230
 053F           ;       asm("nop");
 053F 40                        nop
 0540           
 0540                   .dbline 231
 0540           ;       asm("nop");
 0540 40                        nop
 0541           
 0541                   .dbline 232
 0541           ;       asm("nop");
 0541 40                        nop
 0542           
 0542                   .dbline 233
 0542           ;       asm("nop");
 0542 40                        nop
 0543           
 0543                   .dbline 234
 0543           ;       asm("nop");
 0543 40                        nop
 0544           
 0544                   .dbline 235
 0544           ;       asm("nop");
 0544 40                        nop
 0545           
 0545                   .dbline 236
 0545           ;       PRT1DR &= ~0x10;// clearing   P1[4]
 0545 4104EF            and REG[0x4],-17
 0548                   .dbline -2
 0548           L22:
 0548                   .dbline 0 ; func end
 0548 7F                ret
 0549                   .dbend
 0549                   .dbfunc e EvaluateUltrasoonSensor _EvaluateUltrasoonSensor fD
 0549           ; pulseWidthUltrasoon -> X+0
 0549           _EvaluateUltrasoonSensor::
 0549                   .dbline -1
 0549 10                push X
 054A 4F                mov X,SP
 054B 3802              add SP,2
 054D                   .dbline 240
 054D           ; }
 054D           ; 
 054D           ; float EvaluateUltrasoonSensor(void)//(Timer3)
 054D           ; {
 054D                   .dbline 241
 054D           ;       if (FlagUltrasoon & DATA_AVAILABLE_ULTRASOON)// do if databit is set 
 054D 62D000            mov REG[0xd0],>_FlagUltrasoon
 0550 470001            tst [_FlagUltrasoon],1
 0553 A0F5              jz L24
 0555                   .dbline 243
 0555           ;     {    
 0555           ;               WORD pulseWidthUltrasoon = PulseWidthUltrasoon;
 0555                   .dbline 243
 0555 62D000            mov REG[0xd0],>_PulseWidthUltrasoon
 0558 5101              mov A,[_PulseWidthUltrasoon+1]
 055A 5401              mov [X+1],A
 055C 5100              mov A,[_PulseWidthUltrasoon]
 055E 5400              mov [X+0],A
 0560                   .dbline 249
 0560           ; 
 0560           ; #if (DEBUG_LCD)
 0560           ;               LCD_Position(1,12);
 0560           ;               LCD_PrHexInt(pulseWidthUltrasoon);
 0560           ; #endif
 0560           ;               FlagUltrasoon &= ~DATA_AVAILABLE_ULTRASOON;
 0560 62D000            mov REG[0xd0],>_FlagUltrasoon
 0563 2600FE            and [_FlagUltrasoon],-2
 0566                   .dbline 252
 0566           ;               
 0566           ;               // als meting gebeurt is trigger sensor opnieuw en we disablen timer1
 0566           ;               TriggerUltrasoon();     
 0566 9FC8              xcall _TriggerUltrasoon
 0568                   .dbline 254
 0568           ;               
 0568           ;               return pulseWidthUltrasoon;
 0568 62D000            mov REG[0xd0],>__r0
 056B 5201              mov A,[X+1]
 056D 2101              and A,1
 056F 5300              mov [__r1],A
 0571 5200              mov A,[X+0]
 0573 2100              and A,0
 0575 5300              mov [__r0],A
 0577 5100              mov A,[__r1]
 0579 5300              mov [__r3],A
 057B 5100              mov A,[__r0]
 057D 5300              mov [__r2],A
 057F 470080            tst [__r2],-128
 0582 A009              jz X6
 0584 5500FF            mov [__r1],-1
 0587 5500FF            mov [__r0],-1
 058A 800A              jmp X7
 058C           X6:
 058C 62D000            mov REG[0xd0],>__r0
 058F 550000            mov [__r1],0
 0592 550000            mov [__r0],0
 0595           X7:
 0595 62D000            mov REG[0xd0],>__r0
 0598 5100              mov A,[__r0]
 059A 08                push A
 059B 5100              mov A,[__r1]
 059D 08                push A
 059E 5100              mov A,[__r2]
 05A0 08                push A
 05A1 5100              mov A,[__r3]
 05A3 08                push A
 05A4 7C0000            xcall __long2fp
 05A7 18                pop A
 05A8 5300              mov [__r3],A
 05AA 18                pop A
 05AB 5300              mov [__r2],A
 05AD 18                pop A
 05AE 5300              mov [__r1],A
 05B0 18                pop A
 05B1 5300              mov [__r0],A
 05B3 5201              mov A,[X+1]
 05B5 5300              mov [__r5],A
 05B7 5200              mov A,[X+0]
 05B9 5300              mov [__r4],A
 05BB 70FB              and F,-5
 05BD 6E00              rrc [__r4]
 05BF 6E00              rrc [__r5]
 05C1 5100              mov A,[__r5]
 05C3 5300              mov [__r7],A
 05C5 5100              mov A,[__r4]
 05C7 5300              mov [__r6],A
 05C9 470080            tst [__r6],-128
 05CC A009              jz X8
 05CE 5500FF            mov [__r5],-1
 05D1 5500FF            mov [__r4],-1
 05D4 800A              jmp X9
 05D6           X8:
 05D6 62D000            mov REG[0xd0],>__r0
 05D9 550000            mov [__r5],0
 05DC 550000            mov [__r4],0
 05DF           X9:
 05DF 62D000            mov REG[0xd0],>__r0
 05E2 5100              mov A,[__r4]
 05E4 08                push A
 05E5 5100              mov A,[__r5]
 05E7 08                push A
 05E8 5100              mov A,[__r6]
 05EA 08                push A
 05EB 5100              mov A,[__r7]
 05ED 08                push A
 05EE 7C0000            xcall __long2fp
 05F1 18                pop A
 05F2 5300              mov [__r7],A
 05F4 18                pop A
 05F5 5300              mov [__r6],A
 05F7 18                pop A
 05F8 5300              mov [__r5],A
 05FA 18                pop A
 05FB 08                push A
 05FC 5100              mov A,[__r5]
 05FE 08                push A
 05FF 5100              mov A,[__r6]
 0601 08                push A
 0602 5100              mov A,[__r7]
 0604 08                push A
 0605 5040              mov A,64
 0607 08                push A
 0608 5000              mov A,0
 060A 08                push A
 060B 08                push A
 060C 08                push A
 060D 7C0000            xcall __fpmul
 0610 18                pop A
 0611 5300              mov [__r7],A
 0613 18                pop A
 0614 5300              mov [__r6],A
 0616 18                pop A
 0617 5300              mov [__r5],A
 0619 18                pop A
 061A 5300              mov [__r4],A
 061C 38FC              add SP,-4
 061E 5100              mov A,[__r0]
 0620 08                push A
 0621 5100              mov A,[__r1]
 0623 08                push A
 0624 5100              mov A,[__r2]
 0626 08                push A
 0627 5100              mov A,[__r3]
 0629 08                push A
 062A 5100              mov A,[__r4]
 062C 08                push A
 062D 5100              mov A,[__r5]
 062F 08                push A
 0630 5100              mov A,[__r6]
 0632 08                push A
 0633 5100              mov A,[__r7]
 0635 08                push A
 0636 7C0000            xcall __fpadd
 0639 18                pop A
 063A 5300              mov [__r3],A
 063C 18                pop A
 063D 5300              mov [__r2],A
 063F 18                pop A
 0640 5300              mov [__r1],A
 0642 18                pop A
 0643 5300              mov [__r0],A
 0645 38FC              add SP,-4
 0647 8010              xjmp L23
 0649           L24:
 0649                   .dbline 257
 0649           ;     }  
 0649           ;       
 0649           ;       return MIN_SAFE_DISTANCE + 1;
 0649 62D000            mov REG[0xd0],>__r0
 064C 550042            mov [__r0],66
 064F 5500A2            mov [__r1],-94
 0652 550000            mov [__r2],0
 0655 550000            mov [__r3],0
 0658                   .dbline -2
 0658           L23:
 0658 38FE              add SP,-2
 065A 20                pop X
 065B                   .dbline 0 ; func end
 065B 7F                ret
 065C                   .dbsym l pulseWidthUltrasoon 0 i
 065C                   .dbend
 065C                   .dbfunc e main _main fV
 065C           ;      direction -> X+25
 065C           ;       distance -> X+21
 065C           ;        forward -> X+20
 065C           ; elevatorNormalized -> X+16
 065C           ; aileronNormalized -> X+12
 065C           ;     motorRight -> X+8
 065C           ;      motorLeft -> X+4
 065C           ;          speed -> X+0
 065C           _main::
 065C                   .dbline -1
 065C 10                push X
 065D 4F                mov X,SP
 065E 3823              add SP,35
 0660                   .dbline 261
 0660           ; }
 0660           ; 
 0660           ; void main(void)
 0660           ; {
 0660                   .dbline 263
 0660           ;       // Enable Global Interrupt   
 0660           ;       M8C_EnableGInt;
 0660 7101                      or  F, 01h
 0662           
 0662                   .dbline 266
 0662           ; 
 0662           ;       // Clear the flags
 0662           ;       FlagsElevator = 0;
 0662 62D000            mov REG[0xd0],>_FlagsElevator
 0665 550000            mov [_FlagsElevator],0
 0668                   .dbline 267
 0668           ;       FlagsAileron = 0;// new for motorcontroll2
 0668 62D000            mov REG[0xd0],>_FlagsAileron
 066B 550000            mov [_FlagsAileron],0
 066E                   .dbline 268
 066E           ;       FlagUltrasoon = 0;
 066E 62D000            mov REG[0xd0],>_FlagUltrasoon
 0671 550000            mov [_FlagUltrasoon],0
 0674                   .dbline 271
 0674           ; 
 0674           ;       // Start timers and enable interrupt
 0674           ;       Timer1_Start();
 0674 10                push X
 0675 7C0000            xcall _Timer1_Start
 0678                   .dbline 272
 0678           ;       Timer1_EnableInt();
 0678 7C0000            xcall _Timer1_EnableInt
 067B                   .dbline 274
 067B           ; 
 067B           ;       Timer2_Start();// new for motorcontroll2
 067B 7C0000            xcall _Timer2_Start
 067E                   .dbline 275
 067E           ;       Timer2_EnableInt();// new for motorcontroll2
 067E 7C0000            xcall _Timer2_EnableInt
 0681                   .dbline 277
 0681           ; 
 0681           ;       Timer3_Start();
 0681 7C0000            xcall _Timer3_Start
 0684                   .dbline 278
 0684           ;       Timer3_EnableInt();
 0684 7C0000            xcall _Timer3_EnableInt
 0687 20                pop X
 0688                   .dbline 280
 0688           ;    
 0688           ;       TriggerUltrasoon();     
 0688 9EA6              xcall _TriggerUltrasoon
 068A                   .dbline 283
 068A           ; 
 068A           ;       // Init motors
 068A           ;       PWM1_Start();
 068A 10                push X
 068B 7C0000            xcall _PWM1_Start
 068E                   .dbline 284
 068E           ;       PWM2_Start();
 068E 7C0000            xcall _PWM2_Start
 0691 20                pop X
 0692 841F              xjmp L28
 0694           L27:
 0694                   .dbline 291
 0694           ; 
 0694           ; #if (DEBUG_LCD)
 0694           ;       LCD_Start();
 0694           ; #endif  
 0694           ;       
 0694           ;       while (TRUE)
 0694           ;       {
 0694                   .dbline 299
 0694           ;               float aileronNormalized,
 0694           ;                         elevatorNormalized;
 0694           ;               float distance;
 0694           ;               float speed, direction;
 0694           ;               float motorLeft, motorRight;
 0694           ;               BOOL forward;
 0694           ;               
 0694           ;               aileronNormalized = EvaluateAileron(PulseWidthAileron);
 0694 62D000            mov REG[0xd0],>_PulseWidthAileron
 0697 5101              mov A,[_PulseWidthAileron+1]
 0699 62D000            mov REG[0xd0],>__r0
 069C 5300              mov [__r3],A
 069E 62D000            mov REG[0xd0],>_PulseWidthAileron
 06A1 5100              mov A,[_PulseWidthAileron]
 06A3 62D000            mov REG[0xd0],>__r0
 06A6 5300              mov [__r2],A
 06A8 5000              mov A,0
 06AA 08                push A
 06AB 08                push A
 06AC 5100              mov A,[__r2]
 06AE 08                push A
 06AF 5100              mov A,[__r3]
 06B1 08                push A
 06B2 998C              xcall _EvaluateAileron
 06B4 62D000            mov REG[0xd0],>__r0
 06B7 5100              mov A,[__r0]
 06B9 540C              mov [X+12],A
 06BB 5100              mov A,[__r1]
 06BD 540D              mov [X+13],A
 06BF 5100              mov A,[__r2]
 06C1 540E              mov [X+14],A
 06C3 5100              mov A,[__r3]
 06C5 540F              mov [X+15],A
 06C7                   .dbline 300
 06C7           ;               direction  = fabs(aileronNormalized);
 06C7 520C              mov A,[X+12]
 06C9 08                push A
 06CA 520D              mov A,[X+13]
 06CC 08                push A
 06CD 520E              mov A,[X+14]
 06CF 08                push A
 06D0 520F              mov A,[X+15]
 06D2 08                push A
 06D3 7C0000            xcall _fabsfLMM
 06D6 38F8              add SP,-8
 06D8 62D000            mov REG[0xd0],>__r0
 06DB 5100              mov A,[__r0]
 06DD 5419              mov [X+25],A
 06DF 5100              mov A,[__r1]
 06E1 541A              mov [X+26],A
 06E3 5100              mov A,[__r2]
 06E5 541B              mov [X+27],A
 06E7 5100              mov A,[__r3]
 06E9 541C              mov [X+28],A
 06EB                   .dbline 302
 06EB           ; 
 06EB           ;               elevatorNormalized = EvaluateElevator(PulseWidthElevator);
 06EB 62D000            mov REG[0xd0],>_PulseWidthElevator
 06EE 5101              mov A,[_PulseWidthElevator+1]
 06F0 62D000            mov REG[0xd0],>__r0
 06F3 5300              mov [__r3],A
 06F5 62D000            mov REG[0xd0],>_PulseWidthElevator
 06F8 5100              mov A,[_PulseWidthElevator]
 06FA 62D000            mov REG[0xd0],>__r0
 06FD 5300              mov [__r2],A
 06FF 5000              mov A,0
 0701 08                push A
 0702 08                push A
 0703 5100              mov A,[__r2]
 0705 08                push A
 0706 5100              mov A,[__r3]
 0708 08                push A
 0709 9BAD              xcall _EvaluateElevator
 070B 62D000            mov REG[0xd0],>__r0
 070E 5100              mov A,[__r0]
 0710 5410              mov [X+16],A
 0712 5100              mov A,[__r1]
 0714 5411              mov [X+17],A
 0716 5100              mov A,[__r2]
 0718 5412              mov [X+18],A
 071A 5100              mov A,[__r3]
 071C 5413              mov [X+19],A
 071E                   .dbline 303
 071E           ;               speed  = fabs(elevatorNormalized);
 071E 5210              mov A,[X+16]
 0720 08                push A
 0721 5211              mov A,[X+17]
 0723 08                push A
 0724 5212              mov A,[X+18]
 0726 08                push A
 0727 5213              mov A,[X+19]
 0729 08                push A
 072A 7C0000            xcall _fabsfLMM
 072D 38F8              add SP,-8
 072F 62D000            mov REG[0xd0],>__r0
 0732 5100              mov A,[__r0]
 0734 5400              mov [X+0],A
 0736 5100              mov A,[__r1]
 0738 5401              mov [X+1],A
 073A 5100              mov A,[__r2]
 073C 5402              mov [X+2],A
 073E 5100              mov A,[__r3]
 0740 5403              mov [X+3],A
 0742                   .dbline 304
 0742           ;               forward = (elevatorNormalized >= 0);
 0742 5000              mov A,0
 0744 08                push A
 0745 08                push A
 0746 08                push A
 0747 08                push A
 0748 5210              mov A,[X+16]
 074A 08                push A
 074B 5211              mov A,[X+17]
 074D 08                push A
 074E 5212              mov A,[X+18]
 0750 08                push A
 0751 5213              mov A,[X+19]
 0753 08                push A
 0754 7C0000            xcall __fpcmp
 0757 38F8              add SP,-8
 0759 39FF              cmp A,-1
 075B A009              jz L31
 075D 561E01            mov [X+30],1
 0760 561D00            mov [X+29],0
 0763 8007              xjmp L32
 0765           L31:
 0765 561E00            mov [X+30],0
 0768 561D00            mov [X+29],0
 076B           L32:
 076B 62D000            mov REG[0xd0],>__r0
 076E 521E              mov A,[X+30]
 0770 5414              mov [X+20],A
 0772                   .dbline 306
 0772           ;               
 0772           ;               distance = EvaluateUltrasoonSensor();
 0772 9DD5              xcall _EvaluateUltrasoonSensor
 0774 62D000            mov REG[0xd0],>__r0
 0777 5100              mov A,[__r0]
 0779 5415              mov [X+21],A
 077B 5100              mov A,[__r1]
 077D 5416              mov [X+22],A
 077F 5100              mov A,[__r2]
 0781 5417              mov [X+23],A
 0783 5100              mov A,[__r3]
 0785 5418              mov [X+24],A
 0787                   .dbline 307
 0787           ;               if (distance < MIN_SAFE_DISTANCE)
 0787 5042              mov A,66
 0789 08                push A
 078A 50A0              mov A,-96
 078C 08                push A
 078D 5000              mov A,0
 078F 08                push A
 0790 08                push A
 0791 5215              mov A,[X+21]
 0793 08                push A
 0794 5216              mov A,[X+22]
 0796 08                push A
 0797 5217              mov A,[X+23]
 0799 08                push A
 079A 5218              mov A,[X+24]
 079C 08                push A
 079D 7C0000            xcall __fpcmp
 07A0 38F8              add SP,-8
 07A2 3900              cmp A,0
 07A4 A016              jz L33
 07A6 3901              cmp A,1
 07A8 A012              jz L33
 07AA                   .dbline 309
 07AA           ;               {
 07AA           ;                       if (forward)
 07AA                   .dbline 309
 07AA 3D1400            cmp [X+20],0
 07AD A00D              jz L35
 07AF                   .dbline 310
 07AF           ;                               speed = 0;
 07AF 560000            mov [X+0],0
 07B2 560100            mov [X+1],0
 07B5 560200            mov [X+2],0
 07B8 560300            mov [X+3],0
 07BB           L35:
 07BB                   .dbline 311
 07BB           ;               }
 07BB           L33:
 07BB                   .dbline 313
 07BB           ;               
 07BB           ;               motorLeft  = speed; // default is straight forward
 07BB 5200              mov A,[X+0]
 07BD 5404              mov [X+4],A
 07BF 5201              mov A,[X+1]
 07C1 5405              mov [X+5],A
 07C3 5202              mov A,[X+2]
 07C5 5406              mov [X+6],A
 07C7 5203              mov A,[X+3]
 07C9 5407              mov [X+7],A
 07CB                   .dbline 314
 07CB           ;               motorRight = speed;
 07CB 5200              mov A,[X+0]
 07CD 5408              mov [X+8],A
 07CF 5201              mov A,[X+1]
 07D1 5409              mov [X+9],A
 07D3 5202              mov A,[X+2]
 07D5 540A              mov [X+10],A
 07D7 5203              mov A,[X+3]
 07D9 540B              mov [X+11],A
 07DB                   .dbline 316
 07DB           ;               
 07DB           ;               if (aileronNormalized < 0) // turning left
 07DB 5000              mov A,0
 07DD 08                push A
 07DE 08                push A
 07DF 08                push A
 07E0 08                push A
 07E1 520C              mov A,[X+12]
 07E3 08                push A
 07E4 520D              mov A,[X+13]
 07E6 08                push A
 07E7 520E              mov A,[X+14]
 07E9 08                push A
 07EA 520F              mov A,[X+15]
 07EC 08                push A
 07ED 62D000            mov REG[0xd0],>__r0
 07F0 7C0000            xcall __fpcmp
 07F3 38F8              add SP,-8
 07F5 3900              cmp A,0
 07F7 A063              jz L37
 07F9 3901              cmp A,1
 07FB A05F              jz L37
 07FD                   .dbline 318
 07FD           ;               {
 07FD           ;                       motorRight = speed;
 07FD                   .dbline 318
 07FD 5200              mov A,[X+0]
 07FF 5408              mov [X+8],A
 0801 5201              mov A,[X+1]
 0803 5409              mov [X+9],A
 0805 5202              mov A,[X+2]
 0807 540A              mov [X+10],A
 0809 5203              mov A,[X+3]
 080B 540B              mov [X+11],A
 080D                   .dbline 319
 080D           ;                       motorLeft  = speed * (1 - direction);
 080D 5219              mov A,[X+25]
 080F 08                push A
 0810 521A              mov A,[X+26]
 0812 08                push A
 0813 521B              mov A,[X+27]
 0815 08                push A
 0816 521C              mov A,[X+28]
 0818 08                push A
 0819 503F              mov A,63
 081B 08                push A
 081C 5080              mov A,-128
 081E 08                push A
 081F 5000              mov A,0
 0821 08                push A
 0822 08                push A
 0823 7C0000            xcall __fpsub
 0826 18                pop A
 0827 5300              mov [__r3],A
 0829 18                pop A
 082A 5300              mov [__r2],A
 082C 18                pop A
 082D 5300              mov [__r1],A
 082F 18                pop A
 0830 38FC              add SP,-4
 0832 08                push A
 0833 5100              mov A,[__r1]
 0835 08                push A
 0836 5100              mov A,[__r2]
 0838 08                push A
 0839 5100              mov A,[__r3]
 083B 08                push A
 083C 5200              mov A,[X+0]
 083E 08                push A
 083F 5201              mov A,[X+1]
 0841 08                push A
 0842 5202              mov A,[X+2]
 0844 08                push A
 0845 5203              mov A,[X+3]
 0847 08                push A
 0848 7C0000            xcall __fpmul
 084B 18                pop A
 084C 5407              mov [X+7],A
 084E 18                pop A
 084F 5406              mov [X+6],A
 0851 18                pop A
 0852 5405              mov [X+5],A
 0854 18                pop A
 0855 5404              mov [X+4],A
 0857 38FC              add SP,-4
 0859                   .dbline 320
 0859           ;               }
 0859 807F              xjmp L38
 085B           L37:
 085B                   .dbline 321
 085B           ;               else if (aileronNormalized > 0) // turning right
 085B 5000              mov A,0
 085D 08                push A
 085E 08                push A
 085F 08                push A
 0860 08                push A
 0861 520C              mov A,[X+12]
 0863 08                push A
 0864 520D              mov A,[X+13]
 0866 08                push A
 0867 520E              mov A,[X+14]
 0869 08                push A
 086A 520F              mov A,[X+15]
 086C 08                push A
 086D 62D000            mov REG[0xd0],>__r0
 0870 7C0000            xcall __fpcmp
 0873 38F8              add SP,-8
 0875 3900              cmp A,0
 0877 A061              jz L39
 0879 3901              cmp A,1
 087B B05D              jnz L39
 087D                   .dbline 323
 087D           ;               {
 087D           ;                       motorLeft  = speed;
 087D                   .dbline 323
 087D 5200              mov A,[X+0]
 087F 5404              mov [X+4],A
 0881 5201              mov A,[X+1]
 0883 5405              mov [X+5],A
 0885 5202              mov A,[X+2]
 0887 5406              mov [X+6],A
 0889 5203              mov A,[X+3]
 088B 5407              mov [X+7],A
 088D                   .dbline 324
 088D           ;                       motorRight = speed * (1 - direction);
 088D 5219              mov A,[X+25]
 088F 08                push A
 0890 521A              mov A,[X+26]
 0892 08                push A
 0893 521B              mov A,[X+27]
 0895 08                push A
 0896 521C              mov A,[X+28]
 0898 08                push A
 0899 503F              mov A,63
 089B 08                push A
 089C 5080              mov A,-128
 089E 08                push A
 089F 5000              mov A,0
 08A1 08                push A
 08A2 08                push A
 08A3 7C0000            xcall __fpsub
 08A6 18                pop A
 08A7 5300              mov [__r3],A
 08A9 18                pop A
 08AA 5300              mov [__r2],A
 08AC 18                pop A
 08AD 5300              mov [__r1],A
 08AF 18                pop A
 08B0 38FC              add SP,-4
 08B2 08                push A
 08B3 5100              mov A,[__r1]
 08B5 08                push A
 08B6 5100              mov A,[__r2]
 08B8 08                push A
 08B9 5100              mov A,[__r3]
 08BB 08                push A
 08BC 5200              mov A,[X+0]
 08BE 08                push A
 08BF 5201              mov A,[X+1]
 08C1 08                push A
 08C2 5202              mov A,[X+2]
 08C4 08                push A
 08C5 5203              mov A,[X+3]
 08C7 08                push A
 08C8 7C0000            xcall __fpmul
 08CB 18                pop A
 08CC 540B              mov [X+11],A
 08CE 18                pop A
 08CF 540A              mov [X+10],A
 08D1 18                pop A
 08D2 5409              mov [X+9],A
 08D4 18                pop A
 08D5 5408              mov [X+8],A
 08D7 38FC              add SP,-4
 08D9                   .dbline 325
 08D9           ;               }
 08D9           L39:
 08D9           L38:
 08D9                   .dbline 327
 08D9           ;                               
 08D9           ;               if (forward)
 08D9 3D1400            cmp [X+20],0
 08DC A00F              jz L41
 08DE                   .dbline 330
 08DE           ;               {
 08DE           ;                       // ccw
 08DE           ;                       PRT1DR |=  0x08; // AIN1
 08DE                   .dbline 330
 08DE 430408            or REG[0x4],8
 08E1                   .dbline 331
 08E1           ;                       PRT1DR &= ~0x02; // AIN2
 08E1 4104FD            and REG[0x4],-3
 08E4                   .dbline 333
 08E4           ;                       
 08E4           ;                       PRT1DR |=  0x20; // BIN1
 08E4 430420            or REG[0x4],32
 08E7                   .dbline 334
 08E7           ;                       PRT1DR &= ~0x80; // BIN2
 08E7 41047F            and REG[0x4],127
 08EA                   .dbline 335
 08EA           ;               }
 08EA 800D              xjmp L42
 08EC           L41:
 08EC                   .dbline 337
 08EC           ;               else 
 08EC           ;               {
 08EC                   .dbline 339
 08EC           ;                       //cw
 08EC           ;                       PRT1DR &= ~0x08; // AIN1
 08EC 4104F7            and REG[0x4],-9
 08EF                   .dbline 340
 08EF           ;                       PRT1DR |=  0x02; // AIN2
 08EF 430402            or REG[0x4],2
 08F2                   .dbline 342
 08F2           ;                       
 08F2           ;                       PRT1DR &= ~0x20; // BIN1
 08F2 4104DF            and REG[0x4],-33
 08F5                   .dbline 343
 08F5           ;                       PRT1DR |=  0x80; // BIN2
 08F5 430480            or REG[0x4],-128
 08F8                   .dbline 344
 08F8           ;               }
 08F8           L42:
 08F8                   .dbline 347
 08F8           ;       
 08F8           ;               // Denormalize to Engine
 08F8           ;               motorLeft *= (MAX_POWER - MIN_POWER);
 08F8 5204              mov A,[X+4]
 08FA 08                push A
 08FB 5205              mov A,[X+5]
 08FD 08                push A
 08FE 5206              mov A,[X+6]
 0900 08                push A
 0901 5207              mov A,[X+7]
 0903 08                push A
 0904 5044              mov A,68
 0906 08                push A
 0907 507A              mov A,122
 0909 08                push A
 090A 5000              mov A,0
 090C 08                push A
 090D 08                push A
 090E 62D000            mov REG[0xd0],>__r0
 0911 7C0000            xcall __fpmul
 0914 18                pop A
 0915 5407              mov [X+7],A
 0917 18                pop A
 0918 5406              mov [X+6],A
 091A 18                pop A
 091B 5405              mov [X+5],A
 091D 18                pop A
 091E 5404              mov [X+4],A
 0920 38FC              add SP,-4
 0922                   .dbline 348
 0922           ;               motorLeft += MIN_POWER;
 0922 5000              mov A,0
 0924 08                push A
 0925 08                push A
 0926 08                push A
 0927 08                push A
 0928 5204              mov A,[X+4]
 092A 08                push A
 092B 5205              mov A,[X+5]
 092D 08                push A
 092E 5206              mov A,[X+6]
 0930 08                push A
 0931 5207              mov A,[X+7]
 0933 08                push A
 0934 7C0000            xcall __fpadd
 0937 18                pop A
 0938 5407              mov [X+7],A
 093A 18                pop A
 093B 5406              mov [X+6],A
 093D 18                pop A
 093E 5405              mov [X+5],A
 0940 18                pop A
 0941 5404              mov [X+4],A
 0943 38FC              add SP,-4
 0945                   .dbline 349
 0945           ;               motorRight *= (MAX_POWER - MIN_POWER);
 0945 5208              mov A,[X+8]
 0947 08                push A
 0948 5209              mov A,[X+9]
 094A 08                push A
 094B 520A              mov A,[X+10]
 094D 08                push A
 094E 520B              mov A,[X+11]
 0950 08                push A
 0951 5044              mov A,68
 0953 08                push A
 0954 507A              mov A,122
 0956 08                push A
 0957 5000              mov A,0
 0959 08                push A
 095A 08                push A
 095B 7C0000            xcall __fpmul
 095E 18                pop A
 095F 540B              mov [X+11],A
 0961 18                pop A
 0962 540A              mov [X+10],A
 0964 18                pop A
 0965 5409              mov [X+9],A
 0967 18                pop A
 0968 5408              mov [X+8],A
 096A 38FC              add SP,-4
 096C                   .dbline 350
 096C           ;               motorRight += MIN_POWER;
 096C 5000              mov A,0
 096E 08                push A
 096F 08                push A
 0970 08                push A
 0971 08                push A
 0972 5208              mov A,[X+8]
 0974 08                push A
 0975 5209              mov A,[X+9]
 0977 08                push A
 0978 520A              mov A,[X+10]
 097A 08                push A
 097B 520B              mov A,[X+11]
 097D 08                push A
 097E 7C0000            xcall __fpadd
 0981 18                pop A
 0982 540B              mov [X+11],A
 0984 18                pop A
 0985 540A              mov [X+10],A
 0987 18                pop A
 0988 5409              mov [X+9],A
 098A 18                pop A
 098B 5408              mov [X+8],A
 098D 38FC              add SP,-4
 098F                   .dbline 352
 098F           ; 
 098F           ;               PWM1_WritePulseWidth(motorLeft);
 098F 5047              mov A,71
 0991 08                push A
 0992 5000              mov A,0
 0994 08                push A
 0995 08                push A
 0996 08                push A
 0997 5204              mov A,[X+4]
 0999 08                push A
 099A 5205              mov A,[X+5]
 099C 08                push A
 099D 5206              mov A,[X+6]
 099F 08                push A
 09A0 5207              mov A,[X+7]
 09A2 08                push A
 09A3 7C0000            xcall __fpcmp
 09A6 38F8              add SP,-8
 09A8 39FF              cmp A,-1
 09AA A047              jz L44
 09AC 5047              mov A,71
 09AE 08                push A
 09AF 5000              mov A,0
 09B1 08                push A
 09B2 08                push A
 09B3 08                push A
 09B4 5204              mov A,[X+4]
 09B6 08                push A
 09B7 5205              mov A,[X+5]
 09B9 08                push A
 09BA 5206              mov A,[X+6]
 09BC 08                push A
 09BD 5207              mov A,[X+7]
 09BF 08                push A
 09C0 7C0000            xcall __fpsub
 09C3 18                pop A
 09C4 5300              mov [__r3],A
 09C6 18                pop A
 09C7 5300              mov [__r2],A
 09C9 18                pop A
 09CA 5300              mov [__r1],A
 09CC 18                pop A
 09CD 38FC              add SP,-4
 09CF 08                push A
 09D0 5100              mov A,[__r1]
 09D2 08                push A
 09D3 5100              mov A,[__r2]
 09D5 08                push A
 09D6 5100              mov A,[__r3]
 09D8 08                push A
 09D9 7C0000            xcall __fp2long
 09DC 18                pop A
 09DD 5300              mov [__r1],A
 09DF 18                pop A
 09E0 5300              mov [__r0],A
 09E2 38FE              add SP,-2
 09E4 5100              mov A,[__r1]
 09E6 0100              add A,0
 09E8 5420              mov [X+32],A
 09EA 5100              mov A,[__r0]
 09EC 0980              adc A,-128
 09EE 541F              mov [X+31],A
 09F0 8023              xjmp L45
 09F2           L44:
 09F2 62D000            mov REG[0xd0],>__r0
 09F5 5204              mov A,[X+4]
 09F7 08                push A
 09F8 5205              mov A,[X+5]
 09FA 08                push A
 09FB 5206              mov A,[X+6]
 09FD 08                push A
 09FE 5207              mov A,[X+7]
 0A00 08                push A
 0A01 7C0000            xcall __fp2long
 0A04 18                pop A
 0A05 5300              mov [__r1],A
 0A07 18                pop A
 0A08 5300              mov [__r0],A
 0A0A 38FE              add SP,-2
 0A0C 5100              mov A,[__r1]
 0A0E 5420              mov [X+32],A
 0A10 5100              mov A,[__r0]
 0A12 541F              mov [X+31],A
 0A14           L45:
 0A14 10                push X
 0A15 521F              mov A,[X+31]
 0A17 08                push A
 0A18 5220              mov A,[X+32]
 0A1A 20                pop X
 0A1B 7C0000            xcall _PWM1_WritePulseWidth
 0A1E 20                pop X
 0A1F                   .dbline 353
 0A1F           ;               PWM2_WritePulseWidth(motorRight);
 0A1F 5047              mov A,71
 0A21 08                push A
 0A22 5000              mov A,0
 0A24 08                push A
 0A25 08                push A
 0A26 08                push A
 0A27 5208              mov A,[X+8]
 0A29 08                push A
 0A2A 5209              mov A,[X+9]
 0A2C 08                push A
 0A2D 520A              mov A,[X+10]
 0A2F 08                push A
 0A30 520B              mov A,[X+11]
 0A32 08                push A
 0A33 62D000            mov REG[0xd0],>__r0
 0A36 7C0000            xcall __fpcmp
 0A39 38F8              add SP,-8
 0A3B 39FF              cmp A,-1
 0A3D A047              jz L47
 0A3F 5047              mov A,71
 0A41 08                push A
 0A42 5000              mov A,0
 0A44 08                push A
 0A45 08                push A
 0A46 08                push A
 0A47 5208              mov A,[X+8]
 0A49 08                push A
 0A4A 5209              mov A,[X+9]
 0A4C 08                push A
 0A4D 520A              mov A,[X+10]
 0A4F 08                push A
 0A50 520B              mov A,[X+11]
 0A52 08                push A
 0A53 7C0000            xcall __fpsub
 0A56 18                pop A
 0A57 5300              mov [__r3],A
 0A59 18                pop A
 0A5A 5300              mov [__r2],A
 0A5C 18                pop A
 0A5D 5300              mov [__r1],A
 0A5F 18                pop A
 0A60 38FC              add SP,-4
 0A62 08                push A
 0A63 5100              mov A,[__r1]
 0A65 08                push A
 0A66 5100              mov A,[__r2]
 0A68 08                push A
 0A69 5100              mov A,[__r3]
 0A6B 08                push A
 0A6C 7C0000            xcall __fp2long
 0A6F 18                pop A
 0A70 5300              mov [__r1],A
 0A72 18                pop A
 0A73 5300              mov [__r0],A
 0A75 38FE              add SP,-2
 0A77 5100              mov A,[__r1]
 0A79 0100              add A,0
 0A7B 5422              mov [X+34],A
 0A7D 5100              mov A,[__r0]
 0A7F 0980              adc A,-128
 0A81 5421              mov [X+33],A
 0A83 8023              xjmp L48
 0A85           L47:
 0A85 62D000            mov REG[0xd0],>__r0
 0A88 5208              mov A,[X+8]
 0A8A 08                push A
 0A8B 5209              mov A,[X+9]
 0A8D 08                push A
 0A8E 520A              mov A,[X+10]
 0A90 08                push A
 0A91 520B              mov A,[X+11]
 0A93 08                push A
 0A94 7C0000            xcall __fp2long
 0A97 18                pop A
 0A98 5300              mov [__r1],A
 0A9A 18                pop A
 0A9B 5300              mov [__r0],A
 0A9D 38FE              add SP,-2
 0A9F 5100              mov A,[__r1]
 0AA1 5422              mov [X+34],A
 0AA3 5100              mov A,[__r0]
 0AA5 5421              mov [X+33],A
 0AA7           L48:
 0AA7 10                push X
 0AA8 5221              mov A,[X+33]
 0AAA 08                push A
 0AAB 5222              mov A,[X+34]
 0AAD 20                pop X
 0AAE 7C0000            xcall _PWM2_WritePulseWidth
 0AB1 20                pop X
 0AB2                   .dbline 365
 0AB2           ; 
 0AB2           ; #if (DEBUG_LCD)
 0AB2           ;               LCD_Position(0,7);
 0AB2           ;               LCD_PrHexInt(motorLeft);
 0AB2           ;               LCD_Position(1,7);
 0AB2           ;               LCD_PrHexInt(motorRight);
 0AB2           ;               
 0AB2           ;               LCD_Position(0,12);
 0AB2           ;               LCD_PrCString(forward ? "F" : "B");
 0AB2           ; #endif        
 0AB2           ; 
 0AB2           ;    }
 0AB2           L28:
 0AB2                   .dbline 290
 0AB2 8BE1              xjmp L27
 0AB4           X10:
 0AB4                   .dbline -2
 0AB4           L26:
 0AB4 38DD              add SP,-35
 0AB6 20                pop X
 0AB7                   .dbline 0 ; func end
 0AB7 8FFF              jmp .
 0AB9                   .dbsym l direction 25 D
 0AB9                   .dbsym l distance 21 D
 0AB9                   .dbsym l forward 20 c
 0AB9                   .dbsym l elevatorNormalized 16 D
 0AB9                   .dbsym l aileronNormalized 12 D
 0AB9                   .dbsym l motorRight 8 D
 0AB9                   .dbsym l motorLeft 4 D
 0AB9                   .dbsym l speed 0 D
 0AB9                   .dbend
 0AB9                   .dbfunc e Timer1CaptureISR _Timer1CaptureISR fV
 0AB9           _Timer1CaptureISR::
 0AB9                   .dbline -1
 0AB9 71C0              or F,-64
 0ABB 08                push A
 0ABC 5DD0              mov A,REG[0xd0]
 0ABE 08                push A
 0ABF 5DD3              mov A,REG[0xd3]
 0AC1 08                push A
 0AC2 5DD4              mov A,REG[0xd4]
 0AC4 08                push A
 0AC5 5DD5              mov A,REG[0xd5]
 0AC7 08                push A
 0AC8 62D000            mov REG[0xd0],>__r0
 0ACB 5100              mov A,[__r0]
 0ACD 08                push A
 0ACE 5100              mov A,[__r1]
 0AD0 08                push A
 0AD1 5100              mov A,[__r2]
 0AD3 08                push A
 0AD4 5100              mov A,[__r3]
 0AD6 08                push A
 0AD7 5100              mov A,[__r4]
 0AD9 08                push A
 0ADA 5100              mov A,[__r5]
 0ADC 08                push A
 0ADD 5100              mov A,[__r6]
 0ADF 08                push A
 0AE0 5100              mov A,[__r7]
 0AE2 08                push A
 0AE3 5100              mov A,[__r8]
 0AE5 08                push A
 0AE6 5100              mov A,[__r9]
 0AE8 08                push A
 0AE9 5100              mov A,[__r10]
 0AEB 08                push A
 0AEC 5100              mov A,[__r11]
 0AEE 08                push A
 0AEF 5100              mov A,[__rX]
 0AF1 08                push A
 0AF2 5100              mov A,[__rY]
 0AF4 08                push A
 0AF5 5100              mov A,[__rZ]
 0AF7 08                push A
 0AF8                   .dbline 369
 0AF8           ; }
 0AF8           ; 
 0AF8           ; void Timer1CaptureISR(void)
 0AF8           ; {
 0AF8                   .dbline 370
 0AF8           ;    if (FlagsAileron & FALLING_EDGE_AILERON)
 0AF8 62D000            mov REG[0xd0],>_FlagsAileron
 0AFB 470002            tst [_FlagsAileron],2
 0AFE A049              jz L50
 0B00                   .dbline 373
 0B00           ;    {
 0B00           ;       // Read the count on negative edge
 0B00           ;       CaptureNegEdgeAileron = Timer1_wReadCompareValue();
 0B00                   .dbline 373
 0B00 10                push X
 0B01 7C0000            xcall _Timer1_wReadCompareValue
 0B04 62D000            mov REG[0xd0],>__r0
 0B07 5A00              mov [__r0],X
 0B09 20                pop X
 0B0A 08                push A
 0B0B 5100              mov A,[__r0]
 0B0D 62D000            mov REG[0xd0],>_CaptureNegEdgeAileron
 0B10 5300              mov [_CaptureNegEdgeAileron],A
 0B12 18                pop A
 0B13 5301              mov [_CaptureNegEdgeAileron+1],A
 0B15                   .dbline 376
 0B15           ; 
 0B15           ;       // Change the capture to positive edge and clear the FALLING_EDGE flag
 0B15           ;       Timer1_FUNC_LSB_REG &= ~0x80;
 0B15 7110              or F,0x10  ; iopage = 1
 0B17 41207F            and REG[0x20],127
 0B1A                   .dbline 377
 0B1A           ;       FlagsAileron &= ~FALLING_EDGE_AILERON;
 0B1A 70CF              and F,0xCF      ; iopage = 0
 0B1C 62D000            mov REG[0xd0],>_FlagsAileron
 0B1F 2600FD            and [_FlagsAileron],-3
 0B22                   .dbline 384
 0B22           ; 
 0B22           ;       // Calculate the pulswidth by finding difference between positive edge
 0B22           ;       // and negative edge counts.  As both the numbers are unsigned numbers
 0B22           ;       // the result will be correct even if there is an underflow in the counter
 0B22           ;       // The result will be accurate as long as the total pulsewidth is less than
 0B22           ;       // 65535 timer ticks.
 0B22           ;       PulseWidthAileron = CapturePosEdgeAileron - CaptureNegEdgeAileron;
 0B22 62D000            mov REG[0xd0],>_CapturePosEdgeAileron
 0B25 5101              mov A,[_CapturePosEdgeAileron+1]
 0B27 62D000            mov REG[0xd0],>_CaptureNegEdgeAileron
 0B2A 1201              sub A,[_CaptureNegEdgeAileron+1]
 0B2C 62D000            mov REG[0xd0],>_PulseWidthAileron
 0B2F 5301              mov [_PulseWidthAileron+1],A
 0B31 62D000            mov REG[0xd0],>_CapturePosEdgeAileron
 0B34 5100              mov A,[_CapturePosEdgeAileron]
 0B36 62D000            mov REG[0xd0],>_CaptureNegEdgeAileron
 0B39 1A00              sbb A,[_CaptureNegEdgeAileron]
 0B3B 62D000            mov REG[0xd0],>_PulseWidthAileron
 0B3E 5300              mov [_PulseWidthAileron],A
 0B40                   .dbline 387
 0B40           ;       
 0B40           ;       // Set the Data available flag
 0B40           ;       FlagsAileron |= DATA_AVAILABLE_AILERON;
 0B40 62D000            mov REG[0xd0],>_FlagsAileron
 0B43 2E0001            or [_FlagsAileron],1
 0B46                   .dbline 388
 0B46           ;    }
 0B46 8023              xjmp L51
 0B48           L50:
 0B48                   .dbline 390
 0B48           ;    else
 0B48           ;    {
 0B48                   .dbline 392
 0B48           ;       // Read the count on positive edge
 0B48           ;       CapturePosEdgeAileron = Timer1_wReadCompareValue();
 0B48 10                push X
 0B49 7C0000            xcall _Timer1_wReadCompareValue
 0B4C 62D000            mov REG[0xd0],>__r0
 0B4F 5A00              mov [__r0],X
 0B51 20                pop X
 0B52 08                push A
 0B53 5100              mov A,[__r0]
 0B55 62D000            mov REG[0xd0],>_CapturePosEdgeAileron
 0B58 5300              mov [_CapturePosEdgeAileron],A
 0B5A 18                pop A
 0B5B 5301              mov [_CapturePosEdgeAileron+1],A
 0B5D                   .dbline 395
 0B5D           ;       
 0B5D           ;       // Change the capture to negative edge and set flag
 0B5D           ;       Timer1_FUNC_LSB_REG |= 0x80;
 0B5D 7110              or F,0x10  ; iopage = 1
 0B5F 432080            or REG[0x20],-128
 0B62                   .dbline 396
 0B62           ;       FlagsAileron |= FALLING_EDGE_AILERON;
 0B62 70CF              and F,0xCF      ; iopage = 0
 0B64 62D000            mov REG[0xd0],>_FlagsAileron
 0B67 2E0002            or [_FlagsAileron],2
 0B6A                   .dbline 397
 0B6A           ;    }
 0B6A           L51:
 0B6A                   .dbline -2
 0B6A           L49:
 0B6A 62D000            mov REG[0xD0],>__r0
 0B6D 18                pop A
 0B6E 5300              mov [__rZ],A
 0B70 18                pop A
 0B71 5300              mov [__rY],A
 0B73 18                pop A
 0B74 5300              mov [__rX],A
 0B76 18                pop A
 0B77 5300              mov [__r11],A
 0B79 18                pop A
 0B7A 5300              mov [__r10],A
 0B7C 18                pop A
 0B7D 5300              mov [__r9],A
 0B7F 18                pop A
 0B80 5300              mov [__r8],A
 0B82 18                pop A
 0B83 5300              mov [__r7],A
 0B85 18                pop A
 0B86 5300              mov [__r6],A
 0B88 18                pop A
 0B89 5300              mov [__r5],A
 0B8B 18                pop A
 0B8C 5300              mov [__r4],A
 0B8E 18                pop A
 0B8F 5300              mov [__r3],A
 0B91 18                pop A
 0B92 5300              mov [__r2],A
 0B94 18                pop A
 0B95 5300              mov [__r1],A
 0B97 18                pop A
 0B98 5300              mov [__r0],A
 0B9A 18                pop A
 0B9B 60D5              mov REG[213],A
 0B9D 18                pop A
 0B9E 60D4              mov REG[212],A
 0BA0 18                pop A
 0BA1 60D3              mov REG[211],A
 0BA3 18                pop A
 0BA4 60D0              mov REG[208],A
 0BA6 18                pop A
 0BA7                   .dbline 0 ; func end
 0BA7 7E                reti
 0BA8                   .dbend
 0BA8                   .dbfunc e Timer2CaptureISR _Timer2CaptureISR fV
 0BA8           _Timer2CaptureISR::
 0BA8                   .dbline -1
 0BA8 71C0              or F,-64
 0BAA 08                push A
 0BAB 5DD0              mov A,REG[0xd0]
 0BAD 08                push A
 0BAE 5DD3              mov A,REG[0xd3]
 0BB0 08                push A
 0BB1 5DD4              mov A,REG[0xd4]
 0BB3 08                push A
 0BB4 5DD5              mov A,REG[0xd5]
 0BB6 08                push A
 0BB7 62D000            mov REG[0xd0],>__r0
 0BBA 5100              mov A,[__r0]
 0BBC 08                push A
 0BBD 5100              mov A,[__r1]
 0BBF 08                push A
 0BC0 5100              mov A,[__r2]
 0BC2 08                push A
 0BC3 5100              mov A,[__r3]
 0BC5 08                push A
 0BC6 5100              mov A,[__r4]
 0BC8 08                push A
 0BC9 5100              mov A,[__r5]
 0BCB 08                push A
 0BCC 5100              mov A,[__r6]
 0BCE 08                push A
 0BCF 5100              mov A,[__r7]
 0BD1 08                push A
 0BD2 5100              mov A,[__r8]
 0BD4 08                push A
 0BD5 5100              mov A,[__r9]
 0BD7 08                push A
 0BD8 5100              mov A,[__r10]
 0BDA 08                push A
 0BDB 5100              mov A,[__r11]
 0BDD 08                push A
 0BDE 5100              mov A,[__rX]
 0BE0 08                push A
 0BE1 5100              mov A,[__rY]
 0BE3 08                push A
 0BE4 5100              mov A,[__rZ]
 0BE6 08                push A
 0BE7                   .dbline 401
 0BE7           ; }
 0BE7           ; 
 0BE7           ; void Timer2CaptureISR(void)// new function for motorcontroll2
 0BE7           ; {
 0BE7                   .dbline 402
 0BE7           ;       if(FlagsElevator & FALLING_EDGE_ELEVATOR)//
 0BE7 62D000            mov REG[0xd0],>_FlagsElevator
 0BEA 470002            tst [_FlagsElevator],2
 0BED A049              jz L53
 0BEF                   .dbline 405
 0BEF           ;       {
 0BEF           ;               // Read the count on negative edge
 0BEF           ;               CaptureNegEdgeElevator = Timer2_wReadCompareValue();
 0BEF                   .dbline 405
 0BEF 10                push X
 0BF0 7C0000            xcall _Timer2_wReadCompareValue
 0BF3 62D000            mov REG[0xd0],>__r0
 0BF6 5A00              mov [__r0],X
 0BF8 20                pop X
 0BF9 08                push A
 0BFA 5100              mov A,[__r0]
 0BFC 62D000            mov REG[0xd0],>_CaptureNegEdgeElevator
 0BFF 5300              mov [_CaptureNegEdgeElevator],A
 0C01 18                pop A
 0C02 5301              mov [_CaptureNegEdgeElevator+1],A
 0C04                   .dbline 408
 0C04           ; 
 0C04           ;               // Change the capture to positive edge and clear the FALLING_EDGE flag
 0C04           ;               Timer2_FUNC_LSB_REG &= ~0x80;
 0C04 7110              or F,0x10  ; iopage = 1
 0C06 41287F            and REG[0x28],127
 0C09                   .dbline 409
 0C09           ;               FlagsElevator &= ~FALLING_EDGE_ELEVATOR;// clearing faling edge bit in flags
 0C09 70CF              and F,0xCF      ; iopage = 0
 0C0B 62D000            mov REG[0xd0],>_FlagsElevator
 0C0E 2600FD            and [_FlagsElevator],-3
 0C11                   .dbline 417
 0C11           ;       
 0C11           ; 
 0C11           ;               // Calculate the pulswidth by finding difference between positive edge
 0C11           ;               // and negative edge counts.  As both the numbers are unsigned numbers
 0C11           ;               // the result will be correct even if there is an underflow in the counter
 0C11           ;               // The result will be accurate as long as the total pulsewidth is less than
 0C11           ;               // 65535 timer ticks.
 0C11           ;               PulseWidthElevator = CapturePosEdgeElevator - CaptureNegEdgeElevator;
 0C11 62D000            mov REG[0xd0],>_CapturePosEdgeElevator
 0C14 5101              mov A,[_CapturePosEdgeElevator+1]
 0C16 62D000            mov REG[0xd0],>_CaptureNegEdgeElevator
 0C19 1201              sub A,[_CaptureNegEdgeElevator+1]
 0C1B 62D000            mov REG[0xd0],>_PulseWidthElevator
 0C1E 5301              mov [_PulseWidthElevator+1],A
 0C20 62D000            mov REG[0xd0],>_CapturePosEdgeElevator
 0C23 5100              mov A,[_CapturePosEdgeElevator]
 0C25 62D000            mov REG[0xd0],>_CaptureNegEdgeElevator
 0C28 1A00              sbb A,[_CaptureNegEdgeElevator]
 0C2A 62D000            mov REG[0xd0],>_PulseWidthElevator
 0C2D 5300              mov [_PulseWidthElevator],A
 0C2F                   .dbline 420
 0C2F           ; 
 0C2F           ;               // Set the Data available flag
 0C2F           ;               FlagsElevator |= DATA_AVAILABLE_ELEVATOR; // BEN: set the correct bit on or off
 0C2F 62D000            mov REG[0xd0],>_FlagsElevator
 0C32 2E0001            or [_FlagsElevator],1
 0C35                   .dbline 421
 0C35           ;       }
 0C35 8023              xjmp L54
 0C37           L53:
 0C37                   .dbline 423
 0C37           ;       else
 0C37           ;       {
 0C37                   .dbline 425
 0C37           ;               // Read the count on positive edge
 0C37           ;               CapturePosEdgeElevator = Timer2_wReadCompareValue();
 0C37 10                push X
 0C38 7C0000            xcall _Timer2_wReadCompareValue
 0C3B 62D000            mov REG[0xd0],>__r0
 0C3E 5A00              mov [__r0],X
 0C40 20                pop X
 0C41 08                push A
 0C42 5100              mov A,[__r0]
 0C44 62D000            mov REG[0xd0],>_CapturePosEdgeElevator
 0C47 5300              mov [_CapturePosEdgeElevator],A
 0C49 18                pop A
 0C4A 5301              mov [_CapturePosEdgeElevator+1],A
 0C4C                   .dbline 428
 0C4C           ; 
 0C4C           ;               // Change the capture to negative edge and set flag
 0C4C           ;               Timer2_FUNC_LSB_REG |= 0x80;
 0C4C 7110              or F,0x10  ; iopage = 1
 0C4E 432880            or REG[0x28],-128
 0C51                   .dbline 429
 0C51           ;               FlagsElevator |= FALLING_EDGE_ELEVATOR;
 0C51 70CF              and F,0xCF      ; iopage = 0
 0C53 62D000            mov REG[0xd0],>_FlagsElevator
 0C56 2E0002            or [_FlagsElevator],2
 0C59                   .dbline 430
 0C59           ;       }
 0C59           L54:
 0C59                   .dbline -2
 0C59           L52:
 0C59 62D000            mov REG[0xD0],>__r0
 0C5C 18                pop A
 0C5D 5300              mov [__rZ],A
 0C5F 18                pop A
 0C60 5300              mov [__rY],A
 0C62 18                pop A
 0C63 5300              mov [__rX],A
 0C65 18                pop A
 0C66 5300              mov [__r11],A
 0C68 18                pop A
 0C69 5300              mov [__r10],A
 0C6B 18                pop A
 0C6C 5300              mov [__r9],A
 0C6E 18                pop A
 0C6F 5300              mov [__r8],A
 0C71 18                pop A
 0C72 5300              mov [__r7],A
 0C74 18                pop A
 0C75 5300              mov [__r6],A
 0C77 18                pop A
 0C78 5300              mov [__r5],A
 0C7A 18                pop A
 0C7B 5300              mov [__r4],A
 0C7D 18                pop A
 0C7E 5300              mov [__r3],A
 0C80 18                pop A
 0C81 5300              mov [__r2],A
 0C83 18                pop A
 0C84 5300              mov [__r1],A
 0C86 18                pop A
 0C87 5300              mov [__r0],A
 0C89 18                pop A
 0C8A 60D5              mov REG[213],A
 0C8C 18                pop A
 0C8D 60D4              mov REG[212],A
 0C8F 18                pop A
 0C90 60D3              mov REG[211],A
 0C92 18                pop A
 0C93 60D0              mov REG[208],A
 0C95 18                pop A
 0C96                   .dbline 0 ; func end
 0C96 7E                reti
 0C97                   .dbend
 0C97                   .dbfunc e Timer3CaptureISR _Timer3CaptureISR fV
 0C97           _Timer3CaptureISR::
 0C97                   .dbline -1
 0C97 71C0              or F,-64
 0C99 08                push A
 0C9A 5DD0              mov A,REG[0xd0]
 0C9C 08                push A
 0C9D 5DD3              mov A,REG[0xd3]
 0C9F 08                push A
 0CA0 5DD4              mov A,REG[0xd4]
 0CA2 08                push A
 0CA3 5DD5              mov A,REG[0xd5]
 0CA5 08                push A
 0CA6 62D000            mov REG[0xd0],>__r0
 0CA9 5100              mov A,[__r0]
 0CAB 08                push A
 0CAC 5100              mov A,[__r1]
 0CAE 08                push A
 0CAF 5100              mov A,[__r2]
 0CB1 08                push A
 0CB2 5100              mov A,[__r3]
 0CB4 08                push A
 0CB5 5100              mov A,[__r4]
 0CB7 08                push A
 0CB8 5100              mov A,[__r5]
 0CBA 08                push A
 0CBB 5100              mov A,[__r6]
 0CBD 08                push A
 0CBE 5100              mov A,[__r7]
 0CC0 08                push A
 0CC1 5100              mov A,[__r8]
 0CC3 08                push A
 0CC4 5100              mov A,[__r9]
 0CC6 08                push A
 0CC7 5100              mov A,[__r10]
 0CC9 08                push A
 0CCA 5100              mov A,[__r11]
 0CCC 08                push A
 0CCD 5100              mov A,[__rX]
 0CCF 08                push A
 0CD0 5100              mov A,[__rY]
 0CD2 08                push A
 0CD3 5100              mov A,[__rZ]
 0CD5 08                push A
 0CD6                   .dbline 434
 0CD6           ; }
 0CD6           ; 
 0CD6           ; void Timer3CaptureISR(void)
 0CD6           ; {     
 0CD6                   .dbline 435
 0CD6           ;    if(FlagUltrasoon & FALLING_EDGE_ULTRASOON)
 0CD6 62D000            mov REG[0xd0],>_FlagUltrasoon
 0CD9 470002            tst [_FlagUltrasoon],2
 0CDC A049              jz L56
 0CDE                   .dbline 438
 0CDE           ;    {
 0CDE           ;       // Read the count on negative edge
 0CDE           ;       CaptureNegEdgeUltrasoon = Timer3_wReadCompareValue();
 0CDE                   .dbline 438
 0CDE 10                push X
 0CDF 7C0000            xcall _Timer3_wReadCompareValue
 0CE2 62D000            mov REG[0xd0],>__r0
 0CE5 5A00              mov [__r0],X
 0CE7 20                pop X
 0CE8 08                push A
 0CE9 5100              mov A,[__r0]
 0CEB 62D000            mov REG[0xd0],>_CaptureNegEdgeUltrasoon
 0CEE 5300              mov [_CaptureNegEdgeUltrasoon],A
 0CF0 18                pop A
 0CF1 5301              mov [_CaptureNegEdgeUltrasoon+1],A
 0CF3                   .dbline 441
 0CF3           ; 
 0CF3           ;       // Change the capture to positive edge and clear the FALLING_EDGE flag
 0CF3           ;       Timer3_FUNC_LSB_REG &= ~0x80;
 0CF3 7110              or F,0x10  ; iopage = 1
 0CF5 41307F            and REG[0x30],127
 0CF8                   .dbline 442
 0CF8           ;       FlagUltrasoon &= ~FALLING_EDGE_ULTRASOON;
 0CF8 70CF              and F,0xCF      ; iopage = 0
 0CFA 62D000            mov REG[0xd0],>_FlagUltrasoon
 0CFD 2600FD            and [_FlagUltrasoon],-3
 0D00                   .dbline 449
 0D00           ; 
 0D00           ;       // Calculate the pulswidth by finding difference between positive edge
 0D00           ;       // and negative edge counts.  As both the numbers are unsigned numbers
 0D00           ;       // the result will be correct even if there is an underflow in the counter
 0D00           ;       // The result will be accurate as long as the total pulsewidth is less than
 0D00           ;       // 65535 timer ticks.
 0D00           ;       PulseWidthUltrasoon = CapturePosEdgeUltrasoon - CaptureNegEdgeUltrasoon;
 0D00 62D000            mov REG[0xd0],>_CapturePosEdgeUltrasoon
 0D03 5101              mov A,[_CapturePosEdgeUltrasoon+1]
 0D05 62D000            mov REG[0xd0],>_CaptureNegEdgeUltrasoon
 0D08 1201              sub A,[_CaptureNegEdgeUltrasoon+1]
 0D0A 62D000            mov REG[0xd0],>_PulseWidthUltrasoon
 0D0D 5301              mov [_PulseWidthUltrasoon+1],A
 0D0F 62D000            mov REG[0xd0],>_CapturePosEdgeUltrasoon
 0D12 5100              mov A,[_CapturePosEdgeUltrasoon]
 0D14 62D000            mov REG[0xd0],>_CaptureNegEdgeUltrasoon
 0D17 1A00              sbb A,[_CaptureNegEdgeUltrasoon]
 0D19 62D000            mov REG[0xd0],>_PulseWidthUltrasoon
 0D1C 5300              mov [_PulseWidthUltrasoon],A
 0D1E                   .dbline 452
 0D1E           ; 
 0D1E           ;       // Set the Data available flag
 0D1E           ;       FlagUltrasoon |= DATA_AVAILABLE_ULTRASOON;
 0D1E 62D000            mov REG[0xd0],>_FlagUltrasoon
 0D21 2E0001            or [_FlagUltrasoon],1
 0D24                   .dbline 453
 0D24           ;    }
 0D24 8023              xjmp L57
 0D26           L56:
 0D26                   .dbline 455
 0D26           ;    else
 0D26           ;    {
 0D26                   .dbline 457
 0D26           ;       // Read the count on positive edge
 0D26           ;       CapturePosEdgeUltrasoon = Timer3_wReadCompareValue();
 0D26 10                push X
 0D27 7C0000            xcall _Timer3_wReadCompareValue
 0D2A 62D000            mov REG[0xd0],>__r0
 0D2D 5A00              mov [__r0],X
 0D2F 20                pop X
 0D30 08                push A
 0D31 5100              mov A,[__r0]
 0D33 62D000            mov REG[0xd0],>_CapturePosEdgeUltrasoon
 0D36 5300              mov [_CapturePosEdgeUltrasoon],A
 0D38 18                pop A
 0D39 5301              mov [_CapturePosEdgeUltrasoon+1],A
 0D3B                   .dbline 460
 0D3B           ;       
 0D3B           ;       // Change the capture to negative edge and set flag
 0D3B           ;       Timer3_FUNC_LSB_REG |= 0x80;
 0D3B 7110              or F,0x10  ; iopage = 1
 0D3D 433080            or REG[0x30],-128
 0D40                   .dbline 461
 0D40           ;       FlagUltrasoon |= FALLING_EDGE_ULTRASOON;
 0D40 70CF              and F,0xCF      ; iopage = 0
 0D42 62D000            mov REG[0xd0],>_FlagUltrasoon
 0D45 2E0002            or [_FlagUltrasoon],2
 0D48                   .dbline 462
 0D48           ;    }
 0D48           L57:
 0D48                   .dbline -2
 0D48           L55:
 0D48 62D000            mov REG[0xD0],>__r0
 0D4B 18                pop A
 0D4C 5300              mov [__rZ],A
 0D4E 18                pop A
 0D4F 5300              mov [__rY],A
 0D51 18                pop A
 0D52 5300              mov [__rX],A
 0D54 18                pop A
 0D55 5300              mov [__r11],A
 0D57 18                pop A
 0D58 5300              mov [__r10],A
 0D5A 18                pop A
 0D5B 5300              mov [__r9],A
 0D5D 18                pop A
 0D5E 5300              mov [__r8],A
 0D60 18                pop A
 0D61 5300              mov [__r7],A
 0D63 18                pop A
 0D64 5300              mov [__r6],A
 0D66 18                pop A
 0D67 5300              mov [__r5],A
 0D69 18                pop A
 0D6A 5300              mov [__r4],A
 0D6C 18                pop A
 0D6D 5300              mov [__r3],A
 0D6F 18                pop A
 0D70 5300              mov [__r2],A
 0D72 18                pop A
 0D73 5300              mov [__r1],A
 0D75 18                pop A
 0D76 5300              mov [__r0],A
 0D78 18                pop A
 0D79 60D5              mov REG[213],A
 0D7B 18                pop A
 0D7C 60D4              mov REG[212],A
 0D7E 18                pop A
 0D7F 60D3              mov REG[211],A
 0D81 18                pop A
 0D82 60D0              mov REG[208],A
 0D84 18                pop A
 0D85                   .dbline 0 ; func end
 0D85 7E                reti
 0D86                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
 0000           _FlagUltrasoon::
 0000 00                .byte 0
 0001                   .dbsym e FlagUltrasoon _FlagUltrasoon c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
 0000           _PulseWidthUltrasoon::
 0000 0000              .byte 0,0
 0002                   .dbsym e PulseWidthUltrasoon _PulseWidthUltrasoon i
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
 0000           _CaptureNegEdgeUltrasoon::
 0000 0000              .byte 0,0
 0002                   .dbsym e CaptureNegEdgeUltrasoon _CaptureNegEdgeUltrasoon i
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
 0000           _CapturePosEdgeUltrasoon::
 0000 0000              .byte 0,0
 0002                   .dbsym e CapturePosEdgeUltrasoon _CapturePosEdgeUltrasoon i
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
 0000           _FlagsElevator::
 0000 00                .byte 0
 0001                   .dbsym e FlagsElevator _FlagsElevator c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
 0000           _PulseWidthElevator::
 0000 0000              .byte 0,0
 0002                   .dbsym e PulseWidthElevator _PulseWidthElevator i
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
 0000           _CaptureNegEdgeElevator::
 0000 0000              .byte 0,0
 0002                   .dbsym e CaptureNegEdgeElevator _CaptureNegEdgeElevator i
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
 0000           _CapturePosEdgeElevator::
 0000 0000              .byte 0,0
 0002                   .dbsym e CapturePosEdgeElevator _CapturePosEdgeElevator i
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
 0000           _FlagsAileron::
 0000 00                .byte 0
 0001                   .dbsym e FlagsAileron _FlagsAileron c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
 0000           _PulseWidthAileron::
 0000 0000              .byte 0,0
 0002                   .dbsym e PulseWidthAileron _PulseWidthAileron i
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
 0000           _CaptureNegEdgeAileron::
 0000 0000              .byte 0,0
 0002                   .dbsym e CaptureNegEdgeAileron _CaptureNegEdgeAileron i
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
 0000           _CapturePosEdgeAileron::
 0000 0000              .byte 0,0
 0002                   .dbsym e CapturePosEdgeAileron _CapturePosEdgeAileron i
