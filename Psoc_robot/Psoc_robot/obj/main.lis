 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
 0000                   .dbfunc e Within _Within fc
 0000           ;          upper -> X+2
 0000           ;          lower -> X+0
 0000           ;         margin -> X-9
 0000           ;         border -> X-7
 0000           ;          value -> X-5
 0000           _Within::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3804              add SP,4
 0004                   .dbline 124
 0004           ; //****************************************************************************
 0004           ; //*****************************************************************************
 0004           ; //  FILENAME: main.c
 0004           ; //   Made for project 2 in the second semester of school
 0004           ; //
 0004           ; //  DESCRIPTION: Main file of the Psoc_robot project.
 0004           ; //
 0004           ; //-----------------------------------------------------------------------------
 0004           ; // 
 0004           ; //*****************************************************************************
 0004           ; //*****************************************************************************
 0004           ; ////***************************************************************************************
 0004           ; 
 0004           ; //------------------------------------------------------------------------------
 0004           ; // Name: Psoc_robot
 0004           ; //------------------------------------------------------------------------------
 0004           ; //------------------------------------------------------------------------------
 0004           ; // For Device: CY8C29466
 0004           ; //------------------------------------------------------------------------------
 0004           ; // Required Software:  PSoC Designer 5.3
 0004           ; 
 0004           ; // Project Settings: 
 0004           ; //      
 0004           ; //      Power Setting [Vcc/SysClk Freq]:  5.0V/24MHz
 0004           ; //      CPU Clock:                        Sysclk/1  
 0004           ; //      VC1                               Sysclk/12
 0004           ; //      VC2                               VC1/2 = Sysclk/24
 0004           ; //      
 0004           ; //            Timer1:                         `                         For reading one joystick channel aileron puls with 
 0004           ; //      Clock                                                            VC2
 0004           ; //      Period                             65535
 0004           ; //      CompareValue                       0
 0004           ; //      CompareType                        Less than or equal to
 0004           ; //      Conected to port                   Port_0_0
 0004           ; 
 0004           ; 
 0004           ; //    Timer2:                         `                         For reading one joystick channel      elevation puls with 1
 0004           ; //      Clock                                                            VC2
 0004           ; //      Period                             65535
 0004           ; //      CompareValue                       0
 0004           ; //      CompareType                        Less than or equal to
 0004           ; //      Conected to port                   Port_0_1
 0004           ; //    
 0004           ; //      Timer3:                               `                         For reading the  ultrasonic sensor
 0004           ; //      Clock                                                            VC2
 0004           ; //      Period                             65535
 0004           ; //      CompareValue                       0
 0004           ; //      CompareType                        Less than or equal to
 0004           ; //      Conected to port                   Port_0_2
 0004           ; //            
 0004           ; //            
 0004           ; //    Pwm conected to port                 Port_0_4
 0004           ; //    PWM:                                                               For controlling one motor on one side
 0004           ; //      Clock                              VC2
 0004           ; //      Enable                             High
 0004           ; //      Period                             1000
 0004           ; //      PulseWidth                         0
 0004           ; //      CompareType                        Less than 
 0004           ; //      Interrupt Type                     Terminal count
 0004           ; //      LCD:
 0004           ; //      LCDPort                            Port_2
 0004           ; //      
 0004           ; //---------------------------------------------------------------------------------
 0004           ; //   Hardware Connections
 0004           ; // Connect P0.1 to P0.2 and press reset.
 0004           ; // You should note the Value of Pulse Width on the LCD.
 0004           ; //
 0004           ; //---------------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include <math.h>      
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; 
 0004           ; #define DEBUG_LCD 1
 0004           ; 
 0004           ; //volatile BOOL ultrasoonInitDone;//dit gedaan om compiler te verplichten waarde terug in te lezen (Caching tegen te gaan )
 0004           ; 
 0004           ; #define MAX_POWER 1000
 0004           ; #define MIN_POWER 0
 0004           ; 
 0004           ; //
 0004           ; #define DATA_AVAILABLE_AILERON 0x01//staat in de eerste bit van de flag 
 0004           ; #define FALLING_EDGE_AILERON 0x02 // staat in de 2de bit van de flag 
 0004           ; WORD CapturePosEdgeAileron;
 0004           ; WORD CaptureNegEdgeAileron;
 0004           ; WORD PulseWidthAileron;
 0004           ; BYTE FlagsAileron;
 0004           ; #define MARGIN_AILERON 2
 0004           ; #define MIN_AILERON 0x60
 0004           ; #define CENTER_AILERON 0x8C
 0004           ; #define MAX_AILERON 0xB9
 0004           ; 
 0004           ; // 
 0004           ; #define DATA_AVAILABLE_ELEVATOR 0x01 // new for motorcontroll2
 0004           ; #define FALLING_EDGE_ELEVATOR 0x02    // new for motorcontroll2
 0004           ; WORD CapturePosEdgeElevator;
 0004           ; WORD CaptureNegEdgeElevator;
 0004           ; WORD PulseWidthElevator;
 0004           ; BYTE FlagsElevator;
 0004           ; #define MARGIN_ELEVATOR 2
 0004           ; #define MIN_ELEVATOR 0x60
 0004           ; #define CENTER_ELEVATOR 0x8C
 0004           ; #define MAX_ELEVATOR 0xB9
 0004           ; 
 0004           ; // for timer 3 and ultrasoon sensor 1
 0004           ; #define DATA_AVAILABLE_ULTRASOON 0x01 
 0004           ; #define FALLING_EDGE_ULTRASOON 0x02    
 0004           ; #define MIN_SAFE_DISTANCE  0x50
 0004           ; 
 0004           ; 
 0004           ; WORD CapturePosEdgeUltrasoon;
 0004           ; WORD CaptureNegEdgeUltrasoon;
 0004           ; WORD PulseWidthUltrasoon;
 0004           ; BYTE FlagUltrasoon;
 0004           ; 
 0004           ; void ultrasoonSensor(void);//long ultrasoon sensor(void);
 0004           ; 
 0004           ; #pragma interrupt_handler Timer1CaptureISR
 0004           ; #pragma interrupt_handler Timer2CaptureISR
 0004           ; #pragma interrupt_handler Timer3CaptureISR
 0004           ; 
 0004           ; 
 0004           ; BOOL Within(WORD value, WORD border, WORD margin)
 0004           ; {
 0004                   .dbline 125
 0004           ;       WORD lower = border - margin;
 0004 52FA              mov A,[X-6]
 0006 13F8              sub A,[X-8]
 0008 5401              mov [X+1],A
 000A 52F9              mov A,[X-7]
 000C 1BF7              sbb A,[X-9]
 000E 5400              mov [X+0],A
 0010                   .dbline 126
 0010           ;       WORD upper = border + margin;
 0010 52FA              mov A,[X-6]
 0012 03F8              add A,[X-8]
 0014 5403              mov [X+3],A
 0016 52F9              mov A,[X-7]
 0018 0BF7              adc A,[X-9]
 001A 5402              mov [X+2],A
 001C                   .dbline 128
 001C           ;       
 001C           ;       if (value >= lower
 001C 52FC              mov A,[X-4]
 001E 1301              sub A,[X+1]
 0020 52FB              mov A,[X-5]
 0022 1B00              sbb A,[X+0]
 0024 C012              jc L2
 0026           X0:
 0026 5203              mov A,[X+3]
 0028 13FC              sub A,[X-4]
 002A 5202              mov A,[X+2]
 002C 1BFB              sbb A,[X-5]
 002E C008              jc L2
 0030           X1:
 0030                   .dbline 130
 0030           ;       &&  value <= upper)
 0030           ;               return TRUE;
 0030 62D000            mov REG[0xd0],>__r0
 0033 5001              mov A,1
 0035 8006              xjmp L1
 0037           L2:
 0037                   .dbline 132
 0037           ;       else
 0037           ;               return FALSE;
 0037 62D000            mov REG[0xd0],>__r0
 003A 5000              mov A,0
 003C                   .dbline -2
 003C           L1:
 003C 38FC              add SP,-4
 003E 20                pop X
 003F                   .dbline 0 ; func end
 003F 7F                ret
 0040                   .dbsym l upper 2 i
 0040                   .dbsym l lower 0 i
 0040                   .dbsym l margin -9 i
 0040                   .dbsym l border -7 i
 0040                   .dbsym l value -5 i
 0040                   .dbend
 0040                   .dbfunc e EvaluateAileron _EvaluateAileron fD
 0040           ;          value -> X-7
 0040           _EvaluateAileron::
 0040                   .dbline -1
 0040 10                push X
 0041 4F                mov X,SP
 0042                   .dbline 137
 0042           ; }
 0042           ; 
 0042           ; // normalization function for Aileron (Timer1)
 0042           ; float EvaluateAileron(DWORD value)
 0042           ; {     
 0042                   .dbline 139
 0042           ;       // Check if pulsewidth data is available
 0042           ;       if(FlagsAileron & DATA_AVAILABLE_AILERON)
 0042 62D000            mov REG[0xd0],>_FlagsAileron
 0045 470001            tst [_FlagsAileron],1
 0048 A2B5              jz L5
 004A                   .dbline 142
 004A           ;       {
 004A           ; #if (DEBUG_LCD)
 004A           ;               LCD_Position(0,0);
 004A                   .dbline 142
 004A 10                push X
 004B 5000              mov A,0
 004D 5700              mov X,0
 004F 7C0000            xcall _LCD_Position
 0052 20                pop X
 0053                   .dbline 143
 0053           ;               LCD_PrHexInt(value);
 0053 62D000            mov REG[0xd0],>__r0
 0056 52FC              mov A,[X-4]
 0058 5300              mov [__r1],A
 005A 52FB              mov A,[X-5]
 005C 10                push X
 005D 08                push A
 005E 5100              mov A,[__r1]
 0060 20                pop X
 0061 7C0000            xcall _LCD_PrHexInt
 0064 20                pop X
 0065                   .dbline 146
 0065           ; #endif        
 0065           ;               // stick in center 
 0065           ;               if (Within(value, CENTER_AILERON, MARGIN_AILERON))
 0065 5000              mov A,0
 0067 08                push A
 0068 5002              mov A,2
 006A 08                push A
 006B 5000              mov A,0
 006D 08                push A
 006E 508C              mov A,-116
 0070 08                push A
 0071 62D000            mov REG[0xd0],>__r0
 0074 52FC              mov A,[X-4]
 0076 5300              mov [__r1],A
 0078 52FB              mov A,[X-5]
 007A 08                push A
 007B 5100              mov A,[__r1]
 007D 08                push A
 007E 9F80              xcall _Within
 0080 38FA              add SP,-6
 0082 62D000            mov REG[0xd0],>__r0
 0085 3900              cmp A,0
 0087 A025              jz L7
 0089                   .dbline 149
 0089           ;               {
 0089           ; #if (DEBUG_LCD)
 0089           ;                       LCD_Position(0,5);
 0089                   .dbline 149
 0089 10                push X
 008A 5705              mov X,5
 008C 5000              mov A,0
 008E 7C0000            xcall _LCD_Position
 0091                   .dbline 150
 0091           ;                       LCD_PrCString("C");
 0091 500C              mov A,>L9
 0093 08                push A
 0094 500C              mov A,<L9
 0096 5C                mov X,A
 0097 18                pop A
 0098 7C0000            xcall _LCD_PrCString
 009B 20                pop X
 009C                   .dbline 152
 009C           ; #endif                
 009C           ;                       return 0;
 009C 62D000            mov REG[0xd0],>__r0
 009F 550000            mov [__r0],0
 00A2 550000            mov [__r1],0
 00A5 550000            mov [__r2],0
 00A8 550000            mov [__r3],0
 00AB 8261              xjmp L4
 00AD           L7:
 00AD                   .dbline 154
 00AD           ;               }
 00AD           ;               else if (value < CENTER_AILERON) // stick left
 00AD 52FC              mov A,[X-4]
 00AF 118C              sub A,-116
 00B1 52FB              mov A,[X-5]
 00B3 1900              sbb A,0
 00B5 52FA              mov A,[X-6]
 00B7 1900              sbb A,0
 00B9 52F9              mov A,[X-7]
 00BB 1900              sbb A,0
 00BD D115              jnc L10
 00BF           X2:
 00BF                   .dbline 157
 00BF           ;               {
 00BF           ; #if (DEBUG_LCD)
 00BF           ;                       LCD_Position(0,5);
 00BF                   .dbline 157
 00BF 10                push X
 00C0 5705              mov X,5
 00C2 5000              mov A,0
 00C4 7C0000            xcall _LCD_Position
 00C7                   .dbline 158
 00C7           ;                       LCD_PrCString("L");
 00C7 500A              mov A,>L12
 00C9 08                push A
 00CA 500A              mov A,<L12
 00CC 5C                mov X,A
 00CD 18                pop A
 00CE 7C0000            xcall _LCD_PrCString
 00D1 20                pop X
 00D2                   .dbline 160
 00D2           ; #endif        
 00D2           ;                       return ((float)value - CENTER_AILERON) / (float)(MAX_AILERON - CENTER_AILERON);
 00D2 62D000            mov REG[0xd0],>__r0
 00D5 52FC              mov A,[X-4]
 00D7 2101              and A,1
 00D9 5300              mov [__r3],A
 00DB 52FB              mov A,[X-5]
 00DD 2100              and A,0
 00DF 5300              mov [__r2],A
 00E1 52FA              mov A,[X-6]
 00E3 2100              and A,0
 00E5 5300              mov [__r1],A
 00E7 52F9              mov A,[X-7]
 00E9 2100              and A,0
 00EB 08                push A
 00EC 5100              mov A,[__r1]
 00EE 08                push A
 00EF 5100              mov A,[__r2]
 00F1 08                push A
 00F2 5100              mov A,[__r3]
 00F4 08                push A
 00F5 7C0000            xcall __long2fp
 00F8 18                pop A
 00F9 5300              mov [__r3],A
 00FB 18                pop A
 00FC 5300              mov [__r2],A
 00FE 18                pop A
 00FF 5300              mov [__r1],A
 0101 18                pop A
 0102 5300              mov [__r0],A
 0104 52F9              mov A,[X-7]
 0106 5300              mov [__r4],A
 0108 52FA              mov A,[X-6]
 010A 5300              mov [__r5],A
 010C 52FB              mov A,[X-5]
 010E 5300              mov [__r6],A
 0110 52FC              mov A,[X-4]
 0112 5300              mov [__r7],A
 0114 70FB              and F,-5
 0116 6E00              rrc [__r4]
 0118 6E00              rrc [__r5]
 011A 6E00              rrc [__r6]
 011C 6E00              rrc [__r7]
 011E 5100              mov A,[__r4]
 0120 08                push A
 0121 5100              mov A,[__r5]
 0123 08                push A
 0124 5100              mov A,[__r6]
 0126 08                push A
 0127 5100              mov A,[__r7]
 0129 08                push A
 012A 7C0000            xcall __long2fp
 012D 18                pop A
 012E 5300              mov [__r7],A
 0130 18                pop A
 0131 5300              mov [__r6],A
 0133 18                pop A
 0134 5300              mov [__r5],A
 0136 18                pop A
 0137 08                push A
 0138 5100              mov A,[__r5]
 013A 08                push A
 013B 5100              mov A,[__r6]
 013D 08                push A
 013E 5100              mov A,[__r7]
 0140 08                push A
 0141 5040              mov A,64
 0143 08                push A
 0144 5000              mov A,0
 0146 08                push A
 0147 08                push A
 0148 08                push A
 0149 7C0000            xcall __fpmul
 014C 18                pop A
 014D 5300              mov [__r7],A
 014F 18                pop A
 0150 5300              mov [__r6],A
 0152 18                pop A
 0153 5300              mov [__r5],A
 0155 18                pop A
 0156 5300              mov [__r4],A
 0158 38FC              add SP,-4
 015A 5100              mov A,[__r0]
 015C 08                push A
 015D 5100              mov A,[__r1]
 015F 08                push A
 0160 5100              mov A,[__r2]
 0162 08                push A
 0163 5100              mov A,[__r3]
 0165 08                push A
 0166 5100              mov A,[__r4]
 0168 08                push A
 0169 5100              mov A,[__r5]
 016B 08                push A
 016C 5100              mov A,[__r6]
 016E 08                push A
 016F 5100              mov A,[__r7]
 0171 08                push A
 0172 7C0000            xcall __fpadd
 0175 18                pop A
 0176 5300              mov [__r3],A
 0178 18                pop A
 0179 5300              mov [__r2],A
 017B 18                pop A
 017C 5300              mov [__r1],A
 017E 18                pop A
 017F 5300              mov [__r0],A
 0181 38FC              add SP,-4
 0183 5043              mov A,67
 0185 08                push A
 0186 500C              mov A,12
 0188 08                push A
 0189 5000              mov A,0
 018B 08                push A
 018C 08                push A
 018D 5100              mov A,[__r0]
 018F 08                push A
 0190 5100              mov A,[__r1]
 0192 08                push A
 0193 5100              mov A,[__r2]
 0195 08                push A
 0196 5100              mov A,[__r3]
 0198 08                push A
 0199 7C0000            xcall __fpsub
 019C 18                pop A
 019D 5300              mov [__r3],A
 019F 18                pop A
 01A0 5300              mov [__r2],A
 01A2 18                pop A
 01A3 5300              mov [__r1],A
 01A5 18                pop A
 01A6 5300              mov [__r0],A
 01A8 38FC              add SP,-4
 01AA 5042              mov A,66
 01AC 08                push A
 01AD 5034              mov A,52
 01AF 08                push A
 01B0 5000              mov A,0
 01B2 08                push A
 01B3 08                push A
 01B4 5100              mov A,[__r0]
 01B6 08                push A
 01B7 5100              mov A,[__r1]
 01B9 08                push A
 01BA 5100              mov A,[__r2]
 01BC 08                push A
 01BD 5100              mov A,[__r3]
 01BF 08                push A
 01C0 7C0000            xcall __fpdiv
 01C3 18                pop A
 01C4 5300              mov [__r3],A
 01C6 18                pop A
 01C7 5300              mov [__r2],A
 01C9 18                pop A
 01CA 5300              mov [__r1],A
 01CC 18                pop A
 01CD 5300              mov [__r0],A
 01CF 38FC              add SP,-4
 01D1 813B              xjmp L4
 01D3           L10:
 01D3                   .dbline 162
 01D3           ;               }
 01D3           ;               else if (value > CENTER_AILERON) // stick right
 01D3 508C              mov A,-116
 01D5 13FC              sub A,[X-4]
 01D7 5000              mov A,0
 01D9 1BFB              sbb A,[X-5]
 01DB 5000              mov A,0
 01DD 1BFA              sbb A,[X-6]
 01DF 5000              mov A,0
 01E1 1BF9              sbb A,[X-7]
 01E3 D114              jnc L13
 01E5           X3:
 01E5                   .dbline 165
 01E5           ;               {                       
 01E5           ; #if (DEBUG_LCD)
 01E5           ;                       LCD_Position(0,5);
 01E5                   .dbline 165
 01E5 10                push X
 01E6 5705              mov X,5
 01E8 5000              mov A,0
 01EA 7C0000            xcall _LCD_Position
 01ED                   .dbline 166
 01ED           ;                       LCD_PrCString("R");
 01ED 5008              mov A,>L15
 01EF 08                push A
 01F0 5008              mov A,<L15
 01F2 5C                mov X,A
 01F3 18                pop A
 01F4 7C0000            xcall _LCD_PrCString
 01F7 20                pop X
 01F8                   .dbline 168
 01F8           ; #endif                        
 01F8           ;                       return -(CENTER_AILERON - (float)value) / (float)(CENTER_AILERON - MIN_AILERON);
 01F8 62D000            mov REG[0xd0],>__r0
 01FB 52FC              mov A,[X-4]
 01FD 2101              and A,1
 01FF 5300              mov [__r3],A
 0201 52FB              mov A,[X-5]
 0203 2100              and A,0
 0205 5300              mov [__r2],A
 0207 52FA              mov A,[X-6]
 0209 2100              and A,0
 020B 5300              mov [__r1],A
 020D 52F9              mov A,[X-7]
 020F 2100              and A,0
 0211 08                push A
 0212 5100              mov A,[__r1]
 0214 08                push A
 0215 5100              mov A,[__r2]
 0217 08                push A
 0218 5100              mov A,[__r3]
 021A 08                push A
 021B 7C0000            xcall __long2fp
 021E 18                pop A
 021F 5300              mov [__r3],A
 0221 18                pop A
 0222 5300              mov [__r2],A
 0224 18                pop A
 0225 5300              mov [__r1],A
 0227 18                pop A
 0228 5300              mov [__r0],A
 022A 52F9              mov A,[X-7]
 022C 5300              mov [__r4],A
 022E 52FA              mov A,[X-6]
 0230 5300              mov [__r5],A
 0232 52FB              mov A,[X-5]
 0234 5300              mov [__r6],A
 0236 52FC              mov A,[X-4]
 0238 5300              mov [__r7],A
 023A 70FB              and F,-5
 023C 6E00              rrc [__r4]
 023E 6E00              rrc [__r5]
 0240 6E00              rrc [__r6]
 0242 6E00              rrc [__r7]
 0244 5100              mov A,[__r4]
 0246 08                push A
 0247 5100              mov A,[__r5]
 0249 08                push A
 024A 5100              mov A,[__r6]
 024C 08                push A
 024D 5100              mov A,[__r7]
 024F 08                push A
 0250 7C0000            xcall __long2fp
 0253 18                pop A
 0254 5300              mov [__r7],A
 0256 18                pop A
 0257 5300              mov [__r6],A
 0259 18                pop A
 025A 5300              mov [__r5],A
 025C 18                pop A
 025D 08                push A
 025E 5100              mov A,[__r5]
 0260 08                push A
 0261 5100              mov A,[__r6]
 0263 08                push A
 0264 5100              mov A,[__r7]
 0266 08                push A
 0267 5040              mov A,64
 0269 08                push A
 026A 5000              mov A,0
 026C 08                push A
 026D 08                push A
 026E 08                push A
 026F 7C0000            xcall __fpmul
 0272 18                pop A
 0273 5300              mov [__r7],A
 0275 18                pop A
 0276 5300              mov [__r6],A
 0278 18                pop A
 0279 5300              mov [__r5],A
 027B 18                pop A
 027C 5300              mov [__r4],A
 027E 38FC              add SP,-4
 0280 5100              mov A,[__r0]
 0282 08                push A
 0283 5100              mov A,[__r1]
 0285 08                push A
 0286 5100              mov A,[__r2]
 0288 08                push A
 0289 5100              mov A,[__r3]
 028B 08                push A
 028C 5100              mov A,[__r4]
 028E 08                push A
 028F 5100              mov A,[__r5]
 0291 08                push A
 0292 5100              mov A,[__r6]
 0294 08                push A
 0295 5100              mov A,[__r7]
 0297 08                push A
 0298 7C0000            xcall __fpadd
 029B 18                pop A
 029C 5300              mov [__r3],A
 029E 18                pop A
 029F 5300              mov [__r2],A
 02A1 18                pop A
 02A2 5300              mov [__r1],A
 02A4 18                pop A
 02A5 38FC              add SP,-4
 02A7 08                push A
 02A8 5100              mov A,[__r1]
 02AA 08                push A
 02AB 5100              mov A,[__r2]
 02AD 08                push A
 02AE 5100              mov A,[__r3]
 02B0 08                push A
 02B1 5043              mov A,67
 02B3 08                push A
 02B4 500C              mov A,12
 02B6 08                push A
 02B7 5000              mov A,0
 02B9 08                push A
 02BA 08                push A
 02BB 7C0000            xcall __fpsub
 02BE 18                pop A
 02BF 5300              mov [__r3],A
 02C1 18                pop A
 02C2 5300              mov [__r2],A
 02C4 18                pop A
 02C5 5300              mov [__r1],A
 02C7 18                pop A
 02C8 5300              mov [__r0],A
 02CA 38FC              add SP,-4
 02CC 360080            xor [__r0],-128
 02CF 5042              mov A,66
 02D1 08                push A
 02D2 5030              mov A,48
 02D4 08                push A
 02D5 5000              mov A,0
 02D7 08                push A
 02D8 08                push A
 02D9 5100              mov A,[__r0]
 02DB 08                push A
 02DC 5100              mov A,[__r1]
 02DE 08                push A
 02DF 5100              mov A,[__r2]
 02E1 08                push A
 02E2 5100              mov A,[__r3]
 02E4 08                push A
 02E5 7C0000            xcall __fpdiv
 02E8 18                pop A
 02E9 5300              mov [__r3],A
 02EB 18                pop A
 02EC 5300              mov [__r2],A
 02EE 18                pop A
 02EF 5300              mov [__r1],A
 02F1 18                pop A
 02F2 5300              mov [__r0],A
 02F4 38FC              add SP,-4
 02F6 8016              xjmp L4
 02F8           L13:
 02F8                   .dbline 172
 02F8           ;               }
 02F8           ;               
 02F8           ;               // action finished, clear flag to avoid doing it again
 02F8           ;               FlagsAileron &= ~DATA_AVAILABLE_AILERON;
 02F8 62D000            mov REG[0xd0],>_FlagsAileron
 02FB 2600FE            and [_FlagsAileron],-2
 02FE                   .dbline 173
 02FE           ;       }
 02FE           L5:
 02FE                   .dbline 175
 02FE           ;       
 02FE           ;       return 0;
 02FE 62D000            mov REG[0xd0],>__r0
 0301 550000            mov [__r0],0
 0304 550000            mov [__r1],0
 0307 550000            mov [__r2],0
 030A 550000            mov [__r3],0
 030D                   .dbline -2
 030D           L4:
 030D 20                pop X
 030E                   .dbline 0 ; func end
 030E 7F                ret
 030F                   .dbsym l value -7 l
 030F                   .dbend
 030F                   .dbfunc e EvaluateElevator _EvaluateElevator fD
 030F           ;          value -> X-7
 030F           _EvaluateElevator::
 030F                   .dbline -1
 030F 10                push X
 0310 4F                mov X,SP
 0311                   .dbline 179
 0311           ; }
 0311           ; // normalization function for Elevator(Timer2)
 0311           ; float EvaluateElevator(DWORD value)
 0311           ; {
 0311                   .dbline 181
 0311           ;       // Check if pulsewidth data is available
 0311           ;       if(FlagsElevator & DATA_AVAILABLE_ELEVATOR)
 0311 62D000            mov REG[0xd0],>_FlagsElevator
 0314 470001            tst [_FlagsElevator],1
 0317 A2B5              jz L17
 0319                   .dbline 184
 0319           ;       {
 0319           ; #if (DEBUG_LCD)
 0319           ;               LCD_Position(1,0);
 0319                   .dbline 184
 0319 10                push X
 031A 5700              mov X,0
 031C 5001              mov A,1
 031E 7C0000            xcall _LCD_Position
 0321 20                pop X
 0322                   .dbline 185
 0322           ;               LCD_PrHexInt(value);
 0322 62D000            mov REG[0xd0],>__r0
 0325 52FC              mov A,[X-4]
 0327 5300              mov [__r1],A
 0329 52FB              mov A,[X-5]
 032B 10                push X
 032C 08                push A
 032D 5100              mov A,[__r1]
 032F 20                pop X
 0330 7C0000            xcall _LCD_PrHexInt
 0333 20                pop X
 0334                   .dbline 188
 0334           ; #endif        
 0334           ;               // stick in center 
 0334           ;               if (Within(value, CENTER_ELEVATOR, MARGIN_ELEVATOR))
 0334 5000              mov A,0
 0336 08                push A
 0337 5002              mov A,2
 0339 08                push A
 033A 5000              mov A,0
 033C 08                push A
 033D 508C              mov A,-116
 033F 08                push A
 0340 62D000            mov REG[0xd0],>__r0
 0343 52FC              mov A,[X-4]
 0345 5300              mov [__r1],A
 0347 52FB              mov A,[X-5]
 0349 08                push A
 034A 5100              mov A,[__r1]
 034C 08                push A
 034D 9CB1              xcall _Within
 034F 38FA              add SP,-6
 0351 62D000            mov REG[0xd0],>__r0
 0354 3900              cmp A,0
 0356 A025              jz L19
 0358                   .dbline 191
 0358           ;               {
 0358           ; #if (DEBUG_LCD)
 0358           ;                       LCD_Position(1,5);
 0358                   .dbline 191
 0358 10                push X
 0359 5705              mov X,5
 035B 5001              mov A,1
 035D 7C0000            xcall _LCD_Position
 0360                   .dbline 192
 0360           ;                       LCD_PrCString("C");
 0360 500C              mov A,>L9
 0362 08                push A
 0363 500C              mov A,<L9
 0365 5C                mov X,A
 0366 18                pop A
 0367 7C0000            xcall _LCD_PrCString
 036A 20                pop X
 036B                   .dbline 194
 036B           ; #endif        
 036B           ;                       return 0;
 036B 62D000            mov REG[0xd0],>__r0
 036E 550000            mov [__r0],0
 0371 550000            mov [__r1],0
 0374 550000            mov [__r2],0
 0377 550000            mov [__r3],0
 037A 8261              xjmp L16
 037C           L19:
 037C                   .dbline 196
 037C           ;               }
 037C           ;               else if (value > CENTER_ELEVATOR) // stick up
 037C 508C              mov A,-116
 037E 13FC              sub A,[X-4]
 0380 5000              mov A,0
 0382 1BFB              sbb A,[X-5]
 0384 5000              mov A,0
 0386 1BFA              sbb A,[X-6]
 0388 5000              mov A,0
 038A 1BF9              sbb A,[X-7]
 038C D115              jnc L21
 038E           X4:
 038E                   .dbline 199
 038E           ;               {
 038E           ; #if (DEBUG_LCD)
 038E           ;                       LCD_Position(1,5);
 038E                   .dbline 199
 038E 10                push X
 038F 5705              mov X,5
 0391 5001              mov A,1
 0393 7C0000            xcall _LCD_Position
 0396                   .dbline 200
 0396           ;                       LCD_PrCString("U");
 0396 5006              mov A,>L23
 0398 08                push A
 0399 5006              mov A,<L23
 039B 5C                mov X,A
 039C 18                pop A
 039D 7C0000            xcall _LCD_PrCString
 03A0 20                pop X
 03A1                   .dbline 202
 03A1           ; #endif                        
 03A1           ;                       return ((float)value - CENTER_ELEVATOR) / (float)(MAX_ELEVATOR - CENTER_ELEVATOR);
 03A1 62D000            mov REG[0xd0],>__r0
 03A4 52FC              mov A,[X-4]
 03A6 2101              and A,1
 03A8 5300              mov [__r3],A
 03AA 52FB              mov A,[X-5]
 03AC 2100              and A,0
 03AE 5300              mov [__r2],A
 03B0 52FA              mov A,[X-6]
 03B2 2100              and A,0
 03B4 5300              mov [__r1],A
 03B6 52F9              mov A,[X-7]
 03B8 2100              and A,0
 03BA 08                push A
 03BB 5100              mov A,[__r1]
 03BD 08                push A
 03BE 5100              mov A,[__r2]
 03C0 08                push A
 03C1 5100              mov A,[__r3]
 03C3 08                push A
 03C4 7C0000            xcall __long2fp
 03C7 18                pop A
 03C8 5300              mov [__r3],A
 03CA 18                pop A
 03CB 5300              mov [__r2],A
 03CD 18                pop A
 03CE 5300              mov [__r1],A
 03D0 18                pop A
 03D1 5300              mov [__r0],A
 03D3 52F9              mov A,[X-7]
 03D5 5300              mov [__r4],A
 03D7 52FA              mov A,[X-6]
 03D9 5300              mov [__r5],A
 03DB 52FB              mov A,[X-5]
 03DD 5300              mov [__r6],A
 03DF 52FC              mov A,[X-4]
 03E1 5300              mov [__r7],A
 03E3 70FB              and F,-5
 03E5 6E00              rrc [__r4]
 03E7 6E00              rrc [__r5]
 03E9 6E00              rrc [__r6]
 03EB 6E00              rrc [__r7]
 03ED 5100              mov A,[__r4]
 03EF 08                push A
 03F0 5100              mov A,[__r5]
 03F2 08                push A
 03F3 5100              mov A,[__r6]
 03F5 08                push A
 03F6 5100              mov A,[__r7]
 03F8 08                push A
 03F9 7C0000            xcall __long2fp
 03FC 18                pop A
 03FD 5300              mov [__r7],A
 03FF 18                pop A
 0400 5300              mov [__r6],A
 0402 18                pop A
 0403 5300              mov [__r5],A
 0405 18                pop A
 0406 08                push A
 0407 5100              mov A,[__r5]
 0409 08                push A
 040A 5100              mov A,[__r6]
 040C 08                push A
 040D 5100              mov A,[__r7]
 040F 08                push A
 0410 5040              mov A,64
 0412 08                push A
 0413 5000              mov A,0
 0415 08                push A
 0416 08                push A
 0417 08                push A
 0418 7C0000            xcall __fpmul
 041B 18                pop A
 041C 5300              mov [__r7],A
 041E 18                pop A
 041F 5300              mov [__r6],A
 0421 18                pop A
 0422 5300              mov [__r5],A
 0424 18                pop A
 0425 5300              mov [__r4],A
 0427 38FC              add SP,-4
 0429 5100              mov A,[__r0]
 042B 08                push A
 042C 5100              mov A,[__r1]
 042E 08                push A
 042F 5100              mov A,[__r2]
 0431 08                push A
 0432 5100              mov A,[__r3]
 0434 08                push A
 0435 5100              mov A,[__r4]
 0437 08                push A
 0438 5100              mov A,[__r5]
 043A 08                push A
 043B 5100              mov A,[__r6]
 043D 08                push A
 043E 5100              mov A,[__r7]
 0440 08                push A
 0441 7C0000            xcall __fpadd
 0444 18                pop A
 0445 5300              mov [__r3],A
 0447 18                pop A
 0448 5300              mov [__r2],A
 044A 18                pop A
 044B 5300              mov [__r1],A
 044D 18                pop A
 044E 5300              mov [__r0],A
 0450 38FC              add SP,-4
 0452 5043              mov A,67
 0454 08                push A
 0455 500C              mov A,12
 0457 08                push A
 0458 5000              mov A,0
 045A 08                push A
 045B 08                push A
 045C 5100              mov A,[__r0]
 045E 08                push A
 045F 5100              mov A,[__r1]
 0461 08                push A
 0462 5100              mov A,[__r2]
 0464 08                push A
 0465 5100              mov A,[__r3]
 0467 08                push A
 0468 7C0000            xcall __fpsub
 046B 18                pop A
 046C 5300              mov [__r3],A
 046E 18                pop A
 046F 5300              mov [__r2],A
 0471 18                pop A
 0472 5300              mov [__r1],A
 0474 18                pop A
 0475 5300              mov [__r0],A
 0477 38FC              add SP,-4
 0479 5042              mov A,66
 047B 08                push A
 047C 5034              mov A,52
 047E 08                push A
 047F 5000              mov A,0
 0481 08                push A
 0482 08                push A
 0483 5100              mov A,[__r0]
 0485 08                push A
 0486 5100              mov A,[__r1]
 0488 08                push A
 0489 5100              mov A,[__r2]
 048B 08                push A
 048C 5100              mov A,[__r3]
 048E 08                push A
 048F 7C0000            xcall __fpdiv
 0492 18                pop A
 0493 5300              mov [__r3],A
 0495 18                pop A
 0496 5300              mov [__r2],A
 0498 18                pop A
 0499 5300              mov [__r1],A
 049B 18                pop A
 049C 5300              mov [__r0],A
 049E 38FC              add SP,-4
 04A0 813B              xjmp L16
 04A2           L21:
 04A2                   .dbline 204
 04A2           ;               }
 04A2           ;               else if (value < CENTER_ELEVATOR) // stick down
 04A2 52FC              mov A,[X-4]
 04A4 118C              sub A,-116
 04A6 52FB              mov A,[X-5]
 04A8 1900              sbb A,0
 04AA 52FA              mov A,[X-6]
 04AC 1900              sbb A,0
 04AE 52F9              mov A,[X-7]
 04B0 1900              sbb A,0
 04B2 D114              jnc L24
 04B4           X5:
 04B4                   .dbline 207
 04B4           ;               {                       
 04B4           ; #if (DEBUG_LCD)
 04B4           ;                       LCD_Position(1,5);
 04B4                   .dbline 207
 04B4 10                push X
 04B5 5705              mov X,5
 04B7 5001              mov A,1
 04B9 7C0000            xcall _LCD_Position
 04BC                   .dbline 208
 04BC           ;                       LCD_PrCString("D");
 04BC 5004              mov A,>L26
 04BE 08                push A
 04BF 5004              mov A,<L26
 04C1 5C                mov X,A
 04C2 18                pop A
 04C3 7C0000            xcall _LCD_PrCString
 04C6 20                pop X
 04C7                   .dbline 210
 04C7           ; #endif                        
 04C7           ;                       return -(CENTER_ELEVATOR - (float)value) / (float)(CENTER_ELEVATOR - MIN_ELEVATOR);
 04C7 62D000            mov REG[0xd0],>__r0
 04CA 52FC              mov A,[X-4]
 04CC 2101              and A,1
 04CE 5300              mov [__r3],A
 04D0 52FB              mov A,[X-5]
 04D2 2100              and A,0
 04D4 5300              mov [__r2],A
 04D6 52FA              mov A,[X-6]
 04D8 2100              and A,0
 04DA 5300              mov [__r1],A
 04DC 52F9              mov A,[X-7]
 04DE 2100              and A,0
 04E0 08                push A
 04E1 5100              mov A,[__r1]
 04E3 08                push A
 04E4 5100              mov A,[__r2]
 04E6 08                push A
 04E7 5100              mov A,[__r3]
 04E9 08                push A
 04EA 7C0000            xcall __long2fp
 04ED 18                pop A
 04EE 5300              mov [__r3],A
 04F0 18                pop A
 04F1 5300              mov [__r2],A
 04F3 18                pop A
 04F4 5300              mov [__r1],A
 04F6 18                pop A
 04F7 5300              mov [__r0],A
 04F9 52F9              mov A,[X-7]
 04FB 5300              mov [__r4],A
 04FD 52FA              mov A,[X-6]
 04FF 5300              mov [__r5],A
 0501 52FB              mov A,[X-5]
 0503 5300              mov [__r6],A
 0505 52FC              mov A,[X-4]
 0507 5300              mov [__r7],A
 0509 70FB              and F,-5
 050B 6E00              rrc [__r4]
 050D 6E00              rrc [__r5]
 050F 6E00              rrc [__r6]
 0511 6E00              rrc [__r7]
 0513 5100              mov A,[__r4]
 0515 08                push A
 0516 5100              mov A,[__r5]
 0518 08                push A
 0519 5100              mov A,[__r6]
 051B 08                push A
 051C 5100              mov A,[__r7]
 051E 08                push A
 051F 7C0000            xcall __long2fp
 0522 18                pop A
 0523 5300              mov [__r7],A
 0525 18                pop A
 0526 5300              mov [__r6],A
 0528 18                pop A
 0529 5300              mov [__r5],A
 052B 18                pop A
 052C 08                push A
 052D 5100              mov A,[__r5]
 052F 08                push A
 0530 5100              mov A,[__r6]
 0532 08                push A
 0533 5100              mov A,[__r7]
 0535 08                push A
 0536 5040              mov A,64
 0538 08                push A
 0539 5000              mov A,0
 053B 08                push A
 053C 08                push A
 053D 08                push A
 053E 7C0000            xcall __fpmul
 0541 18                pop A
 0542 5300              mov [__r7],A
 0544 18                pop A
 0545 5300              mov [__r6],A
 0547 18                pop A
 0548 5300              mov [__r5],A
 054A 18                pop A
 054B 5300              mov [__r4],A
 054D 38FC              add SP,-4
 054F 5100              mov A,[__r0]
 0551 08                push A
 0552 5100              mov A,[__r1]
 0554 08                push A
 0555 5100              mov A,[__r2]
 0557 08                push A
 0558 5100              mov A,[__r3]
 055A 08                push A
 055B 5100              mov A,[__r4]
 055D 08                push A
 055E 5100              mov A,[__r5]
 0560 08                push A
 0561 5100              mov A,[__r6]
 0563 08                push A
 0564 5100              mov A,[__r7]
 0566 08                push A
 0567 7C0000            xcall __fpadd
 056A 18                pop A
 056B 5300              mov [__r3],A
 056D 18                pop A
 056E 5300              mov [__r2],A
 0570 18                pop A
 0571 5300              mov [__r1],A
 0573 18                pop A
 0574 38FC              add SP,-4
 0576 08                push A
 0577 5100              mov A,[__r1]
 0579 08                push A
 057A 5100              mov A,[__r2]
 057C 08                push A
 057D 5100              mov A,[__r3]
 057F 08                push A
 0580 5043              mov A,67
 0582 08                push A
 0583 500C              mov A,12
 0585 08                push A
 0586 5000              mov A,0
 0588 08                push A
 0589 08                push A
 058A 7C0000            xcall __fpsub
 058D 18                pop A
 058E 5300              mov [__r3],A
 0590 18                pop A
 0591 5300              mov [__r2],A
 0593 18                pop A
 0594 5300              mov [__r1],A
 0596 18                pop A
 0597 5300              mov [__r0],A
 0599 38FC              add SP,-4
 059B 360080            xor [__r0],-128
 059E 5042              mov A,66
 05A0 08                push A
 05A1 5030              mov A,48
 05A3 08                push A
 05A4 5000              mov A,0
 05A6 08                push A
 05A7 08                push A
 05A8 5100              mov A,[__r0]
 05AA 08                push A
 05AB 5100              mov A,[__r1]
 05AD 08                push A
 05AE 5100              mov A,[__r2]
 05B0 08                push A
 05B1 5100              mov A,[__r3]
 05B3 08                push A
 05B4 7C0000            xcall __fpdiv
 05B7 18                pop A
 05B8 5300              mov [__r3],A
 05BA 18                pop A
 05BB 5300              mov [__r2],A
 05BD 18                pop A
 05BE 5300              mov [__r1],A
 05C0 18                pop A
 05C1 5300              mov [__r0],A
 05C3 38FC              add SP,-4
 05C5 8016              xjmp L16
 05C7           L24:
 05C7                   .dbline 214
 05C7           ;               }
 05C7           ;               
 05C7           ;               // action finished, clear flag to avoid doing it again
 05C7           ;               FlagsElevator &= ~DATA_AVAILABLE_ELEVATOR;
 05C7 62D000            mov REG[0xd0],>_FlagsElevator
 05CA 2600FE            and [_FlagsElevator],-2
 05CD                   .dbline 215
 05CD           ;       }
 05CD           L17:
 05CD                   .dbline 217
 05CD           ;       
 05CD           ;       return 0;
 05CD 62D000            mov REG[0xd0],>__r0
 05D0 550000            mov [__r0],0
 05D3 550000            mov [__r1],0
 05D6 550000            mov [__r2],0
 05D9 550000            mov [__r3],0
 05DC                   .dbline -2
 05DC           L16:
 05DC 20                pop X
 05DD                   .dbline 0 ; func end
 05DD 7F                ret
 05DE                   .dbsym l value -7 l
 05DE                   .dbend
 05DE                   .dbfunc e TriggerUltrasoon _TriggerUltrasoon fV
 05DE           _TriggerUltrasoon::
 05DE                   .dbline -1
 05DE                   .dbline 221
 05DE           ; }
 05DE           ; 
 05DE           ; void TriggerUltrasoon(void)
 05DE           ; {
 05DE                   .dbline 222
 05DE           ;       PRT1DR |= 0x10;// setting p1[4]
 05DE 430410            or REG[0x4],16
 05E1                   .dbline 223
 05E1           ;     asm("nop");
 05E1 40                        nop
 05E2           
 05E2                   .dbline 224
 05E2           ;       asm("nop");
 05E2 40                        nop
 05E3           
 05E3                   .dbline 225
 05E3           ;       asm("nop");
 05E3 40                        nop
 05E4           
 05E4                   .dbline 226
 05E4           ;       asm("nop");
 05E4 40                        nop
 05E5           
 05E5                   .dbline 227
 05E5           ;       asm("nop");
 05E5 40                        nop
 05E6           
 05E6                   .dbline 228
 05E6           ;       asm("nop");
 05E6 40                        nop
 05E7           
 05E7                   .dbline 229
 05E7           ;       asm("nop");
 05E7 40                        nop
 05E8           
 05E8                   .dbline 230
 05E8           ;       asm("nop");
 05E8 40                        nop
 05E9           
 05E9                   .dbline 231
 05E9           ;       asm("nop");
 05E9 40                        nop
 05EA           
 05EA                   .dbline 232
 05EA           ;       asm("nop");
 05EA 40                        nop
 05EB           
 05EB                   .dbline 233
 05EB           ;       asm("nop");
 05EB 40                        nop
 05EC           
 05EC                   .dbline 234
 05EC           ;       asm("nop");
 05EC 40                        nop
 05ED           
 05ED                   .dbline 235
 05ED           ;       asm("nop");
 05ED 40                        nop
 05EE           
 05EE                   .dbline 236
 05EE           ;       asm("nop");
 05EE 40                        nop
 05EF           
 05EF                   .dbline 237
 05EF           ;       asm("nop");
 05EF 40                        nop
 05F0           
 05F0                   .dbline 238
 05F0           ;       asm("nop");
 05F0 40                        nop
 05F1           
 05F1                   .dbline 239
 05F1           ;       asm("nop");
 05F1 40                        nop
 05F2           
 05F2                   .dbline 240
 05F2           ;       asm("nop");
 05F2 40                        nop
 05F3           
 05F3                   .dbline 241
 05F3           ;       PRT1DR &= ~0x10;// clearing   P1[4]
 05F3 4104EF            and REG[0x4],-17
 05F6                   .dbline -2
 05F6           L27:
 05F6                   .dbline 0 ; func end
 05F6 7F                ret
 05F7                   .dbend
 05F7                   .dbfunc e EvaluateUltrasoonSensor _EvaluateUltrasoonSensor fD
 05F7           ; pulseWidthUltrasoon -> X+0
 05F7           _EvaluateUltrasoonSensor::
 05F7                   .dbline -1
 05F7 10                push X
 05F8 4F                mov X,SP
 05F9 3802              add SP,2
 05FB                   .dbline 245
 05FB           ; }
 05FB           ; 
 05FB           ; float EvaluateUltrasoonSensor(void)//(Timer3)
 05FB           ; {
 05FB                   .dbline 246
 05FB           ;       if (FlagUltrasoon & DATA_AVAILABLE_ULTRASOON)// do if databit is set 
 05FB 62D000            mov REG[0xd0],>_FlagUltrasoon
 05FE 470001            tst [_FlagUltrasoon],1
 0601 A109              jz L29
 0603                   .dbline 248
 0603           ;     {    
 0603           ;               WORD pulseWidthUltrasoon = PulseWidthUltrasoon;
 0603                   .dbline 248
 0603 62D000            mov REG[0xd0],>_PulseWidthUltrasoon
 0606 5101              mov A,[_PulseWidthUltrasoon+1]
 0608 5401              mov [X+1],A
 060A 5100              mov A,[_PulseWidthUltrasoon]
 060C 5400              mov [X+0],A
 060E                   .dbline 251
 060E           ; 
 060E           ; #if (DEBUG_LCD)
 060E           ;               LCD_Position(1,12);
 060E 10                push X
 060F 570C              mov X,12
 0611 5001              mov A,1
 0613 7C0000            xcall _LCD_Position
 0616 20                pop X
 0617                   .dbline 252
 0617           ;               LCD_PrHexInt(pulseWidthUltrasoon);
 0617 10                push X
 0618 5200              mov A,[X+0]
 061A 08                push A
 061B 5201              mov A,[X+1]
 061D 20                pop X
 061E 7C0000            xcall _LCD_PrHexInt
 0621 20                pop X
 0622                   .dbline 254
 0622           ; #endif
 0622           ;               FlagUltrasoon &= ~DATA_AVAILABLE_ULTRASOON;
 0622 62D000            mov REG[0xd0],>_FlagUltrasoon
 0625 2600FE            and [_FlagUltrasoon],-2
 0628                   .dbline 257
 0628           ;               
 0628           ;               // als meting gebeurt is trigger sensor opnieuw en we disablen timer1
 0628           ;               TriggerUltrasoon();     
 0628 9FB4              xcall _TriggerUltrasoon
 062A                   .dbline 259
 062A           ;               
 062A           ;               return pulseWidthUltrasoon;
 062A 62D000            mov REG[0xd0],>__r0
 062D 5201              mov A,[X+1]
 062F 2101              and A,1
 0631 5300              mov [__r1],A
 0633 5200              mov A,[X+0]
 0635 2100              and A,0
 0637 5300              mov [__r0],A
 0639 5100              mov A,[__r1]
 063B 5300              mov [__r3],A
 063D 5100              mov A,[__r0]
 063F 5300              mov [__r2],A
 0641 470080            tst [__r2],-128
 0644 A009              jz X6
 0646 5500FF            mov [__r1],-1
 0649 5500FF            mov [__r0],-1
 064C 800A              jmp X7
 064E           X6:
 064E 62D000            mov REG[0xd0],>__r0
 0651 550000            mov [__r1],0
 0654 550000            mov [__r0],0
 0657           X7:
 0657 62D000            mov REG[0xd0],>__r0
 065A 5100              mov A,[__r0]
 065C 08                push A
 065D 5100              mov A,[__r1]
 065F 08                push A
 0660 5100              mov A,[__r2]
 0662 08                push A
 0663 5100              mov A,[__r3]
 0665 08                push A
 0666 7C0000            xcall __long2fp
 0669 18                pop A
 066A 5300              mov [__r3],A
 066C 18                pop A
 066D 5300              mov [__r2],A
 066F 18                pop A
 0670 5300              mov [__r1],A
 0672 18                pop A
 0673 5300              mov [__r0],A
 0675 5201              mov A,[X+1]
 0677 5300              mov [__r5],A
 0679 5200              mov A,[X+0]
 067B 5300              mov [__r4],A
 067D 70FB              and F,-5
 067F 6E00              rrc [__r4]
 0681 6E00              rrc [__r5]
 0683 5100              mov A,[__r5]
 0685 5300              mov [__r7],A
 0687 5100              mov A,[__r4]
 0689 5300              mov [__r6],A
 068B 470080            tst [__r6],-128
 068E A009              jz X8
 0690 5500FF            mov [__r5],-1
 0693 5500FF            mov [__r4],-1
 0696 800A              jmp X9
 0698           X8:
 0698 62D000            mov REG[0xd0],>__r0
 069B 550000            mov [__r5],0
 069E 550000            mov [__r4],0
 06A1           X9:
 06A1 62D000            mov REG[0xd0],>__r0
 06A4 5100              mov A,[__r4]
 06A6 08                push A
 06A7 5100              mov A,[__r5]
 06A9 08                push A
 06AA 5100              mov A,[__r6]
 06AC 08                push A
 06AD 5100              mov A,[__r7]
 06AF 08                push A
 06B0 7C0000            xcall __long2fp
 06B3 18                pop A
 06B4 5300              mov [__r7],A
 06B6 18                pop A
 06B7 5300              mov [__r6],A
 06B9 18                pop A
 06BA 5300              mov [__r5],A
 06BC 18                pop A
 06BD 08                push A
 06BE 5100              mov A,[__r5]
 06C0 08                push A
 06C1 5100              mov A,[__r6]
 06C3 08                push A
 06C4 5100              mov A,[__r7]
 06C6 08                push A
 06C7 5040              mov A,64
 06C9 08                push A
 06CA 5000              mov A,0
 06CC 08                push A
 06CD 08                push A
 06CE 08                push A
 06CF 7C0000            xcall __fpmul
 06D2 18                pop A
 06D3 5300              mov [__r7],A
 06D5 18                pop A
 06D6 5300              mov [__r6],A
 06D8 18                pop A
 06D9 5300              mov [__r5],A
 06DB 18                pop A
 06DC 5300              mov [__r4],A
 06DE 38FC              add SP,-4
 06E0 5100              mov A,[__r0]
 06E2 08                push A
 06E3 5100              mov A,[__r1]
 06E5 08                push A
 06E6 5100              mov A,[__r2]
 06E8 08                push A
 06E9 5100              mov A,[__r3]
 06EB 08                push A
 06EC 5100              mov A,[__r4]
 06EE 08                push A
 06EF 5100              mov A,[__r5]
 06F1 08                push A
 06F2 5100              mov A,[__r6]
 06F4 08                push A
 06F5 5100              mov A,[__r7]
 06F7 08                push A
 06F8 7C0000            xcall __fpadd
 06FB 18                pop A
 06FC 5300              mov [__r3],A
 06FE 18                pop A
 06FF 5300              mov [__r2],A
 0701 18                pop A
 0702 5300              mov [__r1],A
 0704 18                pop A
 0705 5300              mov [__r0],A
 0707 38FC              add SP,-4
 0709 8010              xjmp L28
 070B           L29:
 070B                   .dbline 262
 070B           ;     }  
 070B           ;       
 070B           ;       return MIN_SAFE_DISTANCE + 1;
 070B 62D000            mov REG[0xd0],>__r0
 070E 550042            mov [__r0],66
 0711 5500A2            mov [__r1],-94
 0714 550000            mov [__r2],0
 0717 550000            mov [__r3],0
 071A                   .dbline -2
 071A           L28:
 071A 38FE              add SP,-2
 071C 20                pop X
 071D                   .dbline 0 ; func end
 071D 7F                ret
 071E                   .dbsym l pulseWidthUltrasoon 0 i
 071E                   .dbend
 071E                   .dbfunc e main _main fV
 071E           ;      direction -> X+25
 071E           ;       distance -> X+21
 071E           ; elevatorNormalized -> X+17
 071E           ;        forward -> X+16
 071E           ; aileronNormalized -> X+12
 071E           ;          speed -> X+8
 071E           ;     motorRight -> X+4
 071E           ;      motorLeft -> X+0
 071E           _main::
 071E                   .dbline -1
 071E 10                push X
 071F 4F                mov X,SP
 0720 3825              add SP,37
 0722                   .dbline 266
 0722           ; }
 0722           ; 
 0722           ; void main(void)
 0722           ; {
 0722                   .dbline 268
 0722           ;       // Enable Global Interrupt   
 0722           ;       M8C_EnableGInt;
 0722 7101                      or  F, 01h
 0724           
 0724                   .dbline 271
 0724           ; 
 0724           ;       // Clear the flags
 0724           ;       FlagsElevator = 0;
 0724 62D000            mov REG[0xd0],>_FlagsElevator
 0727 550000            mov [_FlagsElevator],0
 072A                   .dbline 272
 072A           ;       FlagsAileron = 0;// new for motorcontroll2
 072A 62D000            mov REG[0xd0],>_FlagsAileron
 072D 550000            mov [_FlagsAileron],0
 0730                   .dbline 273
 0730           ;       FlagUltrasoon = 0;
 0730 62D000            mov REG[0xd0],>_FlagUltrasoon
 0733 550000            mov [_FlagUltrasoon],0
 0736                   .dbline 276
 0736           ; 
 0736           ;       // Start timers and enable interrupt
 0736           ;       Timer1_Start();
 0736 10                push X
 0737 7C0000            xcall _Timer1_Start
 073A                   .dbline 277
 073A           ;       Timer1_EnableInt();
 073A 7C0000            xcall _Timer1_EnableInt
 073D                   .dbline 279
 073D           ; 
 073D           ;       Timer2_Start();// new for motorcontroll2
 073D 7C0000            xcall _Timer2_Start
 0740                   .dbline 280
 0740           ;       Timer2_EnableInt();// new for motorcontroll2
 0740 7C0000            xcall _Timer2_EnableInt
 0743                   .dbline 282
 0743           ; 
 0743           ;       Timer3_Start();
 0743 7C0000            xcall _Timer3_Start
 0746                   .dbline 283
 0746           ;       Timer3_EnableInt();
 0746 7C0000            xcall _Timer3_EnableInt
 0749 20                pop X
 074A                   .dbline 285
 074A           ;    
 074A           ;       TriggerUltrasoon();     
 074A 9E92              xcall _TriggerUltrasoon
 074C                   .dbline 288
 074C           ; 
 074C           ;       // Init motors
 074C           ;       PWM1_Start();
 074C 10                push X
 074D 7C0000            xcall _PWM1_Start
 0750                   .dbline 289
 0750           ;       PWM2_Start();
 0750 7C0000            xcall _PWM2_Start
 0753                   .dbline 292
 0753           ; 
 0753           ; #if (DEBUG_LCD)
 0753           ;       LCD_Start();
 0753 7C0000            xcall _LCD_Start
 0756 20                pop X
 0757 8495              xjmp L33
 0759           L32:
 0759                   .dbline 296
 0759           ; #endif  
 0759           ;       
 0759           ;       while (TRUE)
 0759           ;       {
 0759                   .dbline 304
 0759           ;               float aileronNormalized,
 0759           ;                         elevatorNormalized;
 0759           ;               float distance;
 0759           ;               float speed, direction;
 0759           ;               float motorLeft, motorRight;
 0759           ;               BOOL forward;
 0759           ;               
 0759           ;               aileronNormalized = EvaluateAileron(PulseWidthAileron);
 0759 62D000            mov REG[0xd0],>_PulseWidthAileron
 075C 5101              mov A,[_PulseWidthAileron+1]
 075E 62D000            mov REG[0xd0],>__r0
 0761 5300              mov [__r3],A
 0763 62D000            mov REG[0xd0],>_PulseWidthAileron
 0766 5100              mov A,[_PulseWidthAileron]
 0768 62D000            mov REG[0xd0],>__r0
 076B 5300              mov [__r2],A
 076D 5000              mov A,0
 076F 08                push A
 0770 08                push A
 0771 5100              mov A,[__r2]
 0773 08                push A
 0774 5100              mov A,[__r3]
 0776 08                push A
 0777 98C7              xcall _EvaluateAileron
 0779 62D000            mov REG[0xd0],>__r0
 077C 5100              mov A,[__r0]
 077E 540C              mov [X+12],A
 0780 5100              mov A,[__r1]
 0782 540D              mov [X+13],A
 0784 5100              mov A,[__r2]
 0786 540E              mov [X+14],A
 0788 5100              mov A,[__r3]
 078A 540F              mov [X+15],A
 078C                   .dbline 305
 078C           ;               direction  = fabs(aileronNormalized);
 078C 520C              mov A,[X+12]
 078E 08                push A
 078F 520D              mov A,[X+13]
 0791 08                push A
 0792 520E              mov A,[X+14]
 0794 08                push A
 0795 520F              mov A,[X+15]
 0797 08                push A
 0798 7C0000            xcall _fabsfLMM
 079B 38F8              add SP,-8
 079D 62D000            mov REG[0xd0],>__r0
 07A0 5100              mov A,[__r0]
 07A2 5419              mov [X+25],A
 07A4 5100              mov A,[__r1]
 07A6 541A              mov [X+26],A
 07A8 5100              mov A,[__r2]
 07AA 541B              mov [X+27],A
 07AC 5100              mov A,[__r3]
 07AE 541C              mov [X+28],A
 07B0                   .dbline 307
 07B0           ; 
 07B0           ;               elevatorNormalized = EvaluateElevator(PulseWidthElevator);
 07B0 62D000            mov REG[0xd0],>_PulseWidthElevator
 07B3 5101              mov A,[_PulseWidthElevator+1]
 07B5 62D000            mov REG[0xd0],>__r0
 07B8 5300              mov [__r3],A
 07BA 62D000            mov REG[0xd0],>_PulseWidthElevator
 07BD 5100              mov A,[_PulseWidthElevator]
 07BF 62D000            mov REG[0xd0],>__r0
 07C2 5300              mov [__r2],A
 07C4 5000              mov A,0
 07C6 08                push A
 07C7 08                push A
 07C8 5100              mov A,[__r2]
 07CA 08                push A
 07CB 5100              mov A,[__r3]
 07CD 08                push A
 07CE 9B3F              xcall _EvaluateElevator
 07D0 62D000            mov REG[0xd0],>__r0
 07D3 5100              mov A,[__r0]
 07D5 5411              mov [X+17],A
 07D7 5100              mov A,[__r1]
 07D9 5412              mov [X+18],A
 07DB 5100              mov A,[__r2]
 07DD 5413              mov [X+19],A
 07DF 5100              mov A,[__r3]
 07E1 5414              mov [X+20],A
 07E3                   .dbline 308
 07E3           ;               speed  = fabs(elevatorNormalized);
 07E3 5211              mov A,[X+17]
 07E5 08                push A
 07E6 5212              mov A,[X+18]
 07E8 08                push A
 07E9 5213              mov A,[X+19]
 07EB 08                push A
 07EC 5214              mov A,[X+20]
 07EE 08                push A
 07EF 7C0000            xcall _fabsfLMM
 07F2 38F8              add SP,-8
 07F4 62D000            mov REG[0xd0],>__r0
 07F7 5100              mov A,[__r0]
 07F9 5408              mov [X+8],A
 07FB 5100              mov A,[__r1]
 07FD 5409              mov [X+9],A
 07FF 5100              mov A,[__r2]
 0801 540A              mov [X+10],A
 0803 5100              mov A,[__r3]
 0805 540B              mov [X+11],A
 0807                   .dbline 309
 0807           ;               forward = (elevatorNormalized >= 0);
 0807 5000              mov A,0
 0809 08                push A
 080A 08                push A
 080B 08                push A
 080C 08                push A
 080D 5211              mov A,[X+17]
 080F 08                push A
 0810 5212              mov A,[X+18]
 0812 08                push A
 0813 5213              mov A,[X+19]
 0815 08                push A
 0816 5214              mov A,[X+20]
 0818 08                push A
 0819 7C0000            xcall __fpcmp
 081C 38F8              add SP,-8
 081E 39FF              cmp A,-1
 0820 A009              jz L36
 0822 561E01            mov [X+30],1
 0825 561D00            mov [X+29],0
 0828 8007              xjmp L37
 082A           L36:
 082A 561E00            mov [X+30],0
 082D 561D00            mov [X+29],0
 0830           L37:
 0830 62D000            mov REG[0xd0],>__r0
 0833 521E              mov A,[X+30]
 0835 5410              mov [X+16],A
 0837                   .dbline 311
 0837           ;               
 0837           ;               distance = EvaluateUltrasoonSensor();
 0837 9DBE              xcall _EvaluateUltrasoonSensor
 0839 62D000            mov REG[0xd0],>__r0
 083C 5100              mov A,[__r0]
 083E 5415              mov [X+21],A
 0840 5100              mov A,[__r1]
 0842 5416              mov [X+22],A
 0844 5100              mov A,[__r2]
 0846 5417              mov [X+23],A
 0848 5100              mov A,[__r3]
 084A 5418              mov [X+24],A
 084C                   .dbline 312
 084C           ;               if (distance < MIN_SAFE_DISTANCE)
 084C 5042              mov A,66
 084E 08                push A
 084F 50A0              mov A,-96
 0851 08                push A
 0852 5000              mov A,0
 0854 08                push A
 0855 08                push A
 0856 5215              mov A,[X+21]
 0858 08                push A
 0859 5216              mov A,[X+22]
 085B 08                push A
 085C 5217              mov A,[X+23]
 085E 08                push A
 085F 5218              mov A,[X+24]
 0861 08                push A
 0862 7C0000            xcall __fpcmp
 0865 38F8              add SP,-8
 0867 3900              cmp A,0
 0869 A016              jz L38
 086B 3901              cmp A,1
 086D A012              jz L38
 086F                   .dbline 314
 086F           ;               {
 086F           ;                       if (forward)
 086F                   .dbline 314
 086F 3D1000            cmp [X+16],0
 0872 A00D              jz L40
 0874                   .dbline 315
 0874           ;                               speed = 0;
 0874 560800            mov [X+8],0
 0877 560900            mov [X+9],0
 087A 560A00            mov [X+10],0
 087D 560B00            mov [X+11],0
 0880           L40:
 0880                   .dbline 316
 0880           ;               }
 0880           L38:
 0880                   .dbline 318
 0880           ;               
 0880           ;               motorLeft  = speed; // default is straight forward
 0880 5208              mov A,[X+8]
 0882 5400              mov [X+0],A
 0884 5209              mov A,[X+9]
 0886 5401              mov [X+1],A
 0888 520A              mov A,[X+10]
 088A 5402              mov [X+2],A
 088C 520B              mov A,[X+11]
 088E 5403              mov [X+3],A
 0890                   .dbline 319
 0890           ;               motorRight = speed;
 0890 5208              mov A,[X+8]
 0892 5404              mov [X+4],A
 0894 5209              mov A,[X+9]
 0896 5405              mov [X+5],A
 0898 520A              mov A,[X+10]
 089A 5406              mov [X+6],A
 089C 520B              mov A,[X+11]
 089E 5407              mov [X+7],A
 08A0                   .dbline 321
 08A0           ;               
 08A0           ;               if (aileronNormalized < 0) // turning left
 08A0 5000              mov A,0
 08A2 08                push A
 08A3 08                push A
 08A4 08                push A
 08A5 08                push A
 08A6 520C              mov A,[X+12]
 08A8 08                push A
 08A9 520D              mov A,[X+13]
 08AB 08                push A
 08AC 520E              mov A,[X+14]
 08AE 08                push A
 08AF 520F              mov A,[X+15]
 08B1 08                push A
 08B2 62D000            mov REG[0xd0],>__r0
 08B5 7C0000            xcall __fpcmp
 08B8 38F8              add SP,-8
 08BA 3900              cmp A,0
 08BC A063              jz L42
 08BE 3901              cmp A,1
 08C0 A05F              jz L42
 08C2                   .dbline 323
 08C2           ;               {
 08C2           ;                       motorRight = speed;
 08C2                   .dbline 323
 08C2 5208              mov A,[X+8]
 08C4 5404              mov [X+4],A
 08C6 5209              mov A,[X+9]
 08C8 5405              mov [X+5],A
 08CA 520A              mov A,[X+10]
 08CC 5406              mov [X+6],A
 08CE 520B              mov A,[X+11]
 08D0 5407              mov [X+7],A
 08D2                   .dbline 324
 08D2           ;                       motorLeft  = speed * (1 - direction);
 08D2 5219              mov A,[X+25]
 08D4 08                push A
 08D5 521A              mov A,[X+26]
 08D7 08                push A
 08D8 521B              mov A,[X+27]
 08DA 08                push A
 08DB 521C              mov A,[X+28]
 08DD 08                push A
 08DE 503F              mov A,63
 08E0 08                push A
 08E1 5080              mov A,-128
 08E3 08                push A
 08E4 5000              mov A,0
 08E6 08                push A
 08E7 08                push A
 08E8 7C0000            xcall __fpsub
 08EB 18                pop A
 08EC 5300              mov [__r3],A
 08EE 18                pop A
 08EF 5300              mov [__r2],A
 08F1 18                pop A
 08F2 5300              mov [__r1],A
 08F4 18                pop A
 08F5 38FC              add SP,-4
 08F7 08                push A
 08F8 5100              mov A,[__r1]
 08FA 08                push A
 08FB 5100              mov A,[__r2]
 08FD 08                push A
 08FE 5100              mov A,[__r3]
 0900 08                push A
 0901 5208              mov A,[X+8]
 0903 08                push A
 0904 5209              mov A,[X+9]
 0906 08                push A
 0907 520A              mov A,[X+10]
 0909 08                push A
 090A 520B              mov A,[X+11]
 090C 08                push A
 090D 7C0000            xcall __fpmul
 0910 18                pop A
 0911 5403              mov [X+3],A
 0913 18                pop A
 0914 5402              mov [X+2],A
 0916 18                pop A
 0917 5401              mov [X+1],A
 0919 18                pop A
 091A 5400              mov [X+0],A
 091C 38FC              add SP,-4
 091E                   .dbline 325
 091E           ;               }
 091E 807F              xjmp L43
 0920           L42:
 0920                   .dbline 326
 0920           ;               else if (aileronNormalized > 0) // turning right
 0920 5000              mov A,0
 0922 08                push A
 0923 08                push A
 0924 08                push A
 0925 08                push A
 0926 520C              mov A,[X+12]
 0928 08                push A
 0929 520D              mov A,[X+13]
 092B 08                push A
 092C 520E              mov A,[X+14]
 092E 08                push A
 092F 520F              mov A,[X+15]
 0931 08                push A
 0932 62D000            mov REG[0xd0],>__r0
 0935 7C0000            xcall __fpcmp
 0938 38F8              add SP,-8
 093A 3900              cmp A,0
 093C A061              jz L44
 093E 3901              cmp A,1
 0940 B05D              jnz L44
 0942                   .dbline 328
 0942           ;               {
 0942           ;                       motorLeft  = speed;
 0942                   .dbline 328
 0942 5208              mov A,[X+8]
 0944 5400              mov [X+0],A
 0946 5209              mov A,[X+9]
 0948 5401              mov [X+1],A
 094A 520A              mov A,[X+10]
 094C 5402              mov [X+2],A
 094E 520B              mov A,[X+11]
 0950 5403              mov [X+3],A
 0952                   .dbline 329
 0952           ;                       motorRight = speed * (1 - direction);
 0952 5219              mov A,[X+25]
 0954 08                push A
 0955 521A              mov A,[X+26]
 0957 08                push A
 0958 521B              mov A,[X+27]
 095A 08                push A
 095B 521C              mov A,[X+28]
 095D 08                push A
 095E 503F              mov A,63
 0960 08                push A
 0961 5080              mov A,-128
 0963 08                push A
 0964 5000              mov A,0
 0966 08                push A
 0967 08                push A
 0968 7C0000            xcall __fpsub
 096B 18                pop A
 096C 5300              mov [__r3],A
 096E 18                pop A
 096F 5300              mov [__r2],A
 0971 18                pop A
 0972 5300              mov [__r1],A
 0974 18                pop A
 0975 38FC              add SP,-4
 0977 08                push A
 0978 5100              mov A,[__r1]
 097A 08                push A
 097B 5100              mov A,[__r2]
 097D 08                push A
 097E 5100              mov A,[__r3]
 0980 08                push A
 0981 5208              mov A,[X+8]
 0983 08                push A
 0984 5209              mov A,[X+9]
 0986 08                push A
 0987 520A              mov A,[X+10]
 0989 08                push A
 098A 520B              mov A,[X+11]
 098C 08                push A
 098D 7C0000            xcall __fpmul
 0990 18                pop A
 0991 5407              mov [X+7],A
 0993 18                pop A
 0994 5406              mov [X+6],A
 0996 18                pop A
 0997 5405              mov [X+5],A
 0999 18                pop A
 099A 5404              mov [X+4],A
 099C 38FC              add SP,-4
 099E                   .dbline 330
 099E           ;               }
 099E           L44:
 099E           L43:
 099E                   .dbline 332
 099E           ;                               
 099E           ;               if (forward)
 099E 3D1000            cmp [X+16],0
 09A1 A00F              jz L46
 09A3                   .dbline 335
 09A3           ;               {
 09A3           ;                       // ccw
 09A3           ;                       PRT1DR |=  0x08; // AIN1
 09A3                   .dbline 335
 09A3 430408            or REG[0x4],8
 09A6                   .dbline 336
 09A6           ;                       PRT1DR &= ~0x02; // AIN2
 09A6 4104FD            and REG[0x4],-3
 09A9                   .dbline 338
 09A9           ;                       
 09A9           ;                       PRT1DR |=  0x20; // BIN1
 09A9 430420            or REG[0x4],32
 09AC                   .dbline 339
 09AC           ;                       PRT1DR &= ~0x80; // BIN2
 09AC 41047F            and REG[0x4],127
 09AF                   .dbline 340
 09AF           ;               }
 09AF 800D              xjmp L47
 09B1           L46:
 09B1                   .dbline 342
 09B1           ;               else 
 09B1           ;               {
 09B1                   .dbline 344
 09B1           ;                       //cw
 09B1           ;                       PRT1DR &= ~0x08; // AIN1
 09B1 4104F7            and REG[0x4],-9
 09B4                   .dbline 345
 09B4           ;                       PRT1DR |=  0x02; // AIN2
 09B4 430402            or REG[0x4],2
 09B7                   .dbline 347
 09B7           ;                       
 09B7           ;                       PRT1DR &= ~0x20; // BIN1
 09B7 4104DF            and REG[0x4],-33
 09BA                   .dbline 348
 09BA           ;                       PRT1DR |=  0x80; // BIN2
 09BA 430480            or REG[0x4],-128
 09BD                   .dbline 349
 09BD           ;               }
 09BD           L47:
 09BD                   .dbline 352
 09BD           ;       
 09BD           ;               // Denormalize to Engine
 09BD           ;               motorLeft *= (MAX_POWER - MIN_POWER);
 09BD 5200              mov A,[X+0]
 09BF 08                push A
 09C0 5201              mov A,[X+1]
 09C2 08                push A
 09C3 5202              mov A,[X+2]
 09C5 08                push A
 09C6 5203              mov A,[X+3]
 09C8 08                push A
 09C9 5044              mov A,68
 09CB 08                push A
 09CC 507A              mov A,122
 09CE 08                push A
 09CF 5000              mov A,0
 09D1 08                push A
 09D2 08                push A
 09D3 62D000            mov REG[0xd0],>__r0
 09D6 7C0000            xcall __fpmul
 09D9 18                pop A
 09DA 5403              mov [X+3],A
 09DC 18                pop A
 09DD 5402              mov [X+2],A
 09DF 18                pop A
 09E0 5401              mov [X+1],A
 09E2 18                pop A
 09E3 5400              mov [X+0],A
 09E5 38FC              add SP,-4
 09E7                   .dbline 353
 09E7           ;               motorLeft += MIN_POWER;
 09E7 5000              mov A,0
 09E9 08                push A
 09EA 08                push A
 09EB 08                push A
 09EC 08                push A
 09ED 5200              mov A,[X+0]
 09EF 08                push A
 09F0 5201              mov A,[X+1]
 09F2 08                push A
 09F3 5202              mov A,[X+2]
 09F5 08                push A
 09F6 5203              mov A,[X+3]
 09F8 08                push A
 09F9 7C0000            xcall __fpadd
 09FC 18                pop A
 09FD 5403              mov [X+3],A
 09FF 18                pop A
 0A00 5402              mov [X+2],A
 0A02 18                pop A
 0A03 5401              mov [X+1],A
 0A05 18                pop A
 0A06 5400              mov [X+0],A
 0A08 38FC              add SP,-4
 0A0A                   .dbline 354
 0A0A           ;               motorRight *= (MAX_POWER - MIN_POWER);
 0A0A 5204              mov A,[X+4]
 0A0C 08                push A
 0A0D 5205              mov A,[X+5]
 0A0F 08                push A
 0A10 5206              mov A,[X+6]
 0A12 08                push A
 0A13 5207              mov A,[X+7]
 0A15 08                push A
 0A16 5044              mov A,68
 0A18 08                push A
 0A19 507A              mov A,122
 0A1B 08                push A
 0A1C 5000              mov A,0
 0A1E 08                push A
 0A1F 08                push A
 0A20 7C0000            xcall __fpmul
 0A23 18                pop A
 0A24 5407              mov [X+7],A
 0A26 18                pop A
 0A27 5406              mov [X+6],A
 0A29 18                pop A
 0A2A 5405              mov [X+5],A
 0A2C 18                pop A
 0A2D 5404              mov [X+4],A
 0A2F 38FC              add SP,-4
 0A31                   .dbline 355
 0A31           ;               motorRight += MIN_POWER;
 0A31 5000              mov A,0
 0A33 08                push A
 0A34 08                push A
 0A35 08                push A
 0A36 08                push A
 0A37 5204              mov A,[X+4]
 0A39 08                push A
 0A3A 5205              mov A,[X+5]
 0A3C 08                push A
 0A3D 5206              mov A,[X+6]
 0A3F 08                push A
 0A40 5207              mov A,[X+7]
 0A42 08                push A
 0A43 7C0000            xcall __fpadd
 0A46 18                pop A
 0A47 5407              mov [X+7],A
 0A49 18                pop A
 0A4A 5406              mov [X+6],A
 0A4C 18                pop A
 0A4D 5405              mov [X+5],A
 0A4F 18                pop A
 0A50 5404              mov [X+4],A
 0A52 38FC              add SP,-4
 0A54                   .dbline 357
 0A54           ; 
 0A54           ;               PWM1_WritePulseWidth(motorLeft);
 0A54 5047              mov A,71
 0A56 08                push A
 0A57 5000              mov A,0
 0A59 08                push A
 0A5A 08                push A
 0A5B 08                push A
 0A5C 5200              mov A,[X+0]
 0A5E 08                push A
 0A5F 5201              mov A,[X+1]
 0A61 08                push A
 0A62 5202              mov A,[X+2]
 0A64 08                push A
 0A65 5203              mov A,[X+3]
 0A67 08                push A
 0A68 7C0000            xcall __fpcmp
 0A6B 38F8              add SP,-8
 0A6D 39FF              cmp A,-1
 0A6F A047              jz L49
 0A71 5047              mov A,71
 0A73 08                push A
 0A74 5000              mov A,0
 0A76 08                push A
 0A77 08                push A
 0A78 08                push A
 0A79 5200              mov A,[X+0]
 0A7B 08                push A
 0A7C 5201              mov A,[X+1]
 0A7E 08                push A
 0A7F 5202              mov A,[X+2]
 0A81 08                push A
 0A82 5203              mov A,[X+3]
 0A84 08                push A
 0A85 7C0000            xcall __fpsub
 0A88 18                pop A
 0A89 5300              mov [__r3],A
 0A8B 18                pop A
 0A8C 5300              mov [__r2],A
 0A8E 18                pop A
 0A8F 5300              mov [__r1],A
 0A91 18                pop A
 0A92 38FC              add SP,-4
 0A94 08                push A
 0A95 5100              mov A,[__r1]
 0A97 08                push A
 0A98 5100              mov A,[__r2]
 0A9A 08                push A
 0A9B 5100              mov A,[__r3]
 0A9D 08                push A
 0A9E 7C0000            xcall __fp2long
 0AA1 18                pop A
 0AA2 5300              mov [__r1],A
 0AA4 18                pop A
 0AA5 5300              mov [__r0],A
 0AA7 38FE              add SP,-2
 0AA9 5100              mov A,[__r1]
 0AAB 0100              add A,0
 0AAD 5420              mov [X+32],A
 0AAF 5100              mov A,[__r0]
 0AB1 0980              adc A,-128
 0AB3 541F              mov [X+31],A
 0AB5 8023              xjmp L50
 0AB7           L49:
 0AB7 62D000            mov REG[0xd0],>__r0
 0ABA 5200              mov A,[X+0]
 0ABC 08                push A
 0ABD 5201              mov A,[X+1]
 0ABF 08                push A
 0AC0 5202              mov A,[X+2]
 0AC2 08                push A
 0AC3 5203              mov A,[X+3]
 0AC5 08                push A
 0AC6 7C0000            xcall __fp2long
 0AC9 18                pop A
 0ACA 5300              mov [__r1],A
 0ACC 18                pop A
 0ACD 5300              mov [__r0],A
 0ACF 38FE              add SP,-2
 0AD1 5100              mov A,[__r1]
 0AD3 5420              mov [X+32],A
 0AD5 5100              mov A,[__r0]
 0AD7 541F              mov [X+31],A
 0AD9           L50:
 0AD9 10                push X
 0ADA 521F              mov A,[X+31]
 0ADC 08                push A
 0ADD 5220              mov A,[X+32]
 0ADF 20                pop X
 0AE0 7C0000            xcall _PWM1_WritePulseWidth
 0AE3 20                pop X
 0AE4                   .dbline 358
 0AE4           ;               PWM2_WritePulseWidth(motorRight);
 0AE4 5047              mov A,71
 0AE6 08                push A
 0AE7 5000              mov A,0
 0AE9 08                push A
 0AEA 08                push A
 0AEB 08                push A
 0AEC 5204              mov A,[X+4]
 0AEE 08                push A
 0AEF 5205              mov A,[X+5]
 0AF1 08                push A
 0AF2 5206              mov A,[X+6]
 0AF4 08                push A
 0AF5 5207              mov A,[X+7]
 0AF7 08                push A
 0AF8 62D000            mov REG[0xd0],>__r0
 0AFB 7C0000            xcall __fpcmp
 0AFE 38F8              add SP,-8
 0B00 39FF              cmp A,-1
 0B02 A047              jz L52
 0B04 5047              mov A,71
 0B06 08                push A
 0B07 5000              mov A,0
 0B09 08                push A
 0B0A 08                push A
 0B0B 08                push A
 0B0C 5204              mov A,[X+4]
 0B0E 08                push A
 0B0F 5205              mov A,[X+5]
 0B11 08                push A
 0B12 5206              mov A,[X+6]
 0B14 08                push A
 0B15 5207              mov A,[X+7]
 0B17 08                push A
 0B18 7C0000            xcall __fpsub
 0B1B 18                pop A
 0B1C 5300              mov [__r3],A
 0B1E 18                pop A
 0B1F 5300              mov [__r2],A
 0B21 18                pop A
 0B22 5300              mov [__r1],A
 0B24 18                pop A
 0B25 38FC              add SP,-4
 0B27 08                push A
 0B28 5100              mov A,[__r1]
 0B2A 08                push A
 0B2B 5100              mov A,[__r2]
 0B2D 08                push A
 0B2E 5100              mov A,[__r3]
 0B30 08                push A
 0B31 7C0000            xcall __fp2long
 0B34 18                pop A
 0B35 5300              mov [__r1],A
 0B37 18                pop A
 0B38 5300              mov [__r0],A
 0B3A 38FE              add SP,-2
 0B3C 5100              mov A,[__r1]
 0B3E 0100              add A,0
 0B40 5422              mov [X+34],A
 0B42 5100              mov A,[__r0]
 0B44 0980              adc A,-128
 0B46 5421              mov [X+33],A
 0B48 8023              xjmp L53
 0B4A           L52:
 0B4A 62D000            mov REG[0xd0],>__r0
 0B4D 5204              mov A,[X+4]
 0B4F 08                push A
 0B50 5205              mov A,[X+5]
 0B52 08                push A
 0B53 5206              mov A,[X+6]
 0B55 08                push A
 0B56 5207              mov A,[X+7]
 0B58 08                push A
 0B59 7C0000            xcall __fp2long
 0B5C 18                pop A
 0B5D 5300              mov [__r1],A
 0B5F 18                pop A
 0B60 5300              mov [__r0],A
 0B62 38FE              add SP,-2
 0B64 5100              mov A,[__r1]
 0B66 5422              mov [X+34],A
 0B68 5100              mov A,[__r0]
 0B6A 5421              mov [X+33],A
 0B6C           L53:
 0B6C 10                push X
 0B6D 5221              mov A,[X+33]
 0B6F 08                push A
 0B70 5222              mov A,[X+34]
 0B72 20                pop X
 0B73 7C0000            xcall _PWM2_WritePulseWidth
 0B76                   .dbline 361
 0B76           ; 
 0B76           ; #if (DEBUG_LCD)
 0B76           ;               LCD_Position(0,7);
 0B76 5707              mov X,7
 0B78 5000              mov A,0
 0B7A 7C0000            xcall _LCD_Position
 0B7D 20                pop X
 0B7E                   .dbline 362
 0B7E           ;               LCD_PrHexInt(motorLeft);
 0B7E 62D000            mov REG[0xd0],>__r0
 0B81 5200              mov A,[X+0]
 0B83 08                push A
 0B84 5201              mov A,[X+1]
 0B86 08                push A
 0B87 5202              mov A,[X+2]
 0B89 08                push A
 0B8A 5203              mov A,[X+3]
 0B8C 08                push A
 0B8D 7C0000            xcall __fp2long
 0B90 18                pop A
 0B91 5300              mov [__r1],A
 0B93 18                pop A
 0B94 38FE              add SP,-2
 0B96 10                push X
 0B97 08                push A
 0B98 5100              mov A,[__r1]
 0B9A 20                pop X
 0B9B 7C0000            xcall _LCD_PrHexInt
 0B9E                   .dbline 363
 0B9E           ;               LCD_Position(1,7);
 0B9E 5707              mov X,7
 0BA0 5001              mov A,1
 0BA2 7C0000            xcall _LCD_Position
 0BA5 20                pop X
 0BA6                   .dbline 364
 0BA6           ;               LCD_PrHexInt(motorRight);
 0BA6 62D000            mov REG[0xd0],>__r0
 0BA9 5204              mov A,[X+4]
 0BAB 08                push A
 0BAC 5205              mov A,[X+5]
 0BAE 08                push A
 0BAF 5206              mov A,[X+6]
 0BB1 08                push A
 0BB2 5207              mov A,[X+7]
 0BB4 08                push A
 0BB5 7C0000            xcall __fp2long
 0BB8 18                pop A
 0BB9 5300              mov [__r1],A
 0BBB 18                pop A
 0BBC 38FE              add SP,-2
 0BBE 10                push X
 0BBF 08                push A
 0BC0 5100              mov A,[__r1]
 0BC2 20                pop X
 0BC3 7C0000            xcall _LCD_PrHexInt
 0BC6                   .dbline 366
 0BC6           ;               
 0BC6           ;               LCD_Position(0,12);
 0BC6 570C              mov X,12
 0BC8 5000              mov A,0
 0BCA 7C0000            xcall _LCD_Position
 0BCD 20                pop X
 0BCE                   .dbline 367
 0BCE           ;               LCD_PrCString(forward ? "F" : "B");
 0BCE 3D1000            cmp [X+16],0
 0BD1 A009              jz L57
 0BD3 562402            mov [X+36],<L54
 0BD6 562302            mov [X+35],>L54
 0BD9 8007              xjmp L58
 0BDB           L57:
 0BDB 562400            mov [X+36],<L55
 0BDE 562300            mov [X+35],>L55
 0BE1           L58:
 0BE1 10                push X
 0BE2 5223              mov A,[X+35]
 0BE4 08                push A
 0BE5 5224              mov A,[X+36]
 0BE7 5C                mov X,A
 0BE8 18                pop A
 0BE9 7C0000            xcall _LCD_PrCString
 0BEC 20                pop X
 0BED                   .dbline 370
 0BED           ; #endif        
 0BED           ; 
 0BED           ;    }
 0BED           L33:
 0BED                   .dbline 295
 0BED 8B6B              xjmp L32
 0BEF           X10:
 0BEF                   .dbline -2
 0BEF           L31:
 0BEF 38DB              add SP,-37
 0BF1 20                pop X
 0BF2                   .dbline 0 ; func end
 0BF2 8FFF              jmp .
 0BF4                   .dbsym l direction 25 D
 0BF4                   .dbsym l distance 21 D
 0BF4                   .dbsym l elevatorNormalized 17 D
 0BF4                   .dbsym l forward 16 c
 0BF4                   .dbsym l aileronNormalized 12 D
 0BF4                   .dbsym l speed 8 D
 0BF4                   .dbsym l motorRight 4 D
 0BF4                   .dbsym l motorLeft 0 D
 0BF4                   .dbend
 0BF4                   .dbfunc e Timer1CaptureISR _Timer1CaptureISR fV
 0BF4           _Timer1CaptureISR::
 0BF4                   .dbline -1
 0BF4 71C0              or F,-64
 0BF6 08                push A
 0BF7 5DD0              mov A,REG[0xd0]
 0BF9 08                push A
 0BFA 5DD3              mov A,REG[0xd3]
 0BFC 08                push A
 0BFD 5DD4              mov A,REG[0xd4]
 0BFF 08                push A
 0C00 5DD5              mov A,REG[0xd5]
 0C02 08                push A
 0C03 62D000            mov REG[0xd0],>__r0
 0C06 5100              mov A,[__r0]
 0C08 08                push A
 0C09 5100              mov A,[__r1]
 0C0B 08                push A
 0C0C 5100              mov A,[__r2]
 0C0E 08                push A
 0C0F 5100              mov A,[__r3]
 0C11 08                push A
 0C12 5100              mov A,[__r4]
 0C14 08                push A
 0C15 5100              mov A,[__r5]
 0C17 08                push A
 0C18 5100              mov A,[__r6]
 0C1A 08                push A
 0C1B 5100              mov A,[__r7]
 0C1D 08                push A
 0C1E 5100              mov A,[__r8]
 0C20 08                push A
 0C21 5100              mov A,[__r9]
 0C23 08                push A
 0C24 5100              mov A,[__r10]
 0C26 08                push A
 0C27 5100              mov A,[__r11]
 0C29 08                push A
 0C2A 5100              mov A,[__rX]
 0C2C 08                push A
 0C2D 5100              mov A,[__rY]
 0C2F 08                push A
 0C30 5100              mov A,[__rZ]
 0C32 08                push A
 0C33                   .dbline 374
 0C33           ; }
 0C33           ; 
 0C33           ; void Timer1CaptureISR(void)
 0C33           ; {
 0C33                   .dbline 375
 0C33           ;    if (FlagsAileron & FALLING_EDGE_AILERON)
 0C33 62D000            mov REG[0xd0],>_FlagsAileron
 0C36 470002            tst [_FlagsAileron],2
 0C39 A049              jz L60
 0C3B                   .dbline 378
 0C3B           ;    {
 0C3B           ;       // Read the count on negative edge
 0C3B           ;       CaptureNegEdgeAileron = Timer1_wReadCompareValue();
 0C3B                   .dbline 378
 0C3B 10                push X
 0C3C 7C0000            xcall _Timer1_wReadCompareValue
 0C3F 62D000            mov REG[0xd0],>__r0
 0C42 5A00              mov [__r0],X
 0C44 20                pop X
 0C45 08                push A
 0C46 5100              mov A,[__r0]
 0C48 62D000            mov REG[0xd0],>_CaptureNegEdgeAileron
 0C4B 5300              mov [_CaptureNegEdgeAileron],A
 0C4D 18                pop A
 0C4E 5301              mov [_CaptureNegEdgeAileron+1],A
 0C50                   .dbline 381
 0C50           ; 
 0C50           ;       // Change the capture to positive edge and clear the FALLING_EDGE flag
 0C50           ;       Timer1_FUNC_LSB_REG &= ~0x80;
 0C50 7110              or F,0x10  ; iopage = 1
 0C52 41207F            and REG[0x20],127
 0C55                   .dbline 382
 0C55           ;       FlagsAileron &= ~FALLING_EDGE_AILERON;
 0C55 70CF              and F,0xCF      ; iopage = 0
 0C57 62D000            mov REG[0xd0],>_FlagsAileron
 0C5A 2600FD            and [_FlagsAileron],-3
 0C5D                   .dbline 389
 0C5D           ; 
 0C5D           ;       // Calculate the pulswidth by finding difference between positive edge
 0C5D           ;       // and negative edge counts.  As both the numbers are unsigned numbers
 0C5D           ;       // the result will be correct even if there is an underflow in the counter
 0C5D           ;       // The result will be accurate as long as the total pulsewidth is less than
 0C5D           ;       // 65535 timer ticks.
 0C5D           ;       PulseWidthAileron = CapturePosEdgeAileron - CaptureNegEdgeAileron;
 0C5D 62D000            mov REG[0xd0],>_CapturePosEdgeAileron
 0C60 5101              mov A,[_CapturePosEdgeAileron+1]
 0C62 62D000            mov REG[0xd0],>_CaptureNegEdgeAileron
 0C65 1201              sub A,[_CaptureNegEdgeAileron+1]
 0C67 62D000            mov REG[0xd0],>_PulseWidthAileron
 0C6A 5301              mov [_PulseWidthAileron+1],A
 0C6C 62D000            mov REG[0xd0],>_CapturePosEdgeAileron
 0C6F 5100              mov A,[_CapturePosEdgeAileron]
 0C71 62D000            mov REG[0xd0],>_CaptureNegEdgeAileron
 0C74 1A00              sbb A,[_CaptureNegEdgeAileron]
 0C76 62D000            mov REG[0xd0],>_PulseWidthAileron
 0C79 5300              mov [_PulseWidthAileron],A
 0C7B                   .dbline 392
 0C7B           ;       
 0C7B           ;       // Set the Data available flag
 0C7B           ;       FlagsAileron |= DATA_AVAILABLE_AILERON;
 0C7B 62D000            mov REG[0xd0],>_FlagsAileron
 0C7E 2E0001            or [_FlagsAileron],1
 0C81                   .dbline 393
 0C81           ;    }
 0C81 8023              xjmp L61
 0C83           L60:
 0C83                   .dbline 395
 0C83           ;    else
 0C83           ;    {
 0C83                   .dbline 397
 0C83           ;       // Read the count on positive edge
 0C83           ;       CapturePosEdgeAileron = Timer1_wReadCompareValue();
 0C83 10                push X
 0C84 7C0000            xcall _Timer1_wReadCompareValue
 0C87 62D000            mov REG[0xd0],>__r0
 0C8A 5A00              mov [__r0],X
 0C8C 20                pop X
 0C8D 08                push A
 0C8E 5100              mov A,[__r0]
 0C90 62D000            mov REG[0xd0],>_CapturePosEdgeAileron
 0C93 5300              mov [_CapturePosEdgeAileron],A
 0C95 18                pop A
 0C96 5301              mov [_CapturePosEdgeAileron+1],A
 0C98                   .dbline 400
 0C98           ;       
 0C98           ;       // Change the capture to negative edge and set flag
 0C98           ;       Timer1_FUNC_LSB_REG |= 0x80;
 0C98 7110              or F,0x10  ; iopage = 1
 0C9A 432080            or REG[0x20],-128
 0C9D                   .dbline 401
 0C9D           ;       FlagsAileron |= FALLING_EDGE_AILERON;
 0C9D 70CF              and F,0xCF      ; iopage = 0
 0C9F 62D000            mov REG[0xd0],>_FlagsAileron
 0CA2 2E0002            or [_FlagsAileron],2
 0CA5                   .dbline 402
 0CA5           ;    }
 0CA5           L61:
 0CA5                   .dbline -2
 0CA5           L59:
 0CA5 62D000            mov REG[0xD0],>__r0
 0CA8 18                pop A
 0CA9 5300              mov [__rZ],A
 0CAB 18                pop A
 0CAC 5300              mov [__rY],A
 0CAE 18                pop A
 0CAF 5300              mov [__rX],A
 0CB1 18                pop A
 0CB2 5300              mov [__r11],A
 0CB4 18                pop A
 0CB5 5300              mov [__r10],A
 0CB7 18                pop A
 0CB8 5300              mov [__r9],A
 0CBA 18                pop A
 0CBB 5300              mov [__r8],A
 0CBD 18                pop A
 0CBE 5300              mov [__r7],A
 0CC0 18                pop A
 0CC1 5300              mov [__r6],A
 0CC3 18                pop A
 0CC4 5300              mov [__r5],A
 0CC6 18                pop A
 0CC7 5300              mov [__r4],A
 0CC9 18                pop A
 0CCA 5300              mov [__r3],A
 0CCC 18                pop A
 0CCD 5300              mov [__r2],A
 0CCF 18                pop A
 0CD0 5300              mov [__r1],A
 0CD2 18                pop A
 0CD3 5300              mov [__r0],A
 0CD5 18                pop A
 0CD6 60D5              mov REG[213],A
 0CD8 18                pop A
 0CD9 60D4              mov REG[212],A
 0CDB 18                pop A
 0CDC 60D3              mov REG[211],A
 0CDE 18                pop A
 0CDF 60D0              mov REG[208],A
 0CE1 18                pop A
 0CE2                   .dbline 0 ; func end
 0CE2 7E                reti
 0CE3                   .dbend
 0CE3                   .dbfunc e Timer2CaptureISR _Timer2CaptureISR fV
 0CE3           _Timer2CaptureISR::
 0CE3                   .dbline -1
 0CE3 71C0              or F,-64
 0CE5 08                push A
 0CE6 5DD0              mov A,REG[0xd0]
 0CE8 08                push A
 0CE9 5DD3              mov A,REG[0xd3]
 0CEB 08                push A
 0CEC 5DD4              mov A,REG[0xd4]
 0CEE 08                push A
 0CEF 5DD5              mov A,REG[0xd5]
 0CF1 08                push A
 0CF2 62D000            mov REG[0xd0],>__r0
 0CF5 5100              mov A,[__r0]
 0CF7 08                push A
 0CF8 5100              mov A,[__r1]
 0CFA 08                push A
 0CFB 5100              mov A,[__r2]
 0CFD 08                push A
 0CFE 5100              mov A,[__r3]
 0D00 08                push A
 0D01 5100              mov A,[__r4]
 0D03 08                push A
 0D04 5100              mov A,[__r5]
 0D06 08                push A
 0D07 5100              mov A,[__r6]
 0D09 08                push A
 0D0A 5100              mov A,[__r7]
 0D0C 08                push A
 0D0D 5100              mov A,[__r8]
 0D0F 08                push A
 0D10 5100              mov A,[__r9]
 0D12 08                push A
 0D13 5100              mov A,[__r10]
 0D15 08                push A
 0D16 5100              mov A,[__r11]
 0D18 08                push A
 0D19 5100              mov A,[__rX]
 0D1B 08                push A
 0D1C 5100              mov A,[__rY]
 0D1E 08                push A
 0D1F 5100              mov A,[__rZ]
 0D21 08                push A
 0D22                   .dbline 406
 0D22           ; }
 0D22           ; 
 0D22           ; void Timer2CaptureISR(void)// new function for motorcontroll2
 0D22           ; {
 0D22                   .dbline 407
 0D22           ;       if(FlagsElevator & FALLING_EDGE_ELEVATOR)//
 0D22 62D000            mov REG[0xd0],>_FlagsElevator
 0D25 470002            tst [_FlagsElevator],2
 0D28 A049              jz L63
 0D2A                   .dbline 410
 0D2A           ;       {
 0D2A           ;               // Read the count on negative edge
 0D2A           ;               CaptureNegEdgeElevator = Timer2_wReadCompareValue();
 0D2A                   .dbline 410
 0D2A 10                push X
 0D2B 7C0000            xcall _Timer2_wReadCompareValue
 0D2E 62D000            mov REG[0xd0],>__r0
 0D31 5A00              mov [__r0],X
 0D33 20                pop X
 0D34 08                push A
 0D35 5100              mov A,[__r0]
 0D37 62D000            mov REG[0xd0],>_CaptureNegEdgeElevator
 0D3A 5300              mov [_CaptureNegEdgeElevator],A
 0D3C 18                pop A
 0D3D 5301              mov [_CaptureNegEdgeElevator+1],A
 0D3F                   .dbline 413
 0D3F           ; 
 0D3F           ;               // Change the capture to positive edge and clear the FALLING_EDGE flag
 0D3F           ;               Timer2_FUNC_LSB_REG &= ~0x80;
 0D3F 7110              or F,0x10  ; iopage = 1
 0D41 41287F            and REG[0x28],127
 0D44                   .dbline 414
 0D44           ;               FlagsElevator &= ~FALLING_EDGE_ELEVATOR;// clearing faling edge bit in flags
 0D44 70CF              and F,0xCF      ; iopage = 0
 0D46 62D000            mov REG[0xd0],>_FlagsElevator
 0D49 2600FD            and [_FlagsElevator],-3
 0D4C                   .dbline 422
 0D4C           ;       
 0D4C           ; 
 0D4C           ;               // Calculate the pulswidth by finding difference between positive edge
 0D4C           ;               // and negative edge counts.  As both the numbers are unsigned numbers
 0D4C           ;               // the result will be correct even if there is an underflow in the counter
 0D4C           ;               // The result will be accurate as long as the total pulsewidth is less than
 0D4C           ;               // 65535 timer ticks.
 0D4C           ;               PulseWidthElevator = CapturePosEdgeElevator - CaptureNegEdgeElevator;
 0D4C 62D000            mov REG[0xd0],>_CapturePosEdgeElevator
 0D4F 5101              mov A,[_CapturePosEdgeElevator+1]
 0D51 62D000            mov REG[0xd0],>_CaptureNegEdgeElevator
 0D54 1201              sub A,[_CaptureNegEdgeElevator+1]
 0D56 62D000            mov REG[0xd0],>_PulseWidthElevator
 0D59 5301              mov [_PulseWidthElevator+1],A
 0D5B 62D000            mov REG[0xd0],>_CapturePosEdgeElevator
 0D5E 5100              mov A,[_CapturePosEdgeElevator]
 0D60 62D000            mov REG[0xd0],>_CaptureNegEdgeElevator
 0D63 1A00              sbb A,[_CaptureNegEdgeElevator]
 0D65 62D000            mov REG[0xd0],>_PulseWidthElevator
 0D68 5300              mov [_PulseWidthElevator],A
 0D6A                   .dbline 425
 0D6A           ; 
 0D6A           ;               // Set the Data available flag
 0D6A           ;               FlagsElevator |= DATA_AVAILABLE_ELEVATOR; // BEN: set the correct bit on or off
 0D6A 62D000            mov REG[0xd0],>_FlagsElevator
 0D6D 2E0001            or [_FlagsElevator],1
 0D70                   .dbline 426
 0D70           ;       }
 0D70 8023              xjmp L64
 0D72           L63:
 0D72                   .dbline 428
 0D72           ;       else
 0D72           ;       {
 0D72                   .dbline 430
 0D72           ;               // Read the count on positive edge
 0D72           ;               CapturePosEdgeElevator = Timer2_wReadCompareValue();
 0D72 10                push X
 0D73 7C0000            xcall _Timer2_wReadCompareValue
 0D76 62D000            mov REG[0xd0],>__r0
 0D79 5A00              mov [__r0],X
 0D7B 20                pop X
 0D7C 08                push A
 0D7D 5100              mov A,[__r0]
 0D7F 62D000            mov REG[0xd0],>_CapturePosEdgeElevator
 0D82 5300              mov [_CapturePosEdgeElevator],A
 0D84 18                pop A
 0D85 5301              mov [_CapturePosEdgeElevator+1],A
 0D87                   .dbline 433
 0D87           ; 
 0D87           ;               // Change the capture to negative edge and set flag
 0D87           ;               Timer2_FUNC_LSB_REG |= 0x80;
 0D87 7110              or F,0x10  ; iopage = 1
 0D89 432880            or REG[0x28],-128
 0D8C                   .dbline 434
 0D8C           ;               FlagsElevator |= FALLING_EDGE_ELEVATOR;
 0D8C 70CF              and F,0xCF      ; iopage = 0
 0D8E 62D000            mov REG[0xd0],>_FlagsElevator
 0D91 2E0002            or [_FlagsElevator],2
 0D94                   .dbline 435
 0D94           ;       }
 0D94           L64:
 0D94                   .dbline -2
 0D94           L62:
 0D94 62D000            mov REG[0xD0],>__r0
 0D97 18                pop A
 0D98 5300              mov [__rZ],A
 0D9A 18                pop A
 0D9B 5300              mov [__rY],A
 0D9D 18                pop A
 0D9E 5300              mov [__rX],A
 0DA0 18                pop A
 0DA1 5300              mov [__r11],A
 0DA3 18                pop A
 0DA4 5300              mov [__r10],A
 0DA6 18                pop A
 0DA7 5300              mov [__r9],A
 0DA9 18                pop A
 0DAA 5300              mov [__r8],A
 0DAC 18                pop A
 0DAD 5300              mov [__r7],A
 0DAF 18                pop A
 0DB0 5300              mov [__r6],A
 0DB2 18                pop A
 0DB3 5300              mov [__r5],A
 0DB5 18                pop A
 0DB6 5300              mov [__r4],A
 0DB8 18                pop A
 0DB9 5300              mov [__r3],A
 0DBB 18                pop A
 0DBC 5300              mov [__r2],A
 0DBE 18                pop A
 0DBF 5300              mov [__r1],A
 0DC1 18                pop A
 0DC2 5300              mov [__r0],A
 0DC4 18                pop A
 0DC5 60D5              mov REG[213],A
 0DC7 18                pop A
 0DC8 60D4              mov REG[212],A
 0DCA 18                pop A
 0DCB 60D3              mov REG[211],A
 0DCD 18                pop A
 0DCE 60D0              mov REG[208],A
 0DD0 18                pop A
 0DD1                   .dbline 0 ; func end
 0DD1 7E                reti
 0DD2                   .dbend
 0DD2                   .dbfunc e Timer3CaptureISR _Timer3CaptureISR fV
 0DD2           _Timer3CaptureISR::
 0DD2                   .dbline -1
 0DD2 71C0              or F,-64
 0DD4 08                push A
 0DD5 5DD0              mov A,REG[0xd0]
 0DD7 08                push A
 0DD8 5DD3              mov A,REG[0xd3]
 0DDA 08                push A
 0DDB 5DD4              mov A,REG[0xd4]
 0DDD 08                push A
 0DDE 5DD5              mov A,REG[0xd5]
 0DE0 08                push A
 0DE1 62D000            mov REG[0xd0],>__r0
 0DE4 5100              mov A,[__r0]
 0DE6 08                push A
 0DE7 5100              mov A,[__r1]
 0DE9 08                push A
 0DEA 5100              mov A,[__r2]
 0DEC 08                push A
 0DED 5100              mov A,[__r3]
 0DEF 08                push A
 0DF0 5100              mov A,[__r4]
 0DF2 08                push A
 0DF3 5100              mov A,[__r5]
 0DF5 08                push A
 0DF6 5100              mov A,[__r6]
 0DF8 08                push A
 0DF9 5100              mov A,[__r7]
 0DFB 08                push A
 0DFC 5100              mov A,[__r8]
 0DFE 08                push A
 0DFF 5100              mov A,[__r9]
 0E01 08                push A
 0E02 5100              mov A,[__r10]
 0E04 08                push A
 0E05 5100              mov A,[__r11]
 0E07 08                push A
 0E08 5100              mov A,[__rX]
 0E0A 08                push A
 0E0B 5100              mov A,[__rY]
 0E0D 08                push A
 0E0E 5100              mov A,[__rZ]
 0E10 08                push A
 0E11                   .dbline 439
 0E11           ; }
 0E11           ; 
 0E11           ; void Timer3CaptureISR(void)
 0E11           ; {     
 0E11                   .dbline 440
 0E11           ;    if(FlagUltrasoon & FALLING_EDGE_ULTRASOON)
 0E11 62D000            mov REG[0xd0],>_FlagUltrasoon
 0E14 470002            tst [_FlagUltrasoon],2
 0E17 A049              jz L66
 0E19                   .dbline 443
 0E19           ;    {
 0E19           ;       // Read the count on negative edge
 0E19           ;       CaptureNegEdgeUltrasoon = Timer3_wReadCompareValue();
 0E19                   .dbline 443
 0E19 10                push X
 0E1A 7C0000            xcall _Timer3_wReadCompareValue
 0E1D 62D000            mov REG[0xd0],>__r0
 0E20 5A00              mov [__r0],X
 0E22 20                pop X
 0E23 08                push A
 0E24 5100              mov A,[__r0]
 0E26 62D000            mov REG[0xd0],>_CaptureNegEdgeUltrasoon
 0E29 5300              mov [_CaptureNegEdgeUltrasoon],A
 0E2B 18                pop A
 0E2C 5301              mov [_CaptureNegEdgeUltrasoon+1],A
 0E2E                   .dbline 446
 0E2E           ; 
 0E2E           ;       // Change the capture to positive edge and clear the FALLING_EDGE flag
 0E2E           ;       Timer3_FUNC_LSB_REG &= ~0x80;
 0E2E 7110              or F,0x10  ; iopage = 1
 0E30 41307F            and REG[0x30],127
 0E33                   .dbline 447
 0E33           ;       FlagUltrasoon &= ~FALLING_EDGE_ULTRASOON;
 0E33 70CF              and F,0xCF      ; iopage = 0
 0E35 62D000            mov REG[0xd0],>_FlagUltrasoon
 0E38 2600FD            and [_FlagUltrasoon],-3
 0E3B                   .dbline 454
 0E3B           ; 
 0E3B           ;       // Calculate the pulswidth by finding difference between positive edge
 0E3B           ;       // and negative edge counts.  As both the numbers are unsigned numbers
 0E3B           ;       // the result will be correct even if there is an underflow in the counter
 0E3B           ;       // The result will be accurate as long as the total pulsewidth is less than
 0E3B           ;       // 65535 timer ticks.
 0E3B           ;       PulseWidthUltrasoon = CapturePosEdgeUltrasoon - CaptureNegEdgeUltrasoon;
 0E3B 62D000            mov REG[0xd0],>_CapturePosEdgeUltrasoon
 0E3E 5101              mov A,[_CapturePosEdgeUltrasoon+1]
 0E40 62D000            mov REG[0xd0],>_CaptureNegEdgeUltrasoon
 0E43 1201              sub A,[_CaptureNegEdgeUltrasoon+1]
 0E45 62D000            mov REG[0xd0],>_PulseWidthUltrasoon
 0E48 5301              mov [_PulseWidthUltrasoon+1],A
 0E4A 62D000            mov REG[0xd0],>_CapturePosEdgeUltrasoon
 0E4D 5100              mov A,[_CapturePosEdgeUltrasoon]
 0E4F 62D000            mov REG[0xd0],>_CaptureNegEdgeUltrasoon
 0E52 1A00              sbb A,[_CaptureNegEdgeUltrasoon]
 0E54 62D000            mov REG[0xd0],>_PulseWidthUltrasoon
 0E57 5300              mov [_PulseWidthUltrasoon],A
 0E59                   .dbline 457
 0E59           ; 
 0E59           ;       // Set the Data available flag
 0E59           ;       FlagUltrasoon |= DATA_AVAILABLE_ULTRASOON;
 0E59 62D000            mov REG[0xd0],>_FlagUltrasoon
 0E5C 2E0001            or [_FlagUltrasoon],1
 0E5F                   .dbline 458
 0E5F           ;    }
 0E5F 8023              xjmp L67
 0E61           L66:
 0E61                   .dbline 460
 0E61           ;    else
 0E61           ;    {
 0E61                   .dbline 462
 0E61           ;       // Read the count on positive edge
 0E61           ;       CapturePosEdgeUltrasoon = Timer3_wReadCompareValue();
 0E61 10                push X
 0E62 7C0000            xcall _Timer3_wReadCompareValue
 0E65 62D000            mov REG[0xd0],>__r0
 0E68 5A00              mov [__r0],X
 0E6A 20                pop X
 0E6B 08                push A
 0E6C 5100              mov A,[__r0]
 0E6E 62D000            mov REG[0xd0],>_CapturePosEdgeUltrasoon
 0E71 5300              mov [_CapturePosEdgeUltrasoon],A
 0E73 18                pop A
 0E74 5301              mov [_CapturePosEdgeUltrasoon+1],A
 0E76                   .dbline 465
 0E76           ;       
 0E76           ;       // Change the capture to negative edge and set flag
 0E76           ;       Timer3_FUNC_LSB_REG |= 0x80;
 0E76 7110              or F,0x10  ; iopage = 1
 0E78 433080            or REG[0x30],-128
 0E7B                   .dbline 466
 0E7B           ;       FlagUltrasoon |= FALLING_EDGE_ULTRASOON;
 0E7B 70CF              and F,0xCF      ; iopage = 0
 0E7D 62D000            mov REG[0xd0],>_FlagUltrasoon
 0E80 2E0002            or [_FlagUltrasoon],2
 0E83                   .dbline 467
 0E83           ;    }
 0E83           L67:
 0E83                   .dbline -2
 0E83           L65:
 0E83 62D000            mov REG[0xD0],>__r0
 0E86 18                pop A
 0E87 5300              mov [__rZ],A
 0E89 18                pop A
 0E8A 5300              mov [__rY],A
 0E8C 18                pop A
 0E8D 5300              mov [__rX],A
 0E8F 18                pop A
 0E90 5300              mov [__r11],A
 0E92 18                pop A
 0E93 5300              mov [__r10],A
 0E95 18                pop A
 0E96 5300              mov [__r9],A
 0E98 18                pop A
 0E99 5300              mov [__r8],A
 0E9B 18                pop A
 0E9C 5300              mov [__r7],A
 0E9E 18                pop A
 0E9F 5300              mov [__r6],A
 0EA1 18                pop A
 0EA2 5300              mov [__r5],A
 0EA4 18                pop A
 0EA5 5300              mov [__r4],A
 0EA7 18                pop A
 0EA8 5300              mov [__r3],A
 0EAA 18                pop A
 0EAB 5300              mov [__r2],A
 0EAD 18                pop A
 0EAE 5300              mov [__r1],A
 0EB0 18                pop A
 0EB1 5300              mov [__r0],A
 0EB3 18                pop A
 0EB4 60D5              mov REG[213],A
 0EB6 18                pop A
 0EB7 60D4              mov REG[212],A
 0EB9 18                pop A
 0EBA 60D3              mov REG[211],A
 0EBC 18                pop A
 0EBD 60D0              mov REG[208],A
 0EBF 18                pop A
 0EC0                   .dbline 0 ; func end
 0EC0 7E                reti
 0EC1                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
 0000           _FlagUltrasoon::
 0000 00                .byte 0
 0001                   .dbsym e FlagUltrasoon _FlagUltrasoon c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
 0000           _PulseWidthUltrasoon::
 0000 0000              .byte 0,0
 0002                   .dbsym e PulseWidthUltrasoon _PulseWidthUltrasoon i
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
 0000           _CaptureNegEdgeUltrasoon::
 0000 0000              .byte 0,0
 0002                   .dbsym e CaptureNegEdgeUltrasoon _CaptureNegEdgeUltrasoon i
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
 0000           _CapturePosEdgeUltrasoon::
 0000 0000              .byte 0,0
 0002                   .dbsym e CapturePosEdgeUltrasoon _CapturePosEdgeUltrasoon i
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
 0000           _FlagsElevator::
 0000 00                .byte 0
 0001                   .dbsym e FlagsElevator _FlagsElevator c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
 0000           _PulseWidthElevator::
 0000 0000              .byte 0,0
 0002                   .dbsym e PulseWidthElevator _PulseWidthElevator i
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
 0000           _CaptureNegEdgeElevator::
 0000 0000              .byte 0,0
 0002                   .dbsym e CaptureNegEdgeElevator _CaptureNegEdgeElevator i
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
 0000           _CapturePosEdgeElevator::
 0000 0000              .byte 0,0
 0002                   .dbsym e CapturePosEdgeElevator _CapturePosEdgeElevator i
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
 0000           _FlagsAileron::
 0000 00                .byte 0
 0001                   .dbsym e FlagsAileron _FlagsAileron c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
 0000           _PulseWidthAileron::
 0000 0000              .byte 0,0
 0002                   .dbsym e PulseWidthAileron _PulseWidthAileron i
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
 0000           _CaptureNegEdgeAileron::
 0000 0000              .byte 0,0
 0002                   .dbsym e CaptureNegEdgeAileron _CaptureNegEdgeAileron i
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\PSOC_R~1\PSOC_R~1\main.c
 0000           _CapturePosEdgeAileron::
 0000 0000              .byte 0,0
 0002                   .dbsym e CapturePosEdgeAileron _CapturePosEdgeAileron i
                        .area lit(rom, con, rel, lit)
 0000           L55:
 0000 4200              .byte 'B,0
 0002           L54:
 0002 4600              .byte 'F,0
 0004           L26:
 0004 4400              .byte 'D,0
 0006           L23:
 0006 5500              .byte 'U,0
 0008           L15:
 0008 5200              .byte 'R,0
 000A           L12:
 000A 4C00              .byte 'L,0
 000C           L9:
 000C 4300              .byte 'C,0
