 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
 0000                   .dbfile C:\Users\Ben\DOCUME~1\GitHub\PSOC_R~1\Pwm_Test\Pwm_Test\Pwm_Test\main.c
 0000                   .dbfunc e main _main fV
 0000           _main::
 0000                   .dbline -1
 0000                   .dbline 63
 0000           ; //----------------------------------------------------------------------------
 0000           ; // FILENAME: main.c
 0000           ; //
 0000           ; // DESCRIPTION:
 0000           ; //
 0000           ; //  This sample shows how to create a 33% duty cycle output pulse. 
 0000           ; //
 0000           ; // OVERVIEW:
 0000           ; //
 0000           ; //  The PWM output can be routed to any pin. 
 0000           ; //  In this example the PWM output is routed to P0[4]. 
 0000           ; //  The pin P0[4] has the 33% duty cycle output pulse with frequency = 1,5 kHz.
 0000           ; //
 0000           ; //    The following changes need to be made to the default settings in the Device Editor:
 0000           ; //
 0000           ; //   1. Select PWM16 user module.
 0000           ; //   2. The User Module will occupy the space in dedicated system resources.
 0000           ; //   3. Rename User Module's instance name to PWM16.
 0000           ; //   4. Set PWM16's Clock Parameter to VC1.
 0000           ; //   5. Set PWM16's Enable Parameter to High.
 0000           ; //   6. Set PWM16's CompareOut Parameter to Row_0_Output_0.
 0000           ; //   7. Set PWM16's CompareType Parameter to Less Than Or Equal.
 0000           ; //   8. Set PWM16's ClockSync Parameter to SyncSysClk.
 0000           ; //   9. Click on Row_0_Output_0 and connect Row_0_Output_0 to GlobalOutEven_4.
 0000           ; //   10.Select GlobalOutEven_4 for P0[4] in the Pinout.
 0000           ; //
 0000           ; // CONFIGURATION DETAILS:
 0000           ; //
 0000           ; //  1. The clock selected should be 1000 times the required period.
 0000           ; //  2. The UM's instance name must be shortened to PWM16.
 0000           ; //
 0000           ; // PROJECT SETTINGS:
 0000           ; //
 0000           ; //     IMO setting (SysClk)  = 24MHz       System clock is set to 24MHz
 0000           ; //     VC1=SysClk/1  = 16 (default)
 0000           ; //
 0000           ; // USER MODULE PARAMETER SETTINGS:
 0000           ; //
 0000           ; //  -------------------------------------------------------------------------------
 0000           ; //  UM         Parameter         Value                 Comments 
 0000           ; //  -------------------------------------------------------------------------------
 0000           ; //  PWM16      Name              PWM16                  UM's instance name
 0000           ; //             Clock             VC1
 0000           ; //             Enable            High
 0000           ; //             CompareOut        Row_0_Output_0
 0000           ; //             TerminalCountOut  Row_0_Output_1
 0000           ; //             Period            0                     The Code changes it.
 0000           ; //             PulseWidth        0                     The Code changes it. 
 0000           ; //             CompareType       Less Than Or Equal 
 0000           ; //             InterruptType     Terminal Count
 0000           ; //             ClockSync         SyncSysClk
 0000           ; //                                                    
 0000           ; //  -------------------------------------------------------------------------------
 0000           ; 
 0000           ; /* Code begins here */
 0000           ; 
 0000           ; #include <m8c.h>        // part specific constants and macros
 0000           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0000           ; #include "delay.h"
 0000           ; #define PWM_PERIOD1   999
 0000           ; #define PWM_PULSEWIDTH1 200
 0000           ; void main(void)
 0000           ; {
 0000                   .dbline 65
 0000           ;       //PRT1DR |=0x20;
 0000           ;       PWM_WritePeriod(PWM_PERIOD1);
 0000 10                push X
 0001 5703              mov X,3
 0003 50E7              mov A,-25
 0005 7C0000            xcall _PWM_WritePeriod
 0008                   .dbline 66
 0008           ;       PWM_Start();
 0008 7C0000            xcall _PWM_Start
 000B 20                pop X
 000C 8010              xjmp L3
 000E           L2:
 000E                   .dbline 69
 000E           ; 
 000E           ;       while (TRUE)
 000E           ;       {
 000E                   .dbline 70
 000E           ;               PRT2DR |= 0x80;
 000E 430880            or REG[0x8],-128
 0011                   .dbline 71
 0011           ;               PRT2DR &= ~ 0x20;
 0011 4108DF            and REG[0x8],-33
 0014                   .dbline 74
 0014           ;               
 0014           ;               
 0014           ;               PWM_WritePulseWidth(PWM_PULSEWIDTH1);   
 0014 10                push X
 0015 5700              mov X,0
 0017 50C8              mov A,-56
 0019 7C0000            xcall _PWM_WritePulseWidth
 001C 20                pop X
 001D                   .dbline 77
 001D           ;       
 001D           ;               
 001D           ;     }
 001D           L3:
 001D                   .dbline 68
 001D 8FF0              xjmp L2
 001F           X0:
 001F                   .dbline -2
 001F           L1:
 001F                   .dbline 0 ; func end
 001F 8FFF              jmp .
 0021                   .dbend
